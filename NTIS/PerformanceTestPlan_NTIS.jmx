<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">cldoutstgfin.smretailinc.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="datetoday" elementType="Argument">
            <stringProp name="Argument.name">datetoday</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="start_datetime" elementType="Argument">
            <stringProp name="Argument.name">start_datetime</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;,,PT2M,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="end_datetime" elementType="Argument">
            <stringProp name="Argument.name">end_datetime</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;,,P2D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="X-CSRFToken" elementType="Header">
            <stringProp name="Header.name">X-CSRFToken</stringProp>
            <stringProp name="Header.value">${__urldecode(${X_CSRF_TOKEN})}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOGIN_LOGOUT" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;57hALBHwQEeu485HrjDISA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;Username&quot;: &quot;&quot;,&#xd;
      &quot;Password&quot;: &quot;&quot;,&#xd;
      &quot;IsExecuting&quot;: false&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ISSUEREQUEST_SUBMIT" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">IR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionSubmitForApproval" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;pBE59TfK+EQJfYExlbSH0w&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;0&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: 0,&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${datetoday}&quot;,&#xd;
      &quot;RequestedById&quot;: 486,&#xd;
      &quot;RequestedByName&quot;: &quot;Ace_Requester test&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;28&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;4020.99&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;-4020.99&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;3.12&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: 0,&#xd;
      &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;UpdatedBy&quot;: 0,&#xd;
      &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;IsRemoved&quot;: false,&#xd;
          &quot;InternalRequisitionLineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;28&quot;,&#xd;
            &quot;ItemId&quot;: &quot;107&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;Piece&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;3.12&quot;,&#xd;
            &quot;RequestedQTY&quot;: 1,&#xd;
            &quot;LineAmount&quot;: &quot;3.12&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;Attachments&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Filename&quot;: &quot;&quot;,&#xd;
        &quot;FileContent&quot;: null&#xd;
      }&#xd;
    },&#xd;
    &quot;Type&quot;: &quot;IR&quot;,&#xd;
    &quot;InternalRequisitionGLAccounts&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;29&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;22&quot;,&#xd;
          &quot;BranchId&quot;: &quot;11&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;28&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;447&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;3.12&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;-3.12&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionSubmitForApproval</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RequestNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">REQUEST_NO</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.RequestNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ISSUEREQUEST_APPROVE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Approver&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Approvertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">IR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: true,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;ThMDYDWxrFuQ3LsNuW3ujg&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: false,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: true,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionApproveInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;YLoKgvxYJOGhe97sMa59jg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;UpdatedInternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${IR_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${IR_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;IR_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${IR_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${IR_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${IR_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;IR_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${IR_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${IR_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${IR_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${IR_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${IR_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${IR_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${IR_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${IR_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${IR_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${IR_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${IR_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;IR_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${IR_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;IR_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${IR_UpdatedDate}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionApproveInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ISSUEREQUEST_TRANSACT" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Fulfiller&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Fulfillertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayInventoryIssuance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InventoryIssuance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Vm5BnH07x7oUjxxisDQTSA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;TableSort&quot;: &quot;Status&quot;,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;EnablePickSlip&quot;: false,&#xd;
      &quot;ShowOnHandQty&quot;: false,&#xd;
      &quot;FilterByItemId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;ViewIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowMtlIssuance&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;UserId&quot;: 490,&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOCode&quot;: &quot;380598&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;29&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOId&quot;: &quot;2&quot;&#xd;
      },&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterByRequestTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;IsViewingOnly&quot;: false,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: true,&#xd;
        &quot;HasAdminRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/InventoryIssuance/ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetIssuanceHeaderInformation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2HnxT73tDFYDudkFNccIJg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/DataActionGetIssuanceHeaderInformation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get From" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_From</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;From&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_RequestType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_RequestedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedBy&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_ReqOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_ReqLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqDepartment" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_ReqDepartment</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqDepartment&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_SourceOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_SourceLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIO" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_SourceSubIO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIO&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IRTypeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_IRTypeCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IRTypeCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Z2+Ud_+zgmf86Tkd8FhRVw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;${IRHEAD_From}&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;${IRHEAD_RequestNo}&quot;,&#xd;
        &quot;RequestType&quot;: &quot;${IRHEAD_RequestType}&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;${IRHEAD_Status}&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;${IRHEAD_RequestDate}&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;${IRHEAD_RequestedBy}&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;${IRHEAD_ReqOperatingUnit}&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;${IRHEAD_ReqLocation}&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;${IRHEAD_ReqDepartment}&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;${IRHEAD_SourceOperatingUnit}&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;${IRHEAD_SourceLocation}&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;${IRHEAD_SourceSubIO}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;${IRHEAD_TotalAmount}&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;${IRHEAD_IRTypeCode}&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: false,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;InternalRequisition&quot;: {&#xd;
                &quot;Id&quot;: &quot;0&quot;,&#xd;
                &quot;RequestNo&quot;: &quot;&quot;,&#xd;
                &quot;RequestNoIntValue&quot;: 0,&#xd;
                &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
                &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableTo&quot;: &quot;&quot;,&#xd;
                &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RequestedById&quot;: 0,&#xd;
                &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
                &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
                &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
                &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
                &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
                &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
                &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
                &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
                &quot;Justification&quot;: &quot;&quot;,&#xd;
                &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
                &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
                &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
                &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;PO_Number&quot;: 0,&#xd;
                &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
                &quot;IsActive&quot;: false,&#xd;
                &quot;CreatedBy&quot;: 0,&#xd;
                &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;UpdatedBy&quot;: 0,&#xd;
                &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;-1&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionTransact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;1gl7SnY+GtagLW1yfJjNqg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;FullfillQty&quot;: 0,&#xd;
          &quot;OnHandQty&quot;: 28,&#xd;
          &quot;LineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;${IRTRANS_Id_4}&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;${IRTRANS_InternalRequisitionId}&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;${IRTRANS_ItemCategoryId_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${IRTRANS_ItemId_2}&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;${IRTRANS_IssuanceUOMCode}&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;${IRTRANS_UnitPrice}&quot;,&#xd;
            &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;IRTRANS_RequestedQTY&apos;),)},&#xd;
            &quot;LineAmount&quot;: &quot;${IRTRANS_LineAmount}&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;IRTRANS_CreatedBy_4&apos;),)},&#xd;
            &quot;CreatedDate&quot;: &quot;${IRTRANS_CreatedDate_4}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;IRTRANS_UpdatedBy_4&apos;),)},&#xd;
            &quot;UpdatedDate&quot;: &quot;${IRTRANS_UpdatedDate_4}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IRTypeCode&quot;: &quot;IR&quot;,&#xd;
    &quot;Remarks&quot;: &quot;PerfTestSample&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ActionTransact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-817284310">&quot;Success&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Transact Failed!</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ISSUEREQUEST_ACKNOWLEDGE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">IR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: true,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;GWSysUQvchwC5Hp0JVOFRA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ApprovedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_ApprovedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ApprovedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FullfilledDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_FullfilledDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FullfilledDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionAcknowledgeInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;RGnRT3sW4G3pgIj1QkmeLQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${IRACK_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${IRACK_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;IRACK_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${IRACK_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${IRACK_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${IRACK_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;IRACK_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${IRACK_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${IRACK_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${IRACK_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${IRACK_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${IRACK_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${IRACK_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${IRACK_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${IRACK_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${IRACK_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${IRACK_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${IRACK_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;${IRACK_ApprovedDate}&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;${IRACK_FullfilledDate}&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;IRACK_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${IRACK_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;IRACK_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${IRACK_UpdatedDate}&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;${IRLINE_Id_3}&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;${IRLINE_InternalRequisitionId}&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;${IRLINE_ItemCategoryId_2}&quot;,&#xd;
          &quot;ItemId&quot;: &quot;${IRLINE_ItemId}&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;${IRLINE_IssuanceUOMCode}&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;${IRLINE_UnitPrice}&quot;,&#xd;
          &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;IRLINE_RequestedQTY&apos;),)},&#xd;
          &quot;LineAmount&quot;: &quot;${IRLINE_LineAmount}&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;IRLINE_CreatedBy_3&apos;),)},&#xd;
          &quot;CreatedDate&quot;: &quot;${IRLINE_CreatedDate_3}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;IRLINE_UpdatedBy_3&apos;),)},&#xd;
          &quot;UpdatedDate&quot;: &quot;${IRLINE_UpdatedDate_3}&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IsFulfilled&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionAcknowledgeInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SERVICEREQUEST_SUBMIT" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayServiceRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">SR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionSubmitForApproval" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;pBE59TfK+EQJfYExlbSH0w&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;0&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: 0,&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;41&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${datetoday}&quot;,&#xd;
      &quot;RequestedById&quot;: 486,&#xd;
      &quot;RequestedByName&quot;: &quot;Ace_Requester test&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;28&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;0.09&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;-0.09&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;0.09&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: 0,&#xd;
      &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;UpdatedBy&quot;: 0,&#xd;
      &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;IsRemoved&quot;: false,&#xd;
          &quot;InternalRequisitionLineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;24&quot;,&#xd;
            &quot;ItemId&quot;: &quot;160&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;Piece&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;0.09&quot;,&#xd;
            &quot;RequestedQTY&quot;: 1,&#xd;
            &quot;LineAmount&quot;: &quot;0.09&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;PerfTest2023&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;Attachments&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Filename&quot;: &quot;&quot;,&#xd;
        &quot;FileContent&quot;: null&#xd;
      }&#xd;
    },&#xd;
    &quot;Type&quot;: &quot;SR&quot;,&#xd;
    &quot;InternalRequisitionGLAccounts&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;29&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;22&quot;,&#xd;
          &quot;BranchId&quot;: &quot;11&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;28&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;447&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0.09&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;-0.09&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionSubmitForApproval</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RequestNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">REQUEST_NO</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.RequestNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SERVICEREQUEST_APPROVE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Approver&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Approvertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayServiceRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">SR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;SR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: true,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;SR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: false,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: true,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionApproveInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;YLoKgvxYJOGhe97sMa59jg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;UpdatedInternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${SR_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${SR_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;SR_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${SR_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${SR_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${SR_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;SR_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${SR_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${SR_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${SR_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${SR_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${SR_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${SR_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${SR_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${SR_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${SR_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${SR_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${SR_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;SR_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${SR_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;SR_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${SR_UpdatedDate}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionApproveInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SERVICEREQUEST_TRANSACT" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Fulfiller&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Fulfillertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayInventoryIssuance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InventoryIssuance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Vm5BnH07x7oUjxxisDQTSA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;TableSort&quot;: &quot;Status&quot;,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;EnablePickSlip&quot;: false,&#xd;
      &quot;ShowOnHandQty&quot;: false,&#xd;
      &quot;FilterByItemId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;ViewIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowMtlIssuance&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;UserId&quot;: 490,&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOCode&quot;: &quot;380598&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;29&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOId&quot;: &quot;2&quot;&#xd;
      },&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterByRequestTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;IsViewingOnly&quot;: false,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: true,&#xd;
        &quot;HasAdminRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/InventoryIssuance/ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetIssuanceHeaderInformation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2HnxT73tDFYDudkFNccIJg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/DataActionGetIssuanceHeaderInformation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get From" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_From</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;From&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_RequestType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_RequestedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedBy&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_ReqOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_ReqLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqDepartment" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_ReqDepartment</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqDepartment&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_SourceOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_SourceLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIO" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_SourceSubIO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIO&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IRTypeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_IRTypeCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IRTypeCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Z2+Ud_+zgmf86Tkd8FhRVw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;${SRHEAD_From}&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;${SRHEAD_RequestNo}&quot;,&#xd;
        &quot;RequestType&quot;: &quot;${SRHEAD_RequestType}&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;${SRHEAD_Status}&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;${SRHEAD_RequestDate}&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;${SRHEAD_RequestedBy}&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;${SRHEAD_ReqOperatingUnit}&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;${SRHEAD_ReqLocation}&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;${SRHEAD_ReqDepartment}&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;${SRHEAD_SourceOperatingUnit}&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;${SRHEAD_SourceLocation}&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;${SRHEAD_SourceSubIO}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;${SRHEAD_TotalAmount}&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;${SRHEAD_IRTypeCode}&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: false,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;InternalRequisition&quot;: {&#xd;
                &quot;Id&quot;: &quot;0&quot;,&#xd;
                &quot;RequestNo&quot;: &quot;&quot;,&#xd;
                &quot;RequestNoIntValue&quot;: 0,&#xd;
                &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
                &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableTo&quot;: &quot;&quot;,&#xd;
                &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RequestedById&quot;: 0,&#xd;
                &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
                &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
                &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
                &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
                &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
                &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
                &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
                &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
                &quot;Justification&quot;: &quot;&quot;,&#xd;
                &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
                &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
                &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
                &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;PO_Number&quot;: 0,&#xd;
                &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
                &quot;IsActive&quot;: false,&#xd;
                &quot;CreatedBy&quot;: 0,&#xd;
                &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;UpdatedBy&quot;: 0,&#xd;
                &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;-1&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionTransact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;1gl7SnY+GtagLW1yfJjNqg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;FullfillQty&quot;: 0,&#xd;
          &quot;OnHandQty&quot;: 28,&#xd;
          &quot;LineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;${SRTRANS_Id_4}&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;${SRTRANS_InternalRequisitionId}&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;${SRTRANS_ItemCategoryId_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${SRTRANS_ItemId_2}&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;${SRTRANS_IssuanceUOMCode}&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;${SRTRANS_UnitPrice}&quot;,&#xd;
            &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;SRTRANS_RequestedQTY&apos;),)},&#xd;
            &quot;LineAmount&quot;: &quot;${SRTRANS_LineAmount}&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;SRTRANS_CreatedBy_4&apos;),)},&#xd;
            &quot;CreatedDate&quot;: &quot;${SRTRANS_CreatedDate_4}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;SRTRANS_UpdatedBy_4&apos;),)},&#xd;
            &quot;UpdatedDate&quot;: &quot;${SRTRANS_UpdatedDate_4}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IRTypeCode&quot;: &quot;SR&quot;,&#xd;
    &quot;Remarks&quot;: &quot;PerfTestSample&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ActionTransact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-817284310">&quot;Success&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Transact Failed!</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SERVICEREQUEST_ACKNOWLEDGE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">SR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;SR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: true,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;GWSysUQvchwC5Hp0JVOFRA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ApprovedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_ApprovedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ApprovedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FullfilledDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_FullfilledDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FullfilledDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionAcknowledgeInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;RGnRT3sW4G3pgIj1QkmeLQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${SRACK_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${SRACK_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;SRACK_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${SRACK_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${SRACK_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${SRACK_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;SRACK_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${SRACK_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${SRACK_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${SRACK_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${SRACK_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${SRACK_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${SRACK_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${SRACK_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${SRACK_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${SRACK_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${SRACK_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${SRACK_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;${SRACK_ApprovedDate}&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;${SRACK_FullfilledDate}&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;SRACK_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${SRACK_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;SRACK_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${SRACK_UpdatedDate}&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;${SRLINE_Id_3}&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;${SRLINE_InternalRequisitionId}&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;${SRLINE_ItemCategoryId_2}&quot;,&#xd;
          &quot;ItemId&quot;: &quot;${SRLINE_ItemId}&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;${SRLINE_IssuanceUOMCode}&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;${SRLINE_UnitPrice}&quot;,&#xd;
          &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;SRLINE_RequestedQTY&apos;),)},&#xd;
          &quot;LineAmount&quot;: &quot;${SRLINE_LineAmount}&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;SRLINE_CreatedBy_3&apos;),)},&#xd;
          &quot;CreatedDate&quot;: &quot;${SRLINE_CreatedDate_3}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;SRLINE_UpdatedBy_3&apos;),)},&#xd;
          &quot;UpdatedDate&quot;: &quot;${SRLINE_UpdatedDate_3}&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IsFulfilled&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionAcknowledgeInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BILLABLEREQUEST_SUBMIT" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayServiceRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">BR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionSubmitInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;ThMDYDWxrFuQ3LsNuW3ujg&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;mrEPzU0ovSshdD7fYzjpLA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;0&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: 0,&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;42&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;68&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;1&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${datetoday}&quot;,&#xd;
      &quot;RequestedById&quot;: 486,&#xd;
      &quot;RequestedByName&quot;: &quot;Ace_Requester test&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;28&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;3.39&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: 0,&#xd;
      &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;UpdatedBy&quot;: 0,&#xd;
      &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;28&quot;,&#xd;
          &quot;ItemId&quot;: &quot;156&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;Piece&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;3.39&quot;,&#xd;
          &quot;RequestedQTY&quot;: 1,&#xd;
          &quot;LineAmount&quot;: &quot;3.39&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;Attachments&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Filename&quot;: &quot;&quot;,&#xd;
        &quot;FileContent&quot;: null&#xd;
      }&#xd;
    },&#xd;
    &quot;InternalRequisitionGLAccounts&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
        &quot;BranchId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
        &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionSubmitInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RequestNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">REQUEST_NO</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.RequestNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BILLABLEREQUEST_TRANSACT" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Fulfiller&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Fulfillertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayInventoryIssuance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InventoryIssuance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Vm5BnH07x7oUjxxisDQTSA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;TableSort&quot;: &quot;Status&quot;,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;EnablePickSlip&quot;: false,&#xd;
      &quot;ShowOnHandQty&quot;: false,&#xd;
      &quot;FilterByItemId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;ViewIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowMtlIssuance&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;UserId&quot;: 490,&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOCode&quot;: &quot;380598&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;29&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOId&quot;: &quot;2&quot;&#xd;
      },&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterByRequestTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;IsViewingOnly&quot;: false,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: true,&#xd;
        &quot;HasAdminRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/InventoryIssuance/ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetIssuanceHeaderInformation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2HnxT73tDFYDudkFNccIJg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/DataActionGetIssuanceHeaderInformation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get From" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_From</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;From&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_RequestType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_RequestedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedBy&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_ReqOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_ReqLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqDepartment" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_ReqDepartment</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqDepartment&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_SourceOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_SourceLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIO" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_SourceSubIO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIO&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IRTypeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_IRTypeCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IRTypeCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Z2+Ud_+zgmf86Tkd8FhRVw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;${BRHEAD_From}&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;${BRHEAD_RequestNo}&quot;,&#xd;
        &quot;RequestType&quot;: &quot;${BRHEAD_RequestType}&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;${BRHEAD_Status}&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;${BRHEAD_RequestDate}&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;${BRHEAD_RequestedBy}&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;${BRHEAD_ReqOperatingUnit}&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;${BRHEAD_ReqLocation}&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;${BRHEAD_ReqDepartment}&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;${BRHEAD_SourceOperatingUnit}&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;${BRHEAD_SourceLocation}&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;${BRHEAD_SourceSubIO}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;${BRHEAD_TotalAmount}&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;${BRHEAD_IRTypeCode}&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: false,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;InternalRequisition&quot;: {&#xd;
                &quot;Id&quot;: &quot;0&quot;,&#xd;
                &quot;RequestNo&quot;: &quot;&quot;,&#xd;
                &quot;RequestNoIntValue&quot;: 0,&#xd;
                &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
                &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableTo&quot;: &quot;&quot;,&#xd;
                &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RequestedById&quot;: 0,&#xd;
                &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
                &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
                &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
                &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
                &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
                &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
                &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
                &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
                &quot;Justification&quot;: &quot;&quot;,&#xd;
                &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
                &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
                &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
                &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;PO_Number&quot;: 0,&#xd;
                &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
                &quot;IsActive&quot;: false,&#xd;
                &quot;CreatedBy&quot;: 0,&#xd;
                &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;UpdatedBy&quot;: 0,&#xd;
                &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;-1&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionTransact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;1gl7SnY+GtagLW1yfJjNqg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;FullfillQty&quot;: 0,&#xd;
          &quot;OnHandQty&quot;: 28,&#xd;
          &quot;LineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;${BRTRANS_Id_4}&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;${BRTRANS_InternalRequisitionId}&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;${BRTRANS_ItemCategoryId_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${BRTRANS_ItemId_2}&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;${BRTRANS_IssuanceUOMCode}&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;${BRTRANS_UnitPrice}&quot;,&#xd;
            &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;BRTRANS_RequestedQTY&apos;),)},&#xd;
            &quot;LineAmount&quot;: &quot;${BRTRANS_LineAmount}&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;BRTRANS_CreatedBy_4&apos;),)},&#xd;
            &quot;CreatedDate&quot;: &quot;${BRTRANS_CreatedDate_4}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;BRTRANS_UpdatedBy_4&apos;),)},&#xd;
            &quot;UpdatedDate&quot;: &quot;${BRTRANS_UpdatedDate_4}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IRTypeCode&quot;: &quot;SR&quot;,&#xd;
    &quot;Remarks&quot;: &quot;PerfTestSample&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ActionTransact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-817284310">&quot;Success&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Transact Failed!</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BILLABLEREQUEST_ACKNOWLEDGE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">BR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;BR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: true,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;GWSysUQvchwC5Hp0JVOFRA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ApprovedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_ApprovedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ApprovedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FullfilledDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_FullfilledDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FullfilledDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionAcknowledgeInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;RGnRT3sW4G3pgIj1QkmeLQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${BRACK_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${BRACK_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;BRACK_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${BRACK_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${BRACK_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${BRACK_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;BRACK_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${BRACK_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${BRACK_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${BRACK_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${BRACK_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${BRACK_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${BRACK_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${BRACK_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${BRACK_SourceOrgId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${BRACK_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${BRACK_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${BRACK_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;${BRACK_ApprovedDate}&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;${BRACK_FullfilledDate_2}&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;BRACK_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${BRACK_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;BRACK_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${BRACK_UpdatedDate}&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;${BRLINE_Id_3}&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;${BRLINE_InternalRequisitionId}&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;${BRLINE_ItemCategoryId_2}&quot;,&#xd;
          &quot;ItemId&quot;: &quot;${BRLINE_ItemId}&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;${BRLINE_IssuanceUOMCode}&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;${BRLINE_UnitPrice}&quot;,&#xd;
          &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;BRLINE_RequestedQTY&apos;),)},&#xd;
          &quot;LineAmount&quot;: &quot;${BRLINE_LineAmount}&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;BRLINE_CreatedBy_3&apos;),)},&#xd;
          &quot;CreatedDate&quot;: &quot;${BRLINE_CreatedDate_3}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;BRLINE_UpdatedBy_3&apos;),)},&#xd;
          &quot;UpdatedDate&quot;: &quot;${BRLINE_UpdatedDate_3}&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IsFulfilled&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionAcknowledgeInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="NON-BUDGETEDREQUEST_SUBMIT" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayServiceRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">NB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionSubmitInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;ThMDYDWxrFuQ3LsNuW3ujg&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;mrEPzU0ovSshdD7fYzjpLA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;0&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: 0,&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;44&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${datetoday}&quot;,&#xd;
      &quot;RequestedById&quot;: 486,&#xd;
      &quot;RequestedByName&quot;: &quot;Ace_Requester test&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;28&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;10.27&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: 0,&#xd;
      &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;UpdatedBy&quot;: 0,&#xd;
      &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;36&quot;,&#xd;
          &quot;ItemId&quot;: &quot;165&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;Piece&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;10.27&quot;,&#xd;
          &quot;RequestedQTY&quot;: 1,&#xd;
          &quot;LineAmount&quot;: &quot;10.27&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;Attachments&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Filename&quot;: &quot;&quot;,&#xd;
        &quot;FileContent&quot;: null&#xd;
      }&#xd;
    },&#xd;
    &quot;InternalRequisitionGLAccounts&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
        &quot;BranchId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
        &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionSubmitInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RequestNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">REQUEST_NO</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.RequestNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="NON-BUDGETEDREQUEST_TRANSACT" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Fulfiller&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Fulfillertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayInventoryIssuance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InventoryIssuance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Vm5BnH07x7oUjxxisDQTSA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;TableSort&quot;: &quot;Status&quot;,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;EnablePickSlip&quot;: false,&#xd;
      &quot;ShowOnHandQty&quot;: false,&#xd;
      &quot;FilterByItemId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;ViewIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowMtlIssuance&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;UserId&quot;: 490,&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOCode&quot;: &quot;380598&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;29&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOId&quot;: &quot;2&quot;&#xd;
      },&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterByRequestTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;IsViewingOnly&quot;: false,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: true,&#xd;
        &quot;HasAdminRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/InventoryIssuance/ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetIssuanceHeaderInformation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2HnxT73tDFYDudkFNccIJg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/DataActionGetIssuanceHeaderInformation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get From" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_From</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;From&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_RequestType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_RequestedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedBy&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_ReqOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_ReqLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqDepartment" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_ReqDepartment</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqDepartment&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_SourceOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_SourceLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIO" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_SourceSubIO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIO&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IRTypeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_IRTypeCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IRTypeCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Z2+Ud_+zgmf86Tkd8FhRVw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;${NBHEAD_From}&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;${NBHEAD_RequestNo}&quot;,&#xd;
        &quot;RequestType&quot;: &quot;${NBHEAD_RequestType}&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;${NBHEAD_Status}&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;${NBHEAD_RequestDate}&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;${NBHEAD_RequestedBy}&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;${NBHEAD_ReqOperatingUnit}&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;${NBHEAD_ReqLocation}&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;${NBHEAD_ReqDepartment}&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;${NBHEAD_SourceOperatingUnit}&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;${NBHEAD_SourceLocation}&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;${NBHEAD_SourceSubIO}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;${NBHEAD_TotalAmount}&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;${NBHEAD_IRTypeCode}&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: false,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;InternalRequisition&quot;: {&#xd;
                &quot;Id&quot;: &quot;0&quot;,&#xd;
                &quot;RequestNo&quot;: &quot;&quot;,&#xd;
                &quot;RequestNoIntValue&quot;: 0,&#xd;
                &quot;InternalRequisitionTypeId&quot;: &quot;40&quot;,&#xd;
                &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableTo&quot;: &quot;&quot;,&#xd;
                &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RequestedById&quot;: 0,&#xd;
                &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
                &quot;RequestingOrgId&quot;: &quot;29&quot;,&#xd;
                &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingLocationId&quot;: &quot;11&quot;,&#xd;
                &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
                &quot;SourceOrgId&quot;: &quot;1&quot;,&#xd;
                &quot;SourceOperatingUnitId&quot;: &quot;29&quot;,&#xd;
                &quot;SourceLocationId&quot;: &quot;13&quot;,&#xd;
                &quot;SourceSubIOId&quot;: &quot;2&quot;,&#xd;
                &quot;Justification&quot;: &quot;&quot;,&#xd;
                &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
                &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
                &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
                &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;PO_Number&quot;: 0,&#xd;
                &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
                &quot;IsActive&quot;: false,&#xd;
                &quot;CreatedBy&quot;: 0,&#xd;
                &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;UpdatedBy&quot;: 0,&#xd;
                &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;-1&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionTransact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;1gl7SnY+GtagLW1yfJjNqg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;FullfillQty&quot;: 0,&#xd;
          &quot;OnHandQty&quot;: 28,&#xd;
          &quot;LineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;${NBTRANS_Id_4}&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;${NBTRANS_InternalRequisitionId}&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;${NBTRANS_ItemCategoryId_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${NBTRANS_ItemId_2}&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;${NBTRANS_IssuanceUOMCode}&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;${NBTRANS_UnitPrice}&quot;,&#xd;
            &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;NBTRANS_RequestedQTY&apos;),)},&#xd;
            &quot;LineAmount&quot;: &quot;${NBTRANS_LineAmount}&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;NBTRANS_CreatedBy_4&apos;),)},&#xd;
            &quot;CreatedDate&quot;: &quot;${NBTRANS_CreatedDate_4}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;NBTRANS_UpdatedBy_4&apos;),)},&#xd;
            &quot;UpdatedDate&quot;: &quot;${NBTRANS_UpdatedDate_4}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IRTypeCode&quot;: &quot;NB&quot;,&#xd;
    &quot;Remarks&quot;: &quot;PerfTestSample&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ActionTransact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-817284310">&quot;Success&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Transact Failed!</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="NON-BUDGETEDREQUEST_ACKNOWLEDGE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;R0+XnUWYfdhp2T_l75qS+g&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;Ace_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;Ace_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">NB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;NB&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: true,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;GWSysUQvchwC5Hp0JVOFRA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ApprovedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_ApprovedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ApprovedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FullfilledDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_FullfilledDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FullfilledDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionAcknowledgeInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;RGnRT3sW4G3pgIj1QkmeLQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${NBACK_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${NBACK_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;NBACK_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${NBACK_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${NBACK_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${NBACK_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;NBACK_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${NBACK_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${NBACK_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${NBACK_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${NBACK_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${NBACK_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${NBACK_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${NBACK_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${NBACK_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${NBACK_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${NBACK_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${NBACK_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;${NBACK_ApprovedDate}&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;${NBACK_FullfilledDate_2}&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;NBACK_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${NBACK_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;NBACK_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${NBACK_UpdatedDate}&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;${NBLINE_Id_3}&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;${NBLINE_InternalRequisitionId}&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;${NBLINE_ItemCategoryId_2}&quot;,&#xd;
          &quot;ItemId&quot;: &quot;${NBLINE_ItemId}&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;${NBLINE_IssuanceUOMCode}&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;${NBLINE_UnitPrice}&quot;,&#xd;
          &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;NBLINE_RequestedQTY&apos;),)},&#xd;
          &quot;LineAmount&quot;: &quot;${NBLINE_LineAmount}&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;NBLINE_CreatedBy_3&apos;),)},&#xd;
          &quot;CreatedDate&quot;: &quot;${NBLINE_CreatedDate_3}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;NBLINE_UpdatedBy_3&apos;),)},&#xd;
          &quot;UpdatedDate&quot;: &quot;${NBLINE_UpdatedDate_3}&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IsFulfilled&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionAcknowledgeInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;j3icaLNRkT5YGxxXnXP8YQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NTIS_TRANSACTIONS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TRANSACTION_ISSUEREQUEST" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRSubmit_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRSubmit_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRSubmit_DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">IR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRSubmit_ActionSubmitForApproval" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;pBE59TfK+EQJfYExlbSH0w&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;0&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: 0,&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;90&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${datetoday}&quot;,&#xd;
      &quot;RequestedById&quot;: 12640,&#xd;
      &quot;RequestedByName&quot;: &quot;Saci_Requester test&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;5&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;1&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;1&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;4&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;5&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;188&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;6&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;31.25&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;-31.25&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;31.25&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: 0,&#xd;
      &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;UpdatedBy&quot;: 0,&#xd;
      &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;IsRemoved&quot;: false,&#xd;
          &quot;InternalRequisitionLineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;20&quot;,&#xd;
            &quot;ItemId&quot;: &quot;2356&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;Piece&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;31.25&quot;,&#xd;
            &quot;RequestedQTY&quot;: 1,&#xd;
            &quot;LineAmount&quot;: &quot;31.25&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;Attachments&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Filename&quot;: &quot;&quot;,&#xd;
        &quot;FileContent&quot;: null&#xd;
      }&#xd;
    },&#xd;
    &quot;Type&quot;: &quot;IR&quot;,&#xd;
    &quot;InternalRequisitionGLAccounts&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;5&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;71&quot;,&#xd;
          &quot;BranchId&quot;: &quot;1&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;1&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;125&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;31.25&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;-31.25&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionSubmitForApproval</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RequestNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">REQUEST_NO</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.RequestNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRSubmit_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRApprove_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRApprove_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Approver&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Approvertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRApprove_DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">IR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRApprove_ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;lWjhG+vZ+6ZjXWVNY4WUxw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: true,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRApprove_DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: false,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: true,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IR_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRApprove_ActionApproveInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;YLoKgvxYJOGhe97sMa59jg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;UpdatedInternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${IR_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${IR_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;IR_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${IR_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${IR_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${IR_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;IR_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${IR_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${IR_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${IR_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${IR_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${IR_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${IR_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${IR_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${IR_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${IR_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${IR_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${IR_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;IR_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${IR_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;IR_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${IR_UpdatedDate}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionApproveInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRApprove_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_2ndReceiver_RAFAS&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_2ndReceiver_RAFAStest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_DisplayInventoryIssuance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InventoryIssuance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Vm5BnH07x7oUjxxisDQTSA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;TableSort&quot;: &quot;Status&quot;,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;EnablePickSlip&quot;: false,&#xd;
      &quot;ShowOnHandQty&quot;: false,&#xd;
      &quot;FilterByItemId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;ViewIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowMtlIssuance&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;UserId&quot;: 12644,&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOCode&quot;: &quot;370187&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;5&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOId&quot;: &quot;6&quot;&#xd;
      },&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterByRequestTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;IsViewingOnly&quot;: false,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: true,&#xd;
        &quot;HasAdminRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/InventoryIssuance/ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_ScreenDataSetGetInternalRequisitionById" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2zsbtjBvTr0q+PqV+mM5uQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetInternalRequisitionById</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRBYID_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRBYID_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRBYID_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRBYID_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRBYID_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRBYID_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRBYID_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_DataActionGetIssuanceHeaderInformation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2HnxT73tDFYDudkFNccIJg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/DataActionGetIssuanceHeaderInformation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get From" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_From</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;From&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_RequestType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_RequestedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedBy&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_ReqOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_ReqLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqDepartment" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_ReqDepartment</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqDepartment&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_SourceOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_SourceLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIO" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_SourceSubIO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIO&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IRTypeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRHEAD_IRTypeCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IRTypeCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Z2+Ud_+zgmf86Tkd8FhRVw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;${IRHEAD_From}&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;${IRHEAD_RequestNo}&quot;,&#xd;
        &quot;RequestType&quot;: &quot;${IRHEAD_RequestType}&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;${IRHEAD_Status}&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;${IRHEAD_RequestDate}&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;${IRHEAD_RequestedBy}&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;${IRHEAD_ReqOperatingUnit}&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;${IRHEAD_ReqLocation}&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;${IRHEAD_ReqDepartment}&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;${IRHEAD_SourceOperatingUnit}&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;${IRHEAD_SourceLocation}&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;${IRHEAD_SourceSubIO}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;${IRHEAD_TotalAmount}&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;${IRHEAD_IRTypeCode}&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;${IRBYID_InternalRequisitionTypeId}&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;${IRBYID_RequestingOrgId}&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;${IRBYID_RequestingLocationId}&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;${IRBYID_SourceOrgId}&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;${IRBYID_SourceOperatingUnitId}&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;${IRBYID_SourceLocationId}&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;${IRBYID_SourceSubIOId}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: false,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;InternalRequisition&quot;: {&#xd;
                &quot;Id&quot;: &quot;0&quot;,&#xd;
                &quot;RequestNo&quot;: &quot;&quot;,&#xd;
                &quot;RequestNoIntValue&quot;: 0,&#xd;
                &quot;InternalRequisitionTypeId&quot;: &quot;${IRBYID_InternalRequisitionTypeId}&quot;,&#xd;
                &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableTo&quot;: &quot;&quot;,&#xd;
                &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RequestedById&quot;: 0,&#xd;
                &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
                &quot;RequestingOrgId&quot;: &quot;${IRBYID_RequestingOrgId}&quot;,&#xd;
                &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingLocationId&quot;: &quot;${IRBYID_RequestingLocationId}&quot;,&#xd;
                &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
                &quot;SourceOrgId&quot;: &quot;${IRBYID_SourceOrgId}&quot;,&#xd;
                &quot;SourceOperatingUnitId&quot;: &quot;${IRBYID_SourceOperatingUnitId}&quot;,&#xd;
                &quot;SourceLocationId&quot;: &quot;${IRBYID_SourceLocationId}&quot;,&#xd;
                &quot;SourceSubIOId&quot;: &quot;${IRBYID_SourceSubIOId}&quot;,&#xd;
                &quot;Justification&quot;: &quot;&quot;,&#xd;
                &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
                &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
                &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
                &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;PO_Number&quot;: 0,&#xd;
                &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
                &quot;IsActive&quot;: false,&#xd;
                &quot;CreatedBy&quot;: 0,&#xd;
                &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;UpdatedBy&quot;: 0,&#xd;
                &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;-1&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRTRANS_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_ActionTransact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;1gl7SnY+GtagLW1yfJjNqg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;FullfillQty&quot;: 0,&#xd;
          &quot;OnHandQty&quot;: 12,&#xd;
          &quot;LineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;${IRTRANS_Id_4}&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;${IRTRANS_InternalRequisitionId}&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;${IRTRANS_ItemCategoryId_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${IRTRANS_ItemId_2}&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;${IRTRANS_IssuanceUOMCode}&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;${IRTRANS_UnitPrice}&quot;,&#xd;
            &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;IRTRANS_RequestedQTY&apos;),)},&#xd;
            &quot;LineAmount&quot;: &quot;${IRTRANS_LineAmount}&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;IRTRANS_CreatedBy_4&apos;),)},&#xd;
            &quot;CreatedDate&quot;: &quot;${IRTRANS_CreatedDate_4}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;IRTRANS_UpdatedBy_4&apos;),)},&#xd;
            &quot;UpdatedDate&quot;: &quot;${IRTRANS_UpdatedDate_4}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IRTypeCode&quot;: &quot;IR&quot;,&#xd;
    &quot;Remarks&quot;: &quot;PerfTestSample&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ActionTransact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-817284310">&quot;Success&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Transact Failed!</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRTransact_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRAcknowledge_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRAcknowledge_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRAcknowledge_DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">IR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRAcknowledge_ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: true,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRAcknowledge_ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;GWSysUQvchwC5Hp0JVOFRA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRLINE_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRAcknowledge_DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ApprovedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_ApprovedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ApprovedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FullfilledDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_FullfilledDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FullfilledDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IRACK_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRAcknowledge_ActionAcknowledgeInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;RGnRT3sW4G3pgIj1QkmeLQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${IRACK_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${IRACK_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;IRACK_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${IRACK_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${IRACK_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${IRACK_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;IRACK_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${IRACK_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${IRACK_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${IRACK_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${IRACK_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${IRACK_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${IRACK_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${IRACK_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${IRACK_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${IRACK_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${IRACK_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${IRACK_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;${IRACK_ApprovedDate}&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;${IRACK_FullfilledDate}&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;IRACK_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${IRACK_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;IRACK_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${IRACK_UpdatedDate}&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;${IRLINE_Id_3}&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;${IRLINE_InternalRequisitionId}&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;${IRLINE_ItemCategoryId_2}&quot;,&#xd;
          &quot;ItemId&quot;: &quot;${IRLINE_ItemId}&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;${IRLINE_IssuanceUOMCode}&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;${IRLINE_UnitPrice}&quot;,&#xd;
          &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;IRLINE_RequestedQTY&apos;),)},&#xd;
          &quot;LineAmount&quot;: &quot;${IRLINE_LineAmount}&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;IRLINE_CreatedBy_3&apos;),)},&#xd;
          &quot;CreatedDate&quot;: &quot;${IRLINE_CreatedDate_3}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;IRLINE_UpdatedBy_3&apos;),)},&#xd;
          &quot;UpdatedDate&quot;: &quot;${IRLINE_UpdatedDate_3}&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IsFulfilled&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionAcknowledgeInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IRAcknowledge_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TRANSACTION_SERVICEREQUEST" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRSubmit_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRSubmit_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRSubmit_DisplayServiceRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">SR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRSubmit_ActionSubmitForApproval" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;pBE59TfK+EQJfYExlbSH0w&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;0&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: 0,&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;91&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${datetoday}&quot;,&#xd;
      &quot;RequestedById&quot;: 12640,&#xd;
      &quot;RequestedByName&quot;: &quot;Saci_Requester test&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;5&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;1&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;1&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;4&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;5&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;188&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;6&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;892.86&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;-892.86&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;892.86&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: 0,&#xd;
      &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;UpdatedBy&quot;: 0,&#xd;
      &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;IsRemoved&quot;: false,&#xd;
          &quot;InternalRequisitionLineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;2&quot;,&#xd;
            &quot;ItemId&quot;: &quot;4627&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;Monthly&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;892.86&quot;,&#xd;
            &quot;RequestedQTY&quot;: 1,&#xd;
            &quot;LineAmount&quot;: &quot;892.86&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;Perf SR&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;Attachments&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Filename&quot;: &quot;&quot;,&#xd;
        &quot;FileContent&quot;: null&#xd;
      }&#xd;
    },&#xd;
    &quot;Type&quot;: &quot;SR&quot;,&#xd;
    &quot;InternalRequisitionGLAccounts&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;5&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;71&quot;,&#xd;
          &quot;BranchId&quot;: &quot;1&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;1&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;137&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;892.86&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;-892.86&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionSubmitForApproval</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RequestNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">REQUEST_NO</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.RequestNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRSubmit_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRApprove_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRApprove_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Approver&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Approvertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRApprove_DisplayServiceRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">SR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRApprove_ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;SR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: true,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRApprove_DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;SR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: false,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: true,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SR_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRApprove_ActionApproveInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;YLoKgvxYJOGhe97sMa59jg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;UpdatedInternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${SR_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${SR_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;SR_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${SR_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${SR_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${SR_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;SR_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${SR_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${SR_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${SR_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${SR_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${SR_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${SR_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${SR_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${SR_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${SR_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${SR_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${SR_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;SR_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${SR_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;SR_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${SR_UpdatedDate}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionApproveInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRApprove_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_2ndReceiver_RAFAS&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_2ndReceiver_RAFAStest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_DisplayInventoryIssuance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InventoryIssuance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Vm5BnH07x7oUjxxisDQTSA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;TableSort&quot;: &quot;Status&quot;,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;EnablePickSlip&quot;: false,&#xd;
      &quot;ShowOnHandQty&quot;: false,&#xd;
      &quot;FilterByItemId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;ViewIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowMtlIssuance&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;UserId&quot;: 12644,&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOCode&quot;: &quot;370187&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;5&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOId&quot;: &quot;6&quot;&#xd;
      },&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterByRequestTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;IsViewingOnly&quot;: false,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: true,&#xd;
        &quot;HasAdminRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/InventoryIssuance/ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_ScreenDataSetGetInternalRequisitionById" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2zsbtjBvTr0q+PqV+mM5uQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetInternalRequisitionById</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRBYID_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRBYID_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRBYID_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRBYID_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRBYID_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRBYID_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRBYID_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_DataActionGetIssuanceHeaderInformation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2HnxT73tDFYDudkFNccIJg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/DataActionGetIssuanceHeaderInformation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get From" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_From</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;From&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_RequestType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_RequestedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedBy&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_ReqOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_ReqLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqDepartment" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_ReqDepartment</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqDepartment&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_SourceOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_SourceLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIO" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_SourceSubIO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIO&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IRTypeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRHEAD_IRTypeCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IRTypeCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Z2+Ud_+zgmf86Tkd8FhRVw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;${SRHEAD_From}&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;${SRHEAD_RequestNo}&quot;,&#xd;
        &quot;RequestType&quot;: &quot;${SRHEAD_RequestType}&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;${SRHEAD_Status}&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;${SRHEAD_RequestDate}&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;${SRHEAD_RequestedBy}&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;${SRHEAD_ReqOperatingUnit}&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;${SRHEAD_ReqLocation}&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;${SRHEAD_ReqDepartment}&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;${SRHEAD_SourceOperatingUnit}&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;${SRHEAD_SourceLocation}&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;${SRHEAD_SourceSubIO}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;${SRHEAD_TotalAmount}&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;${SRHEAD_IRTypeCode}&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;${SRBYID_InternalRequisitionTypeId}&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;${SRBYID_RequestingOrgId}&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;${SRBYID_RequestingLocationId}&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;${SRBYID_SourceOrgId}&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;${SRBYID_SourceOperatingUnitId}&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;${SRBYID_SourceLocationId}&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;${SRBYID_SourceSubIOId}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: false,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;InternalRequisition&quot;: {&#xd;
                &quot;Id&quot;: &quot;0&quot;,&#xd;
                &quot;RequestNo&quot;: &quot;&quot;,&#xd;
                &quot;RequestNoIntValue&quot;: 0,&#xd;
                &quot;InternalRequisitionTypeId&quot;: &quot;${SRBYID_InternalRequisitionTypeId}&quot;,&#xd;
                &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableTo&quot;: &quot;&quot;,&#xd;
                &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RequestedById&quot;: 0,&#xd;
                &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
                &quot;RequestingOrgId&quot;: &quot;${SRBYID_RequestingOrgId}&quot;,&#xd;
                &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingLocationId&quot;: &quot;${SRBYID_RequestingLocationId}&quot;,&#xd;
                &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
                &quot;SourceOrgId&quot;: &quot;${SRBYID_SourceOrgId}&quot;,&#xd;
                &quot;SourceOperatingUnitId&quot;: &quot;${SRBYID_SourceOperatingUnitId}&quot;,&#xd;
                &quot;SourceLocationId&quot;: &quot;${SRBYID_SourceLocationId}&quot;,&#xd;
                &quot;SourceSubIOId&quot;: &quot;${SRBYID_SourceSubIOId}&quot;,&#xd;
                &quot;Justification&quot;: &quot;&quot;,&#xd;
                &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
                &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
                &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
                &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;PO_Number&quot;: 0,&#xd;
                &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
                &quot;IsActive&quot;: false,&#xd;
                &quot;CreatedBy&quot;: 0,&#xd;
                &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;UpdatedBy&quot;: 0,&#xd;
                &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;-1&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRTRANS_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_ActionTransact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;1gl7SnY+GtagLW1yfJjNqg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;FullfillQty&quot;: 0,&#xd;
          &quot;OnHandQty&quot;: 0,&#xd;
          &quot;LineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;${SRTRANS_Id_4}&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;${SRTRANS_InternalRequisitionId}&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;${SRTRANS_ItemCategoryId_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${SRTRANS_ItemId_2}&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;${SRTRANS_IssuanceUOMCode}&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;${SRTRANS_UnitPrice}&quot;,&#xd;
            &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;SRTRANS_RequestedQTY&apos;),)},&#xd;
            &quot;LineAmount&quot;: &quot;${SRTRANS_LineAmount}&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;SRTRANS_CreatedBy_4&apos;),)},&#xd;
            &quot;CreatedDate&quot;: &quot;${SRTRANS_CreatedDate_4}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;SRTRANS_UpdatedBy_4&apos;),)},&#xd;
            &quot;UpdatedDate&quot;: &quot;${SRTRANS_UpdatedDate_4}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IRTypeCode&quot;: &quot;SR&quot;,&#xd;
    &quot;Remarks&quot;: &quot;SR Perf&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ActionTransact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-817284310">&quot;Success&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Transact Failed!</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRTransact_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRAcknowledge_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRAcknowledge_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRAcknowledge_DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">SR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRAcknowledge_ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;SR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: true,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRAcknowledge_ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;GWSysUQvchwC5Hp0JVOFRA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRLINE_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRAcknowledge_DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;IR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ApprovedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_ApprovedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ApprovedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FullfilledDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_FullfilledDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FullfilledDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SRACK_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRAcknowledge_ActionAcknowledgeInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;RGnRT3sW4G3pgIj1QkmeLQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${SRACK_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${SRACK_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;SRACK_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${SRACK_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${SRACK_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${SRACK_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;SRACK_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${SRACK_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${SRACK_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${SRACK_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${SRACK_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${SRACK_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${SRACK_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${SRACK_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${SRACK_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${SRACK_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${SRACK_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${SRACK_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;${SRACK_ApprovedDate}&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;${SRACK_FullfilledDate}&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;SRACK_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${SRACK_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;SRACK_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${SRACK_UpdatedDate}&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;${SRLINE_Id_3}&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;${SRLINE_InternalRequisitionId}&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;${SRLINE_ItemCategoryId_2}&quot;,&#xd;
          &quot;ItemId&quot;: &quot;${SRLINE_ItemId}&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;${SRLINE_IssuanceUOMCode}&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;${SRLINE_UnitPrice}&quot;,&#xd;
          &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;SRLINE_RequestedQTY&apos;),)},&#xd;
          &quot;LineAmount&quot;: &quot;${SRLINE_LineAmount}&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;SRLINE_CreatedBy_3&apos;),)},&#xd;
          &quot;CreatedDate&quot;: &quot;${SRLINE_CreatedDate_3}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;SRLINE_UpdatedBy_3&apos;),)},&#xd;
          &quot;UpdatedDate&quot;: &quot;${SRLINE_UpdatedDate_3}&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IsFulfilled&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionAcknowledgeInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SRAcknowledge_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TRANSACTION_BILLABLEREQUEST" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRSubmit_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRSubmit_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRSubmit_DisplayServiceRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">BR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRSubmit_ActionSubmitInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;mrEPzU0ovSshdD7fYzjpLA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;0&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: 0,&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;92&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;140&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;1&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${datetoday}&quot;,&#xd;
      &quot;RequestedById&quot;: 12640,&#xd;
      &quot;RequestedByName&quot;: &quot;Saci_Requester test&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;5&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;1&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;1&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;4&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;5&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;188&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;6&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;31.25&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: 0,&#xd;
      &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;UpdatedBy&quot;: 0,&#xd;
      &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;20&quot;,&#xd;
          &quot;ItemId&quot;: &quot;2356&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;Piece&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;31.25&quot;,&#xd;
          &quot;RequestedQTY&quot;: 1,&#xd;
          &quot;LineAmount&quot;: &quot;31.25&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;Attachments&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Filename&quot;: &quot;&quot;,&#xd;
        &quot;FileContent&quot;: null&#xd;
      }&#xd;
    },&#xd;
    &quot;InternalRequisitionGLAccounts&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
        &quot;BranchId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
        &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionSubmitInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RequestNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">REQUEST_NO</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.RequestNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRSubmit_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_2ndReceiver_RAFAS&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_2ndReceiver_RAFAStest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_DisplayInventoryIssuance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InventoryIssuance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Vm5BnH07x7oUjxxisDQTSA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;TableSort&quot;: &quot;Status&quot;,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;EnablePickSlip&quot;: false,&#xd;
      &quot;ShowOnHandQty&quot;: false,&#xd;
      &quot;FilterByItemId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;ViewIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowMtlIssuance&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;UserId&quot;: 12644,&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOCode&quot;: &quot;370187&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;5&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOId&quot;: &quot;6&quot;&#xd;
      },&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterByRequestTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;IsViewingOnly&quot;: false,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: true,&#xd;
        &quot;HasAdminRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/InventoryIssuance/ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_ScreenDataSetGetInternalRequisitionById" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2zsbtjBvTr0q+PqV+mM5uQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetInternalRequisitionById</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRBYID_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRBYID_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRBYID_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRBYID_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRBYID_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRBYID_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRBYID_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_DataActionGetIssuanceHeaderInformation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2HnxT73tDFYDudkFNccIJg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/DataActionGetIssuanceHeaderInformation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get From" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_From</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;From&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_RequestType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_RequestedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedBy&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_ReqOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_ReqLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqDepartment" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_ReqDepartment</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqDepartment&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_SourceOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_SourceLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIO" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_SourceSubIO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIO&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IRTypeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRHEAD_IRTypeCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IRTypeCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Z2+Ud_+zgmf86Tkd8FhRVw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;${BRHEAD_From}&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;${BRHEAD_RequestNo}&quot;,&#xd;
        &quot;RequestType&quot;: &quot;${BRHEAD_RequestType}&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;${BRHEAD_Status}&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;${BRHEAD_RequestDate}&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;${BRHEAD_RequestedBy}&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;${BRHEAD_ReqOperatingUnit}&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;${BRHEAD_ReqLocation}&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;${BRHEAD_ReqDepartment}&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;${BRHEAD_SourceOperatingUnit}&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;${BRHEAD_SourceLocation}&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;${BRHEAD_SourceSubIO}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;${BRHEAD_TotalAmount}&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;${BRHEAD_IRTypeCode}&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;${BRBYID_InternalRequisitionTypeId}&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;${BRBYID_RequestingOrgId}&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;${BRBYID_RequestingLocationId}&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;${BRBYID_SourceOrgId}&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;${BRBYID_SourceOperatingUnitId}&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;${BRBYID_SourceLocationId}&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;${BRBYID_SourceSubIOId}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: false,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;InternalRequisition&quot;: {&#xd;
                &quot;Id&quot;: &quot;0&quot;,&#xd;
                &quot;RequestNo&quot;: &quot;&quot;,&#xd;
                &quot;RequestNoIntValue&quot;: 0,&#xd;
                &quot;InternalRequisitionTypeId&quot;: &quot;${BRBYID_InternalRequisitionTypeId}&quot;,&#xd;
                &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableTo&quot;: &quot;&quot;,&#xd;
                &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RequestedById&quot;: 0,&#xd;
                &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
                &quot;RequestingOrgId&quot;: &quot;${BRBYID_RequestingOrgId}&quot;,&#xd;
                &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingLocationId&quot;: &quot;${BRBYID_RequestingLocationId}&quot;,&#xd;
                &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
                &quot;SourceOrgId&quot;: &quot;${BRBYID_SourceOrgId}&quot;,&#xd;
                &quot;SourceOperatingUnitId&quot;: &quot;${BRBYID_SourceOperatingUnitId}&quot;,&#xd;
                &quot;SourceLocationId&quot;: &quot;${BRBYID_SourceLocationId}&quot;,&#xd;
                &quot;SourceSubIOId&quot;: &quot;${BRBYID_SourceSubIOId}&quot;,&#xd;
                &quot;Justification&quot;: &quot;&quot;,&#xd;
                &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
                &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
                &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
                &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;PO_Number&quot;: 0,&#xd;
                &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
                &quot;IsActive&quot;: false,&#xd;
                &quot;CreatedBy&quot;: 0,&#xd;
                &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;UpdatedBy&quot;: 0,&#xd;
                &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;-1&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRTRANS_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_ActionTransact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;1gl7SnY+GtagLW1yfJjNqg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;FullfillQty&quot;: 0,&#xd;
          &quot;OnHandQty&quot;: 12,&#xd;
          &quot;LineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;${BRTRANS_Id_4}&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;${BRTRANS_InternalRequisitionId}&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;${BRTRANS_ItemCategoryId_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${BRTRANS_ItemId_2}&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;${BRTRANS_IssuanceUOMCode}&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;${BRTRANS_UnitPrice}&quot;,&#xd;
            &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;BRTRANS_RequestedQTY&apos;),)},&#xd;
            &quot;LineAmount&quot;: &quot;${BRTRANS_LineAmount}&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;BRTRANS_CreatedBy_4&apos;),)},&#xd;
            &quot;CreatedDate&quot;: &quot;${BRTRANS_CreatedDate_4}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;BRTRANS_UpdatedBy_4&apos;),)},&#xd;
            &quot;UpdatedDate&quot;: &quot;${BRTRANS_UpdatedDate_4}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IRTypeCode&quot;: &quot;BR&quot;,&#xd;
    &quot;Remarks&quot;: &quot;PerfTestSample&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ActionTransact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-817284310">&quot;Success&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Transact Failed!</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRTransact_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRAcknowledge_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRAcknowledge_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRAcknowledge_DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">BR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRAcknowledge_ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;BR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: true,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRAcknowledge_ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;GWSysUQvchwC5Hp0JVOFRA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;BR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRLINE_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRAcknowledge_DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;BR&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ApprovedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_ApprovedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ApprovedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FullfilledDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_FullfilledDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FullfilledDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BRACK_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRAcknowledge_ActionAcknowledgeInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;RGnRT3sW4G3pgIj1QkmeLQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${BRACK_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${BRACK_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;BRACK_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${BRACK_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${BRACK_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${BRACK_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;BRACK_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${BRACK_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${BRACK_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${BRACK_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${BRACK_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${BRACK_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${BRACK_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${BRACK_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${BRACK_SourceOrgId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${BRACK_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${BRACK_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${BRACK_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;${BRACK_ApprovedDate}&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;${BRACK_FullfilledDate_2}&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;BRACK_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${BRACK_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;BRACK_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${BRACK_UpdatedDate}&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;${BRLINE_Id_3}&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;${BRLINE_InternalRequisitionId}&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;${BRLINE_ItemCategoryId_2}&quot;,&#xd;
          &quot;ItemId&quot;: &quot;${BRLINE_ItemId}&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;${BRLINE_IssuanceUOMCode}&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;${BRLINE_UnitPrice}&quot;,&#xd;
          &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;BRLINE_RequestedQTY&apos;),)},&#xd;
          &quot;LineAmount&quot;: &quot;${BRLINE_LineAmount}&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;BRLINE_CreatedBy_3&apos;),)},&#xd;
          &quot;CreatedDate&quot;: &quot;${BRLINE_CreatedDate_3}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;BRLINE_UpdatedBy_3&apos;),)},&#xd;
          &quot;UpdatedDate&quot;: &quot;${BRLINE_UpdatedDate_3}&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IsFulfilled&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionAcknowledgeInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BRAcknowledge_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TRANSACTION_NON-BUDGETEDREQUEST" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBSubmit_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBSubmit_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBSubmit_DisplayServiceRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">NB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBSubmit_ActionSubmitInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;mrEPzU0ovSshdD7fYzjpLA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;0&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: 0,&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;94&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${datetoday}&quot;,&#xd;
      &quot;RequestedById&quot;: 12640,&#xd;
      &quot;RequestedByName&quot;: &quot;Saci_Requester test&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;5&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;1&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;1&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;4&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;5&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;188&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;6&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;309.82&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: 0,&#xd;
      &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;UpdatedBy&quot;: 0,&#xd;
      &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;9&quot;,&#xd;
          &quot;ItemId&quot;: &quot;2924&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;Piece&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;309.82&quot;,&#xd;
          &quot;RequestedQTY&quot;: 1,&#xd;
          &quot;LineAmount&quot;: &quot;309.82&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;Attachments&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Filename&quot;: &quot;&quot;,&#xd;
        &quot;FileContent&quot;: null&#xd;
      }&#xd;
    },&#xd;
    &quot;InternalRequisitionGLAccounts&quot;: {&#xd;
      &quot;List&quot;: [],&#xd;
      &quot;EmptyListItem&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
        &quot;BranchId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
        &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionSubmitInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get RequestNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">REQUEST_NO</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.RequestNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBSubmit_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_2ndReceiver_RAFAS&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_2ndReceiver_RAFAStest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_DisplayInventoryIssuance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InventoryIssuance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Vm5BnH07x7oUjxxisDQTSA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;TableSort&quot;: &quot;Status&quot;,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;0&quot;,&#xd;
      &quot;EnablePickSlip&quot;: false,&#xd;
      &quot;ShowOnHandQty&quot;: false,&#xd;
      &quot;FilterByItemId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterBySubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;ViewIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowMtlIssuance&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;UserId&quot;: 12644,&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOCode&quot;: &quot;370187&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;5&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOId&quot;: &quot;6&quot;&#xd;
      },&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;FilterByRequestTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;IsViewingOnly&quot;: false,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: false,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: true,&#xd;
        &quot;HasAdminRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/InventoryIssuance/ScreenDataSetGetInternalRequisitionsBySourceOperatingUnitIdWOOB</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_ScreenDataSetGetInternalRequisitionById" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2zsbtjBvTr0q+PqV+mM5uQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetInternalRequisitionById</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBBYID_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBBYID_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBBYID_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBBYID_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBBYID_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBBYID_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBBYID_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_DataActionGetIssuanceHeaderInformation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;2HnxT73tDFYDudkFNccIJg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;InternalRequisition&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;RequestNo&quot;: &quot;&quot;,&#xd;
              &quot;RequestNoIntValue&quot;: 0,&#xd;
              &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
              &quot;BillableTo&quot;: &quot;&quot;,&#xd;
              &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RequestedById&quot;: 0,&#xd;
              &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
              &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
              &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
              &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
              &quot;Justification&quot;: &quot;&quot;,&#xd;
              &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
              &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
              &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
              &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
              &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
              &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;PO_Number&quot;: 0,&#xd;
              &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
              &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
              &quot;IsActive&quot;: true,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/DataActionGetIssuanceHeaderInformation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get From" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_From</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;From&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_RequestType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestType&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_RequestedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedBy&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_ReqOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_ReqLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReqDepartment" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_ReqDepartment</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReqDepartment&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnit" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_SourceOperatingUnit</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnit&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_SourceLocation</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocation&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIO" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_SourceSubIO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIO&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IRTypeCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBHEAD_IRTypeCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IRTypeCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;Z2+Ud_+zgmf86Tkd8FhRVw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;InventoryIssuanceHeader&quot;: {&#xd;
        &quot;From&quot;: &quot;${NBHEAD_From}&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;${NBHEAD_RequestNo}&quot;,&#xd;
        &quot;RequestType&quot;: &quot;${NBHEAD_RequestType}&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;${NBHEAD_Status}&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;${NBHEAD_RequestDate}&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;${NBHEAD_RequestedBy}&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;${NBHEAD_ReqOperatingUnit}&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;${NBHEAD_ReqLocation}&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;${NBHEAD_ReqDepartment}&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;${NBHEAD_SourceOperatingUnit}&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;${NBHEAD_SourceLocation}&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;${NBHEAD_SourceSubIO}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;${NBHEAD_TotalAmount}&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;IRTypeCode&quot;: &quot;${NBHEAD_IRTypeCode}&quot;,&#xd;
        &quot;TotalPartialCompletedQty&quot;: &quot;0&quot;,&#xd;
        &quot;IssuedBy&quot;: &quot;&quot;,&#xd;
        &quot;IssuanceRemarks&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;TableSortLineItem&quot;: &quot;&quot;,&#xd;
      &quot;StartIndexLineItem&quot;: 0,&#xd;
      &quot;MaxRecordsLineItem&quot;: 50,&#xd;
      &quot;EnableCopyReqButton&quot;: false,&#xd;
      &quot;EnableTransactButton&quot;: true,&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;${NBBYID_InternalRequisitionTypeId}&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;${NBBYID_RequestingOrgId}&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;${NBBYID_RequestingLocationId}&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;${NBBYID_SourceOrgId}&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;${NBBYID_SourceOperatingUnitId}&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;${NBBYID_SourceLocationId}&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;${NBBYID_SourceSubIOId}&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: false,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;ShowTransactConfirmation&quot;: false,&#xd;
      &quot;EnableMaterialIssuanceSlip&quot;: false,&#xd;
      &quot;ShowReasonCancellation&quot;: false,&#xd;
      &quot;CancellationReason&quot;: &quot;&quot;,&#xd;
      &quot;EnableFullfillQtyField&quot;: true,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;GeneratedInventoryIssuanceId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_selectedInternalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFullfillerRole&quot;: true,&#xd;
      &quot;_hasFullfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;ViewingOnly&quot;: false,&#xd;
      &quot;_viewingOnlyInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetInternalRequisitionById&quot;: {&#xd;
        &quot;List&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;InternalRequisition&quot;: {&#xd;
                &quot;Id&quot;: &quot;0&quot;,&#xd;
                &quot;RequestNo&quot;: &quot;&quot;,&#xd;
                &quot;RequestNoIntValue&quot;: 0,&#xd;
                &quot;InternalRequisitionTypeId&quot;: &quot;${NBBYID_InternalRequisitionTypeId}&quot;,&#xd;
                &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
                &quot;BillableTo&quot;: &quot;&quot;,&#xd;
                &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RequestedById&quot;: 0,&#xd;
                &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
                &quot;RequestingOrgId&quot;: &quot;${NBBYID_RequestingOrgId}&quot;,&#xd;
                &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingLocationId&quot;: &quot;${NBBYID_RequestingLocationId}&quot;,&#xd;
                &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
                &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
                &quot;SourceOrgId&quot;: &quot;${NBBYID_SourceOrgId}&quot;,&#xd;
                &quot;SourceOperatingUnitId&quot;: &quot;${NBBYID_SourceOperatingUnitId}&quot;,&#xd;
                &quot;SourceLocationId&quot;: &quot;${NBBYID_SourceLocationId}&quot;,&#xd;
                &quot;SourceSubIOId&quot;: &quot;${NBBYID_SourceSubIOId}&quot;,&#xd;
                &quot;Justification&quot;: &quot;&quot;,&#xd;
                &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
                &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
                &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
                &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
                &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
                &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;PO_Number&quot;: 0,&#xd;
                &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
                &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
                &quot;IsActive&quot;: false,&#xd;
                &quot;CreatedBy&quot;: 0,&#xd;
                &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
                &quot;UpdatedBy&quot;: 0,&#xd;
                &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;-1&quot;,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBTRANS_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_ActionTransact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;1gl7SnY+GtagLW1yfJjNqg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InventoryIssuance.InventoryIssuance&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;FullfillQty&quot;: 0,&#xd;
          &quot;OnHandQty&quot;: 63,&#xd;
          &quot;LineItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;${NBTRANS_Id_4}&quot;,&#xd;
            &quot;InternalRequisitionId&quot;: &quot;${NBTRANS_InternalRequisitionId}&quot;,&#xd;
            &quot;ItemCategoryId&quot;: &quot;${NBTRANS_ItemCategoryId_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${NBTRANS_ItemId_2}&quot;,&#xd;
            &quot;IssuanceUOMCode&quot;: &quot;${NBTRANS_IssuanceUOMCode}&quot;,&#xd;
            &quot;UnitPrice&quot;: &quot;${NBTRANS_UnitPrice}&quot;,&#xd;
            &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;NBTRANS_RequestedQTY&apos;),)},&#xd;
            &quot;LineAmount&quot;: &quot;${NBTRANS_LineAmount}&quot;,&#xd;
            &quot;OnFullfillmentQty&quot;: 0,&#xd;
            &quot;FulfilledQTY&quot;: 0,&#xd;
            &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
            &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;AcknowledgeQTY&quot;: 0,&#xd;
            &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;InventoryIssuanceCancel&quot;: false,&#xd;
            &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
            &quot;IsWithinBudget&quot;: true,&#xd;
            &quot;Budget&quot;: &quot;0&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;NBTRANS_CreatedBy_4&apos;),)},&#xd;
            &quot;CreatedDate&quot;: &quot;${NBTRANS_CreatedDate_4}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;NBTRANS_UpdatedBy_4&apos;),)},&#xd;
            &quot;UpdatedDate&quot;: &quot;${NBTRANS_UpdatedDate_4}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IRTypeCode&quot;: &quot;NB&quot;,&#xd;
    &quot;Remarks&quot;: &quot;PerfTestSample&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InventoryIssuance/IssuanceLineItem/ActionTransact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-817284310">&quot;Success&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">Transact Failed!</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBTransact_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBAcknowledge_DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBAcknowledge_ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Saci_Requester&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Saci_Requestertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBAcknowledge_DisplayIssueRequest" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Type</stringProp>
                  <stringProp name="Argument.value">NB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/InternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBAcknowledge_ScreenDataSetGetInternalRequisitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;VRMuEmdOxTniuLjX9xsQMw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;ShowIRDetail&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionId&quot;: &quot;&quot;,&#xd;
      &quot;SearchValue&quot;: &quot;${REQUEST_NO}&quot;,&#xd;
      &quot;IsCopyRequested&quot;: false,&#xd;
      &quot;UserDetail&quot;: {&#xd;
        &quot;ResponsibilityId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentIdentifier&quot;: &quot;0&quot;,&#xd;
        &quot;OperatingUnitId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;SelectedActiveTab&quot;: 0,&#xd;
      &quot;ShowRejectPrompt&quot;: false,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;ShowApproverButtons&quot;: false,&#xd;
      &quot;FilterByStatusId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;ReasonTypeId&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;RequestDate DESC&quot;,&#xd;
      &quot;Type&quot;: &quot;NB&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasRequestorRole&quot;: true,&#xd;
        &quot;HasApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;StartIndex&quot;: 0,&#xd;
    &quot;MaxRecords&quot;: 5&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisition/ScreenDataSetGetInternalRequisitions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON/YAML Path Extractor" enabled="true">
              <stringProp name="VAR">INTREQ_ID</stringProp>
              <stringProp name="JSONPATH">$..[?(@.RequestNo == &apos;${REQUEST_NO}&apos;)].Id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBAcknowledge_ScreenDataSetGetLineItems" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;GWSysUQvchwC5Hp0JVOFRA&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;NB&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ScreenDataSetGetLineItems</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_InternalRequisitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategoryId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_ItemCategoryId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategoryId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssuanceUOMCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_IssuanceUOMCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssuanceUOMCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitPrice" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_UnitPrice</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitPrice&quot;:&quot;(\S+)&quot;,&quot;RequestedQTY&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedQTY" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_RequestedQTY</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedQTY&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_LineAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LineAmount&quot;:&quot;(\S+)&quot;,&quot;OnFullfillmentQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBLINE_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBAcknowledge_DataActionPopulateView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;j73w7lghVTXeZi9EtZISug&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;ActiveTab&quot;: 0,&#xd;
      &quot;Attachments&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Filename&quot;: &quot;&quot;,&#xd;
          &quot;IRAttachmentId&quot;: &quot;0&quot;,&#xd;
          &quot;Content&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
      &quot;ForDeleteItemId&quot;: &quot;0&quot;,&#xd;
      &quot;GLAccounts&quot;: {&#xd;
        &quot;List&quot;: [],&#xd;
        &quot;EmptyListItem&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;0&quot;,&#xd;
          &quot;OperatingUnitId&quot;: &quot;0&quot;,&#xd;
          &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
          &quot;BranchId&quot;: &quot;0&quot;,&#xd;
          &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
          &quot;NaturalAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;BudgetAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AvailableAmount&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;InternalRequisition&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestNoIntValue&quot;: 0,&#xd;
        &quot;InternalRequisitionTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;InternalRequisitionStatusId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RequestedById&quot;: 0,&#xd;
        &quot;RequestedByName&quot;: &quot;&quot;,&#xd;
        &quot;RequestingOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;DepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
        &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
        &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
        &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
        &quot;ApprovedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;PO_Number&quot;: 0,&#xd;
        &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
        &quot;IsActive&quot;: true,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedDate&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;InternalRequisitionView&quot;: {&#xd;
        &quot;RequestNo&quot;: &quot;&quot;,&#xd;
        &quot;RequestType&quot;: &quot;&quot;,&#xd;
        &quot;BillableType&quot;: &quot;&quot;,&#xd;
        &quot;BillableTo&quot;: &quot;&quot;,&#xd;
        &quot;Status&quot;: &quot;&quot;,&#xd;
        &quot;RequestDate&quot;: &quot;&quot;,&#xd;
        &quot;RequestedBy&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;ReqLocation&quot;: &quot;&quot;,&#xd;
        &quot;ReqSubIO&quot;: &quot;&quot;,&#xd;
        &quot;ReqDepartment&quot;: &quot;&quot;,&#xd;
        &quot;SourceOperatingUnit&quot;: &quot;&quot;,&#xd;
        &quot;SourceLocation&quot;: &quot;&quot;,&#xd;
        &quot;SourceSubIO&quot;: &quot;&quot;,&#xd;
        &quot;Justification&quot;: &quot;&quot;,&#xd;
        &quot;MaterialIssuanceNo&quot;: &quot;&quot;,&#xd;
        &quot;FullfilledDate&quot;: &quot;&quot;,&#xd;
        &quot;TotalAmount&quot;: &quot;&quot;,&#xd;
        &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AllocatedAmount&quot;: &quot;0&quot;,&#xd;
        &quot;AvailableBudget&quot;: &quot;&quot;,&#xd;
        &quot;TotalRequestedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalIssuedQty&quot;: &quot;0&quot;,&#xd;
        &quot;TotalUnitPrice&quot;: &quot;0&quot;,&#xd;
        &quot;TotalLineAmount&quot;: &quot;0&quot;,&#xd;
        &quot;StatusCode&quot;: &quot;&quot;,&#xd;
        &quot;ReqOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqDepartmentId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;ReqSourceOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceOperatingUnitId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceLocationId&quot;: &quot;0&quot;,&#xd;
        &quot;SourceSubIOId&quot;: &quot;0&quot;,&#xd;
        &quot;RequestTypeId&quot;: &quot;0&quot;,&#xd;
        &quot;StatusId&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;IsDeleteDraft&quot;: false,&#xd;
      &quot;LineItemFieldId&quot;: 0,&#xd;
      &quot;MaxRecords&quot;: 50,&#xd;
      &quot;ReasonHeader&quot;: &quot;&quot;,&#xd;
      &quot;SelectAll&quot;: false,&#xd;
      &quot;SelectedInternalRequisitionLineItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReasonTypeId&quot;: 0,&#xd;
      &quot;ShowAttachment&quot;: false,&#xd;
      &quot;ShowCancelationReason&quot;: false,&#xd;
      &quot;ShowDeleteButton&quot;: false,&#xd;
      &quot;ShowDeleteConfirmation&quot;: false,&#xd;
      &quot;ShowLineItemList&quot;: false,&#xd;
      &quot;ShowUpdateLineItem&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionId&quot;: &quot;${INTREQ_ID_1}&quot;,&#xd;
      &quot;_internalRequisitionIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;Type&quot;: &quot;NB&quot;,&#xd;
      &quot;_typeInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasRequestorRole&quot;: true,&#xd;
      &quot;_hasRequestorRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasApproverRole&quot;: false,&#xd;
      &quot;_hasApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetReqOperatingUnits&quot;: {&#xd;
        &quot;OperatingUnits&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;Id&quot;: &quot;0&quot;,&#xd;
            &quot;Code&quot;: 0,&#xd;
            &quot;Name&quot;: &quot;&quot;,&#xd;
            &quot;Short_Name&quot;: &quot;&quot;,&#xd;
            &quot;TIN&quot;: 0,&#xd;
            &quot;CompanyId&quot;: &quot;0&quot;,&#xd;
            &quot;BranchId&quot;: &quot;0&quot;,&#xd;
            &quot;BusinessUnitId&quot;: &quot;0&quot;,&#xd;
            &quot;BillToAddress&quot;: &quot;&quot;,&#xd;
            &quot;DefaultShipTo&quot;: &quot;&quot;,&#xd;
            &quot;ShipToAddress&quot;: &quot;&quot;,&#xd;
            &quot;GroupCode&quot;: &quot;&quot;,&#xd;
            &quot;Date_From&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;Date_To&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;CreatedBy&quot;: 0,&#xd;
            &quot;UpdateDate&quot;: &quot;1900-01-01&quot;,&#xd;
            &quot;UpdatedBy&quot;: 0,&#xd;
            &quot;IsActive&quot;: false,&#xd;
            &quot;PadedCode&quot;: &quot;&quot;,&#xd;
            &quot;Ledger_code&quot;: &quot;&quot;,&#xd;
            &quot;Vendor_code&quot;: &quot;&quot;,&#xd;
            &quot;isTop20k&quot;: false&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/DataActionPopulateView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNo&quot;:&quot;(\S+)&quot;,&quot;RequestNoIntValue&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestNoIntValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestNoIntValue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestNoIntValue&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionTypeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_InternalRequisitionTypeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionTypeId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InternalRequisitionStatusId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_InternalRequisitionStatusId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InternalRequisitionStatusId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedById" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestedById</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedById&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestedByName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestedByName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestedByName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestingOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RequestingLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_RequestingLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RequestingLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get DepartmentId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_DepartmentId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DepartmentId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOperatingUnitId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_SourceOperatingUnitId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOperatingUnitId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceLocationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_SourceLocationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceLocationId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceSubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_SourceSubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceSubIOId&quot;:&quot;(\S+)&quot;,&quot;Justification&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AllocatedAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_AllocatedAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AllocatedAmount&quot;:&quot;(\S+)&quot;,&quot;AvailableBudget&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get AvailableBudget" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_AvailableBudget</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;AvailableBudget&quot;:&quot;(\S+)&quot;,&quot;TotalAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_TotalAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalAmount&quot;:&quot;(\S+)&quot;,&quot;TotalFullfilledAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ApprovedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_ApprovedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ApprovedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FullfilledDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_FullfilledDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FullfilledDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_CreatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">NBACK_UpdatedDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBAcknowledge_ActionAcknowledgeInternalRequisition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;RGnRT3sW4G3pgIj1QkmeLQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;InternalRequisition&quot;: {&#xd;
      &quot;Id&quot;: &quot;${NBACK_Id}&quot;,&#xd;
      &quot;RequestNo&quot;: &quot;${NBACK_RequestNo}&quot;,&#xd;
      &quot;RequestNoIntValue&quot;: ${__groovy(vars.get(&apos;NBACK_RequestNoIntValue&apos;),)},&#xd;
      &quot;InternalRequisitionTypeId&quot;: &quot;${NBACK_InternalRequisitionTypeId}&quot;,&#xd;
      &quot;BillableTypeId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToSupplierId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableToCustomerId&quot;: &quot;0&quot;,&#xd;
      &quot;BillableTo&quot;: &quot;&quot;,&#xd;
      &quot;InternalRequisitionStatusId&quot;: &quot;${NBACK_InternalRequisitionStatusId}&quot;,&#xd;
      &quot;RequestDate&quot;: &quot;${NBACK_RequestDate_2}&quot;,&#xd;
      &quot;RequestedById&quot;: ${__groovy(vars.get(&apos;NBACK_RequestedById&apos;),)},&#xd;
      &quot;RequestedByName&quot;: &quot;${NBACK_RequestedByName}&quot;,&#xd;
      &quot;RequestingOrgId&quot;: &quot;${NBACK_RequestingOrgId}&quot;,&#xd;
      &quot;RequestingSourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;RequestingLocationId&quot;: &quot;${NBACK_RequestingLocationId}&quot;,&#xd;
      &quot;DepartmentId&quot;: &quot;${NBACK_DepartmentId}&quot;,&#xd;
      &quot;RequestingSubIOId&quot;: &quot;0&quot;,&#xd;
      &quot;SourceOrgId&quot;: &quot;${NBACK_SourceOrgId}&quot;,&#xd;
      &quot;SourceOperatingUnitId&quot;: &quot;${NBACK_SourceOperatingUnitId_2}&quot;,&#xd;
      &quot;SourceLocationId&quot;: &quot;${NBACK_SourceLocationId_2}&quot;,&#xd;
      &quot;SourceSubIOId&quot;: &quot;${NBACK_SourceSubIOId}&quot;,&#xd;
      &quot;Justification&quot;: &quot;&quot;,&#xd;
      &quot;BudgetedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;UtilizedAmount&quot;: &quot;0&quot;,&#xd;
      &quot;AllocatedAmount&quot;: &quot;${NBACK_AllocatedAmount_2}&quot;,&#xd;
      &quot;AvailableBudget&quot;: &quot;${NBACK_AvailableBudget}&quot;,&#xd;
      &quot;TotalAmount&quot;: &quot;${NBACK_TotalAmount}&quot;,&#xd;
      &quot;TotalFullfilledAmount&quot;: &quot;0&quot;,&#xd;
      &quot;TotalAcknowledgeAmount&quot;: &quot;0&quot;,&#xd;
      &quot;NotesToApprover&quot;: &quot;&quot;,&#xd;
      &quot;RemarksToRequestor&quot;: &quot;&quot;,&#xd;
      &quot;ApprovedDate&quot;: &quot;${NBACK_ApprovedDate}&quot;,&#xd;
      &quot;FullfilledDate&quot;: &quot;${NBACK_FullfilledDate_2}&quot;,&#xd;
      &quot;AcknowledgeDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;CancellationDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
      &quot;PO_Number&quot;: 0,&#xd;
      &quot;RemindFulfillerNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;RemindApproverNotifyDate&quot;: &quot;1900-01-01&quot;,&#xd;
      &quot;IsTreatedAsFulfilled&quot;: false,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;NBACK_CreatedBy&apos;),)},&#xd;
      &quot;CreatedDate&quot;: &quot;${NBACK_CreatedDate}&quot;,&#xd;
      &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;NBACK_UpdatedBy&apos;),)},&#xd;
      &quot;UpdatedDate&quot;: &quot;${NBACK_UpdatedDate}&quot;&#xd;
    },&#xd;
    &quot;InternalRequisitionLineItems&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;${NBLINE_Id_3}&quot;,&#xd;
          &quot;InternalRequisitionId&quot;: &quot;${NBLINE_InternalRequisitionId}&quot;,&#xd;
          &quot;ItemCategoryId&quot;: &quot;${NBLINE_ItemCategoryId_2}&quot;,&#xd;
          &quot;ItemId&quot;: &quot;${NBLINE_ItemId}&quot;,&#xd;
          &quot;IssuanceUOMCode&quot;: &quot;${NBLINE_IssuanceUOMCode}&quot;,&#xd;
          &quot;UnitPrice&quot;: &quot;${NBLINE_UnitPrice}&quot;,&#xd;
          &quot;RequestedQTY&quot;: ${__groovy(vars.get(&apos;NBLINE_RequestedQTY&apos;),)},&#xd;
          &quot;LineAmount&quot;: &quot;${NBLINE_LineAmount}&quot;,&#xd;
          &quot;OnFullfillmentQty&quot;: 0,&#xd;
          &quot;FulfilledQTY&quot;: 0,&#xd;
          &quot;PartiallyCompleteFulfillment&quot;: 0,&#xd;
          &quot;FullfilledLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;AcknowledgeQTY&quot;: 0,&#xd;
          &quot;AcknowledgeLineAmount&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;InventoryIssuanceCancel&quot;: false,&#xd;
          &quot;InventoryIssuanceCancelDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;IsWithinBudget&quot;: true,&#xd;
          &quot;Budget&quot;: &quot;0&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;NBLINE_CreatedBy_3&apos;),)},&#xd;
          &quot;CreatedDate&quot;: &quot;${NBLINE_CreatedDate_3}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;NBLINE_UpdatedBy_3&apos;),)},&#xd;
          &quot;UpdatedDate&quot;: &quot;${NBLINE_UpdatedDate_3}&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;IsFulfilled&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_InternalRequisition/InternalRequisition/InternalRequisitionDetail/ActionAcknowledgeInternalRequisition</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NBAcknowledge_ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;Tx_srgsxI9E4t+kL+uCNzA&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;InternalRequisition.InternalRequisition&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_InternalRequisition/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PCOUNT_BULK-UPLOAD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">120</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_SETUP" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Ace_Accounting&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Ace_Accountingtest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountSetupList" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountSetupList</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetInventoryName" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;KST3krH0lv0S6u992Gnx4g&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;Countdown&quot;: {&#xd;
        &quot;Days&quot;: &quot;00&quot;,&#xd;
        &quot;Ended&quot;: &quot;&quot;,&#xd;
        &quot;Hour&quot;: &quot;00&quot;,&#xd;
        &quot;Minutes&quot;: &quot;00&quot;,&#xd;
        &quot;TimeOutId&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;Date_Variables&quot;: {&#xd;
        &quot;EndDateTime&quot;: &quot;&quot;,&#xd;
        &quot;StartDateTime&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;PCountSetup&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
        &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;Status&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOValidated&quot;: false,&#xd;
        &quot;CountedBy&quot;: 0,&#xd;
        &quot;VerifiedBy&quot;: 0,&#xd;
        &quot;Frozen&quot;: false,&#xd;
        &quot;TotalSystemQty&quot;: 0,&#xd;
        &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
        &quot;TotalCountQty&quot;: 0,&#xd;
        &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
        &quot;TotalVarianceQty&quot;: 0,&#xd;
        &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
        &quot;Remarks&quot;: &quot;&quot;,&#xd;
        &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
        &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;Popup_Var&quot;: {&#xd;
        &quot;showLogs&quot;: false,&#xd;
        &quot;showWorkflow&quot;: false&#xd;
      },&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountSetupDetails_Wb/DataActionGetInventoryName</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PSETUP_InventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountSetup_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;KiDE1iDpbuoKCwTMGVBKuQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountSetupList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${PSETUP_InventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${start_datetime}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${end_datetime}&quot;,&#xd;
          &quot;Status&quot;: &quot;151&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountSetupDetails_Wb/ActionPhysicalCountSetup_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetPCountSetup" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JAVET+UpbP_s6tyNh7KaZQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SelectedPCountSetupId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowDetailsPopup&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;PCOUNTLIST.[CreatedOn] DESC&quot;,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasAccountingRole&quot;: false,&#xd;
        &quot;HasAdministratorRole&quot;: false,&#xd;
        &quot;HasPCountApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;HasSystemRole&quot;: false,&#xd;
        &quot;HasDOMRole&quot;: false,&#xd;
        &quot;isDevelopmentMode&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PhysicalCountSetupList/DataActionGetPCountSetup</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PCountSetupId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PSETUP_PCountSetupId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PCountSetupId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-ACCOUNTING_UPLOAD" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Ace_Accounting&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Ace_Accountingtest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: false&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;&quot;,&#xd;
        &quot;CountQty&quot;: &quot;&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: true,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot;&quot;,&#xd;
          &quot;BranchName&quot;: &quot;&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;0&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;Status&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: false,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: false,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get BranchName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_BranchName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;BranchName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CompanyName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CompanyName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CompanyName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OperatingUnitName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_OperatingUnitName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;OperatingUnitName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusMeaning" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusMeaning</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusMeaning&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PhysicalInventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_PhysicalInventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PhysicalInventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StartDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StartDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get EndDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_EndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionBatchLoad_PCount_Initiate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;lP+ie2lhtSVDeQ94X7tlew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;FileName&quot;: &quot;ACE RAFAS - PCount_BulkUpload 1.xlsx&quot;,&#xd;
    &quot;SourceBinary&quot;: &quot;&quot;,&#xd;
    &quot;ManualExecute&quot;: true,&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionBatchLoad_PCount_Initiate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;ACE RAFAS - PCount_BulkUpload 1.xlsx&quot;,&#xd;
        &quot;UploadFile&quot;: &quot;UEsDBBQABgAIAAAAIQBi7p1oXgEAAJAEAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIooslMtOwzAQRfdI/EPkLUrcskAINe2CxxIqUT7AxJPGqmNbnmlp/56J+xBCoRVqN7ESz9x7MvHNaLJubbaCiMa7UgyLgcjAVV4bNy/Fx+wlvxcZknJaWe+gFBtAMRlfX41mmwCYcbfDUjRE4UFKrBpoFRY+gOOd2sdWEd/GuQyqWqg5yNvB4E5W3hE4yqnTEOPRE9RqaSl7XvPjLUkEiyJ73BZ2XqVQIVhTKWJSuXL6l0u+cyi4M9VgYwLeMIaQvQ7dzt8Gu743Hk00GrKpivSqWsaQayu/fFx8er8ojov0UPq6NhVoXy1bnkCBIYLS2ABQa4u0Fq0ybs99xD8Vo0zL8MIg3fsl4RMcxN8bZLqej5BkThgibSzgpceeRE85NyqCfqfIybg4wE/tYxx8bqbRB+QERfj/FPYR6brzwEIQycAhJH2H7eDI6Tt77NDlW4Pu8ZbpfzL+BgAA//8DAFBLAwQUAAYACAAAACEAtVUwI/QAAABMAgAACwAIAl9yZWxzLy5yZWxzIKIEAiigAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKySTU/DMAyG70j8h8j31d2QEEJLd0FIuyFUfoBJ3A+1jaMkG92/JxwQVBqDA0d/vX78ytvdPI3qyCH24jSsixIUOyO2d62Gl/pxdQcqJnKWRnGs4cQRdtX11faZR0p5KHa9jyqruKihS8nfI0bT8USxEM8uVxoJE6UchhY9mYFaxk1Z3mL4rgHVQlPtrYawtzeg6pPPm3/XlqbpDT+IOUzs0pkVyHNiZ9mufMhsIfX5GlVTaDlpsGKecjoieV9kbMDzRJu/E/18LU6cyFIiNBL4Ms9HxyWg9X9atDTxy515xDcJw6vI8MmCix+o3gEAAP//AwBQSwMEFAAGAAgAAAAhAAmXKlOKAgAAlwUAAA8AAAB4bC93b3JrYm9vay54bWyklF1v2jAUhu8n7T94FrchcQopRIQKStGQuqlSu/YSmdgQq4kdOQ4EVf3vO04IlHFTdRGxYx/ynPd8xKObKkvRlutCKBlh0vUw4jJWTMhNhP88zZ0BRoWhktFUSR7hPS/wzfj7t9FO6deVUq8IALKIcGJMHrpuESc8o0VX5VyCZa10Rg0s9cYtcs0pKxLOTZa6vucFbkaFxA0h1J9hqPVaxHym4jLj0jQQzVNqQH6RiLxoaVn8GVxG9WuZO7HKckCsRCrMvoZilMXhYiOVpqsUwq5IH1UafgHcxIPBbz2B6cJVJmKtCrU2XUC7jeiL+InnEnKWguoyB58j9VzNt8LW8KhKB19UFRxZwQlGvP+mEWituldCSN4Xaf2jNh+PR2uR8uemdRHN8980s5VKMUppYe6YMJxF+BqWasdPGz2MdJlPS5GC1Q8G/jV2x8d2ftAIsIbrBy22NN7DN4ER42tapuYJWrt1CPt+z/cD+26lwzb9D0YjeF7M7kHCI92CIAibHfp1AR7J1VLGOiTLt/nwenDbnxBnSsjE6QX+zJl40wEM/avpdDbw7ubBO+RMB2GsaGmSQ6wWHeEeBHZh+kWr1kK8sBTsJOPNO1yOnf8ZWtu7Dcd+1c+C74pTVuwSVS9CMrWLsENsLffny11tfBHMJBDksOfDX5q9n1xsElBMvCvP9oD2rbIInymaNYrmcDl2OFPkfpBUnx8grZ6RrGv+aM8UqFO9VycZahxaH3rBiI3JbV+DUgrJme0VgHxYHVDLKpVZdzmve2BGDV3RgtsWimlau7F4iCIRjHF7YuJx4/1HZ9IhYee2Q8hg5H4Ag/Nzp0CKoc3sVGsdEs8f1iLbM3X8FwAA//8DAFBLAwQUAAYACAAAACEAgT6Ul/MAAAC6AgAAGgAIAXhsL19yZWxzL3dvcmtib29rLnhtbC5yZWxzIKIEASigAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArFJNS8QwEL0L/ocwd5t2FRHZdC8i7FXrDwjJtCnbJiEzfvTfGyq6XVjWSy8Db4Z5783Hdvc1DuIDE/XBK6iKEgR6E2zvOwVvzfPNAwhi7a0egkcFExLs6uur7QsOmnMTuT6SyCyeFDjm+CglGYejpiJE9LnShjRqzjB1Mmpz0B3KTVney7TkgPqEU+ytgrS3tyCaKWbl/7lD2/YGn4J5H9HzGQlJPA15ANHo1CEr+MFF9gjyvPxmTXnOa8Gj+gzlHKtLHqo1PXyGdCCHyEcffymSc+WimbtV7+F0QvvKKb/b8izL9O9m5MnH1d8AAAD//wMAUEsDBBQABgAIAAAAIQDPcUjDAksAAOEKAgAYAAAAeGwvd29ya3NoZWV0cy9zaGVldDEueG1snJPbjpswEIbvK/UdLN8HA7tJNihktcoq6t5UVbeHa8cMwYqNqe2cWvXddzCBVIpURYvAY3z4/n/wMH88akX2YJ00dU6TKKYEamEKWW9y+v3bavRAifO8LrgyNeT0BI4+Lj5+mB+M3boKwBMk1C6nlfdNxpgTFWjuItNAjTOlsZp7fLUb5hoLvAibtGJpHE+Y5rKmHSGztzBMWUoBz0bsNNS+g1hQ3KN/V8nG9TQtbsFpbre7ZiSMbhCxlkr6U4BSokX2sqmN5WuFeR+Tey7I0eKd4nPXy4TxKyUthTXOlD5CMus8X6c/YzPGxUC6zv8mTHLPLOxle4AXVPo+S8l4YKUX2N07YZMB1n4um+1kkdM/8fkaYUzaJr40/dxfupgXEk+4zYpYKHP6lGTLWZxStpiHCvoh4eD+6RPP16+gQHhAlYSS38boV8EVfG5LUOFYjMXdlu3amG27/QUXxqjkwrZWiQsv97AEhcuf8Au4X512kGWD7mJ+6fceVqHQv1hSQMl3yi+N+ikLX+V0FiXT2eRhOqb93Fdz+ARyU3k0lUY4HqooK07P4ASWNdqK0nGbqjAKBbAlWrb/J5YlP4Z46OHTdDKe4GqyBudXsmVSInbOG302kJxJHQPTCgyMA2MweCMDzzMwMJ4ZCXb/v5mFXN4AAAD//wAAAP//lJ3vrsS6kdxfZeEHiI/+axZeA5nZFzEcA/m0CdaGk7x9qiVS5HR1c0/50/Xtvpw6FFVqUfyRf/r7//zb3/7x73/5x1/+/Kf//F//51/+89/+MP3hX/7+v//yH3/HP/3r8od/+b/T+pe//uv/+H///re///Vv//GPf/vDz3+btz/8+U9/tdz/jmT8q7/j///zzz9/+uM///ynP/61xN59bPqOffrY/MT+CAmPjlnRYcmX9EfN4tTMl8bpB/+bXqeT8wRjKeiG33eJJX9LWZ2UpZfyclLuYOvLrz5ZFSGW/C1kc0LWJmT+cZfvcwcTIZsixJK/hexOiA2of/75ujjz1MbDNcY+NdjUf/XJrkix5G8ph5Oy91LcIPo8wXicHIoUS/6W4kbl++iluEH0KcEluUCnIsWSv6W4Ufk+Oymz75USbBf16/q8FCWW/K1k8rby6qX4XrmDSZ9MP4qUK9tpcTb2Rk4buLO7vT4lmqnRjNaynRp3o7ynqVfj7rFPiWZqJLud2G8nb7jIaX3TDdP7pq7R9l99DZpJstwr23WON13kdHK8x5Ro1jmS705svJN3XuR0avwNVaKZGsl8J3bfydsvcjo1NIzvaKZG8t+JDXjyDoycTg0N4zuaqZEseGIPnrwJI6dT47R+SjRTI7nwxDY8eR9GTlOz0ri5o5kayYkntuKZKrzei1dfyaCF77Lwu7yTzHi27O87fPZmjJzWN7sfNyW6ZdWm5MYzu/Hs3Rg5nRyqOEt0bj713T1a+ct+7J/S77n348NXeyWaDJ1ZsuMr210sb8fIab1zeDsu0a5PvztH8uOZ/dg/qt/I6eT4qqJE1zbivuVIhoy3JxrK3pCvN6xaEB/edGp035On5yx58pXtLpf3ZOS0/jn9E6JGj2YB3x0kufLMrjx7V0ZOp4fu9TuaDh/Jlme25dnbMnKaHH67HNryLNnyle3edL0tI+dRs/x4Wy7R5E5fJFu+sp0ab8vIaWp8Nf8p0UyN5MoLu/LiXRk5nRr/AC3RTI3kyUswJ+FrZOR0avwwLtHsFW/RpiV4XmKhiYnOlBdfl33we4Pn+SJ58pXtBo6vkZHTdY5/gJZodqkkS17Ykhdvycjp1NCszbBGXiQ/vrJd33g/Rk5TM9PAKdEjmTJZJD++sp0e78fI6fT4B1aNTskDdJEM+cp2erwhI6fTQ2NnaMiLZMhX9rea1Rsycjo1NHbu6NGVrN+TfpIlr1wpd3XL9fL9Rs6j5/Xyeko0ubNWyZKvbNc73pKRU9VMP1RblGhSJq+SJV/ZTo23ZOQ8araXL5NLNOsbyZHXYKbYOzJyOjV+Fr1EMzXabDFXySvNFzdHnnb/NvhZ72j3Vvo9jCVLXtmSV2/JyHk6Z1+oc4aWvEqWfGW7geMtGTmPmoOqrhLNLpVkyCsXyKs3ZOQ8as7Dv9CUaKZGsuOV62M/FfBGTlNz0k01tONVsuMr+/tKbd6OkdOpoXEznLbYJDO+sp0aXx8j51Hz8lNznxJNrtQmmfGV7dR4M0ZOp8Y/Gkq0DbavO3yTzPjKdmq8GSOnqpl/dj+Ka3R+JU+HTfLjK9sJ8n6MnEfQ/ENfqu7oK/kSskmGfGU7Od6QkfPI4Te9Es3GjvYNj/14o694zY/nld6Ct6Efb5IfX9mub7wfI+fpm5WKnBqdXskcyiZZ8pXtBHlLRs4jaKPPrTU6dd8Kvu8uyZU3duXNF8nI6QT5d+ESzUaP5MobTybv3pWR06mhe33oyrvkylf298XavSsj51Gz05e9Ek36Zpdc+cp2arwrI6ep8c/6T40ms2+7ZMtXtpPjbRk5TY5/vH5KNOscyZN3rpH9Y+CNnE6Nf5yXaKZGsuSda+TdWzJymppuQvT+7FmiR2I6u+TJV7a7VN6TkdPknP6BVaJZ52hLK/jT3k6LKzpPPmc/TbDf0XnqZu2+l3pInrxzmbx7T0ZO7Z7l54eWe9zRrHskQ97ZkHdvyMhpaqgULNFs6EiGvLMh+09Cb+Q0Nf5Sfko06ZtDMuQr+3sgH96QkdOp8TM6JZqpkQz54Glk/4HqjZxHzfTj599qNJnuOiRDvrJd53hDRs4jZ1lpqVCJJlXyITnyle3k+CoZOU3O6V8ianSetmQsH5IrX9lOkXdl5DyKDpovrdGsgyRXPrhSPrwrI6fJWfzntBLNBrPkykew4s27MnI6NXRrlWg2mLVFb+zJBy17a568zt33+vsJepRve51BfD0jDsmVr2w3drwrI6d2D/RQ99zRZKb9kFz5yv5W4ydL3sh51CwbDZ1hmXxKrnxlOzXelZHzqFn9KqdPiSYD+ZRc+cp2anyZjJxOjb9SJZqpkUz55I97pzdl5DQ1qy+9SjRTI3nyyVXy6T0ZOZ0aX+mUaKZG8uOTq2Q/q/9GTqfGj+ISzdRIdnyyHZ/ejpHzqNn8i+mnRpds7dApOfKV7Qayd2TkNEH0ElGiWfdIhnwGy5C9ISPnUXPy6t9iyPGS6FNbiMxFsi8f3mixU+NLrxLN+kay45OLZP9B6I2cTo1/oynRRM1LsuMr+3vcvLwdI6ep8WsfPjWaPMlfkh9f2U6O92PkdHK855Ro9r3oJRnyle3keENGTpPjP9J+SjS7VpIhv9iQuznq+yMscpqa3T8eSjRTIxnyiw355Qtk5DxqXlSyl2imRjLkFxtyN2Fe+qYz5JfX+kELpjVTI7nxi+vjl3dj5NS+2X5OP8FUopkayY1f7MZ+Hv2NnEfN/OMdp0QzNZIbvwIuxBfHyGlqPAPwKdFMjYaGRGxIa7kMnGbH2+yX5H5e/wUeIvIhvNJi+vGODKap66ButW/BIGq4W+H4DUL8aJjIlf7tg5P/TgVspRkzuom5lTvczZY5TRos8hPQIn6uDZqaO28zFWE1nAyl6UcDRq50302+ZLZG2+D2Bg68Z7ggbvrRqJEr3UsibgRZnSS+ckNqb/qRnPpO95IIHkGjj6Td3wDopRJeks8TmD7TsKwAIfE2iNHUefb+42fEanjpni1uiGsgyU9AkvwQSoKsp6cOv5wFPVXCyVwCFkdpHRXwJH5dCjqqGfg+efoFmsZIyY/GlFzpbkAR4Dchq3bTPnnMA5LucLa6exIxv5DzIxvvSD9o8lML9puDkmQCe6dA1Ve67yam/ZqJ7xOzQIX3O7ovzd9D/IL4fk96R8wfQ38d9bczyjuV8JJM/E4i9xeBfxPZeIf+7bykz35zeO00G4/oP8b/Ov5vD+yphuN3aiwR0IYTV9wTM4AdBLjvNM1pv2m99AI/n6nSfDxCAZkF7GDAAwbptxEo4deMYZ7q0qw8ggKZCuywQOhiP7itfB+o0sw8ggOZDuzwwGPa/JsK7H080jUzDwjBiRHBQgEa2w9J9CAu4bP7qv/tUhf593uXCkBBeoS8IfN5whwToYI1nA2oi/4TJEXoNrl5hwsek//6+cHfcClOS3Lwe8oT5kp3TxgiBqcOGTw2Hk4lvHRLb92104rygBuc/BsTrl0ryiGKQO4STq+d5uYBOzgRPAiRbTht9E2mhruZA9dNmp0HAOHkP2mim1pVfrz88iaMpzHUrRGE+PlgdwLiujuI8Jy6EqDuCFBK9uTxcmGBwl0XVOSEEU4dR3hOtLDqCScLXlEIanddUJETS2iN1vL3nOljfg0n36onDSe8050R+M0aMJhaRX7OL77nxvMqGlM4BVDh5Ff3vy2r9VK3iLMMpjFXiPakCxeQhf0ipXvuyRrtJNHGBWO4EO1pkqItOPyMtzXaSaLyqYQzs9QIQ9zS7ALEGFpWJ4kqpzFlOGmY4Z3uhzdNqnSkIYY37WNQwtk7y0UP/t6YAthwItpw6nDDc+H5ixJOL5xWigfE4bSQfXfMISTR1FMJp5K0KjyADqeFJlQ67PBcOrqwmsBw/R7a0+64wL27Sa1qAp17n906zyppXIJr7OEUwIcT0YeW9dxxZ8eEVklj976Awt8P74A/nAhAhMgm6cWvTyXcrZv6rpg0CBG/z8bkF2S8LevpptdGXlnC2fjWSMQpQBFpDgeSmn2jl9zHjk8Np5K08jvgESdffkBSs+/XD32aq+FUklZ+AymkXa+ISoTI58KBZuULd4ePjoJzo0mrvwM0cSI2cWpwIj5dBJeulOfZXK/GJ+L3g44iB2+IIr5d0PJra8RugI7ec/2kWXiAKVKJjfH0zInjg4l/6GCIjy38gg8FcwosnGBFiKzjCXPN/EGjhNMhrs2iBMDiRMTi1JDFCV1CEzsl3Arz7wunQYv4eR5M/u3/bVnFLqfpRTv41HDWSxq5iLmsQBLNoTR4EfMl/IJZwqkkrQAP+MV+QXMpBxrBiNkUQqanEgZ7kLz1aggjBAT9RBPijWLEmx1P9ZZwKknz8IBjnPwcCUbT4+F4Z6EP9zWcStIcHCgiPVaIZoTIZ4AvC+GMNZywnpMGNN7p7kXF1yDopeerJl4Z2JlKOO0lzb8DpnHygwWSmn8ve3DPlfDULUh15qRV4QHYOBHZCJ3PtVuDknfMNqI96cUgoBsnwhut0eqX++xnfT41nF07jXDEz/MIJ8bRspok2kChhlNJ2hxKwDliEwm3++7USEcEeTiVcCpJs/CAdZy6PdWKhTfacdpX3uWwhBd84Ug8/IIYf1+kBMwjfpg66qnDp2PnD9Jj7BHtSSM8AB8nIh+t0TqcjtO/rH9qOO0lzcMD+JG+5Lwh8pF0LsFwqmtTWqn8bU5AEpXPKle6c3GCICGzidoJmqjhOdtGYLrARmE8BTPhBEJao/Xina9A1LgOv+hGQVJQhxMNOTUccjpftBVPDafjSTPxgIicCImcGhM5vcCv+c/RJZzVBBoViZ9nEycu0rLqhXvtvKhoTEbiS6M0wAM2ciI40hp9JAVzYDWcfjfUAEkICPqJpsIbI4n9/z2Rh41876mW7uPGtxNolOQUYJKT34bnbVlPR/Gq6xrORriGSeLng26iufBGSuJIAN62u4RTSZqJB6wknmb+UddoSZNEL79jXBLtaSM8mEnxO7Diwj0WDkm0JLyG87VXoBiV58qV7p4rxE1OBY1EIQJR7JeVnOwOWHBDXKvEA3Zy8qwSeuqpxOefhcCCJwxqOfvIqjGUkMDDnChKyyp33vzDm7HUcLZPw6SRlHe6u35+1Lwt69G0E/X1hLduUvb7AmpE5RQglZPfIgKqHjOfsWqMvmqOqUq0Jw30gKucCKy0RmtHQRJ9QhyjlWhPkxRMqRBdaY0+knae7q3hbLr3YiZ/Xz8FiOVEjCVeuZumg6d5SjjbgRwNav0UTKoQaWmNPv108Cr/EsbkRvIupbGWUwBbTifNizfccp6DpY813PuEu/E0Ow+gy+mkj5sNu8R0ARd2JZx2lGbmF6fpHcrDPhD5XD1I4htv/HHz4imFQR4YOfGXeDN4JGE1P60vHBOYk4Zg3umulwjCtKw6xteZK80Szi6chmFOAYeJVxNfQjUSEzuz8ZL6Ek4laSYesJj9NmtlWqXRmPMWOOYYx0R7kjkFQOZERKY1Wi8cJNFYGjOZaE+TFJTjhGVao4+kF69weMKJXV6w5e9vuYDNnAjOnAp/aXXmjnVY/iW4hrN67kIuBU1BQU6IJlQ+/RStXh9Dmvh+pV26YEaFOE1rtF66/eQVmGNSE++omqRgRsWvZHpbo1XS8UO7wrZw9iERAKXy2nKlf9slnTMHUc3Bj3mlz/clPHfX/OvhixYVUXe6F+V5H8t6emqmLe5qeO+KLidKmleZA2yTthd9W9Yj6ghE3eHExdGe1k88q4I3OPdgsUarJCwK8+/mTzi2J7SnSeJSfPZr49BLzcXBjvs5uhpOe0lycfw8vW3ihZJ66XHx5affRuRegWWNWCdmRS8a1LqJK3HsnkuankocO8f6IuZjv2ma0vOJNGoTvx/0ky/ELauMpgWfsv2GETW8oBBPL5/k5ODnA1m+EresTpavC54wvuKnsiQ3ny/S03sUHTrT0M1l5jdza8RUp5IkL58DdHMmdNOyak/Ns18ciUE1XGqI9qRxHpCbmKLw47yRm8u88LlXY3IT7WmSeJ0KUZBva/TppZ24mhrOLpzGbeLneYgTt2lZj6STD3gq4eNc0yGuoZtYnxPI8l85LavKwhgnLx+jm/PFYv660rzT3V1H6KZlNUlU/dZwevE0Kw9Ob8StTkO8Wfky02s5+m1oBBeIKfRS4OTEbUJk10tUadZw2kuaiwfI5kzI5tyQzQWLH32dWcOpJM3BA15zJl4TIlsv7d1umKUuKOGMlkaDmjnxhAotSYM5NQtfdtr0ooazbtJwTfw8uwAf7NhwzWU5+bDAJ5wwUbMGbN7pzgf4eMcGbGJ1GFtTCa/di9/3G4JGbGJNXNBTVI43YnNZFz/ePtbIqCQQj3mMznkkXhNlwDPGsXKVTqMb85rzBWD+3pyisx75sMfGay7rSdvf2G8Oe0mz8Oi8R8I1sQnP00vbSlNPNZzeddI3TkxyB2OJivGGay6YFKdnbwmnkjQLjw595FMfG64JSXzOYgmnkjQLjw5+5JMfG625YDaAXoBL+Oy+qzkb0Dw8OP9xJl4T3wue0XSs9DWqhrN+0nhN/DyPJuI1LauWTeCR6elbwwlkN2vA5p3uLJzOgrSsqunESmg3kVnDaTdp8ynBeZC0wPE9N2BzORf6ZveEs0/AaFEqCQJkcyZk0xp9+mnxi20/NZz2kzajEhwNOfststFPrQo/N5o0rOFUkmbhAbI5E7IJkU8vgYxqP12KuTGyifa0CxdYOCGb1mi9cK+VIOkaTntJs/AA2ZwJ2cQreJP0IhixhlNJmoUHR0XSrATGUqvCgY/5FQ41nErSDDxANmdCNiGy9tKKRVjsluN5FA3ZxM+zgROyaVllLK0/2NfGm2UNJyscZg3ZvNOdgROyaVmPJia1aji7chqyOQfI5uy33cJB4s9EygoToCnM8QGSaE9ygQDZpB0jIOmxb5NE05fjUyTRniYpmBAnZNMa7S4c1ZYlnF44zb4DYHMmYHNuwKb1ErlACaeSNPsOeE369IUL99i3SSIXGJ8pifa0CxdMhdOxktZod+H8CpAaTntJs+/gaEksX/CzXw3XtF6iKm6Ma6I9rZeCORTCNa3R1kt0buETxnrI5CM5PjlKsgJkcyZk0xqtslDukjeNz5pEe5qkYCrcb9f0tkarJEwtkTeNkU2cDqJJCuZQ/KwbJDUHX7DdnX/QlXA2xDVgcw6AzdmvYoKk5uAraHKSNNzBEO1pvRQ4OAGb1mi9cChR6L23hjOYfL4YzN9P7ATIJpYNeStoyOYKUdxPpULP5gk1ZhO/z3UTMZuW1TqKdp2v4XQ4aSYeMJt0ZA2GUzPxFdA9Dach64P2tOHEK1NmAjat0aeX6A30U8NpL2kmHgCbtOM0eqmZ+EovMpB0h7PjC9Cg1E0BsYnVVX6AN2JzXXdfo3/sN0czl9rBlPh5Ht9EbFrWc+V2HkxjYnPWDqe8091rARGbltVJoofK+IDKWcM173QviT5ktkMq7cJRwTvGNWcN17zTvSRalNJwzXU7iWGxRoZjSavBA1xz9jDBG4uvnwu3L7R5Ug1nLqDBmvj5YHjTLHiDNXHd+H2uhgdLUjRccw6OrZwJ17SsOsSxgoDH0x3uBtr3rLPGa+L3g66iQrzxmvjQQ5s6WSPDAaV5eMBrYhNg8svm4SCS6Uk3PsQS7UkWHvCaM/Ga1mi9cmfwPWzMa6I9TVJg4cRrWqNNEm1SUsPZbafRmnNAa87+Vn9bVpX0QhXuS5QSTtapoj2tl4K1KARrWqOPpI1fVUo47SWtCA9gzdnPlqKXniJ8Q7lLRfgY1kR7Wi8FywoJ1rRGSy9tP3wiYA2nvaRNowSnW9LKDvTSU4Fv2IOax1Ld9qrr32+31GhNKGC3JFrTsp6OOj2T9Knh7FVFO+ZyDljNmVhNy2qSgptubOAap4mf514iTtOyqiTsD8Yj/A4Pnr4aqYmd2gJVVIY3UnPDJnw0oko42VRi1jDNO91Vc4RpWtbTUQd/EKvhbt3T9xjXQM05ADVnAjUtq4niBetjUBPtSf4UnII5E6hpjVZJWFVBFcH4IEy0p0kKplKI07RGqyQsIaZZi/FpmLOGad7pfjTRRErDNLeFT8S0Rkxx9rFegzTnANKcCdK0rKeXTnaCGu4+groBrs2kBIzmTIwmZPai/MbYNdyv0HCitLmUgNKc6YBMyOxF8RC/w5jnzB4uGqgJBeyZBGpaVr1+2OeRXsprOCFFNFBzDg7LnAnUtKxH0s5LecegJtqTvCAANWkr9bc1+kg6eeXOGNREe5qkYD7cfxaApGbi64vfocagJj4zaJKCUpxATWv06aUXL00bg5oglzVJgYkTqGmNdpLo8+H4BE3swqhJCkpx4jSt0U4SfT4cH6OJ7ac0ScFsCmGa1mgniR51Y0wTCKAmKajDCdO0RpskLnrHmOasYZp3unv6EqZpWZ0kmtwZn6qJDey1XmL37rcjvWlta7STxMN7uCAF7SmS7vTvXiK28G1ZnSQ/lmo4edNEe5oknkhZ6FxNa7RK+noluZeA1XAqSXJv/Dw9dkEXuhkwy+ok+ReoGk4lSe6Nnw8k+blwy+ok+aKphlNJknvj7IRAkp8Lt6xOki+ZajiVJLk3zk4IJPkS3LI6Sb5equFUkuTeS4Bn0rIz3HHNvTG8vS/VcCpJcm/8fNBLHs20rK6XvC/VcCpJKr+XAMsEO0t3XHNv9JJ/7FojpjiVJLk3fp57ibBMy+p6ia1y7N4alomNUANJfgrFsjpJftVODWe9pGGZOBokkOQ3SbGsJonmCWs4laS5d4BlLoRlLg3L3LYf2v6jhlNJmnsHSOZCp2lCZN9L5N5jJBPtSY/d4DRNkOH+jmtIpvUSuXcJp72kuXeAZC6EZEJk30vk3mMkE+1pvcS190JIpjXaDW9y7xJOe0lz7wDJXAjJhMheErl3CaeSNPcOkExC5N4Q2Usi9x4foYn2tAsXuDcdoWmNdheO3LuEs17SiMwlIDJBXvs7rhGZdseRe5dwKkmrvS98070OEI8JkV0v0Zx8DaeSNPcOaEzsLkC91NfetOsWzjkYVgIajYmf52cc0ZiW1cYSnbNQw2kvae4d0JgL0Zgg1ntJ5N5jGhPtSXdcQGMuRGNao10vkXuPD89Ee5qkwL394Txva7STRO49pjHBu2uSgtqbaExrtJNEVjmmMRft7Mw73ZsA1d6NxoQv0UJZa2RUe2tnZy4Bi7kQi2lZXS+xVY5rb43FxM+zCRCLaVlNEs1713BmAhqKidOBA0lUezcUExfOk5ofa2R04bSzM7H9QyCJ3LuhmCaJfGl8diYOG5DuuADEXAjEtEa7C0e+ND47E+1pkoKZEwIxrdFOEvlSCadjSXPvAMRcCMRcGoi5bf1+NWUWbgxioj2tlwL3JhDTGn16iZfr1XDaS5p7ByAm9s3wxUkDMbedN1Feajj5xosGtW7iFYTYNoM0teIbmsgrC6iZStKK74DEXIjEhMjnyu10IASMaWzfGomJn2djIhLTsupggiR6Ay/hbDBpIOYSnJ25EIhpWZ0k8srx2ZloTxpLAYiJ3U78WGogJsY3fW+23xw9UTQQEz8fXDia+G4gpkkirxyDmNghX+ulwL4JxLRGuwtHNVwJJ+ssl4us/DXEc6e7Go5ATMvqJNHrbg2nmjT/DkjMxS+fei+NxNxwLBV3023v2UZNaFC7dEH5TSimNfr0006L5Vs4XlGBnW80TYGBE4tpjXaaqEAZs5iLxmLe6W44EYtpWU0Srah4wm2K42uFDvaalLopADEXAjGt0U4TfZSr4W4thhOlTaAEp2fSLqRvyOxF0WOlhLHbZTKgNBgTAtgyCca0rK6n6MFSz8/MKKxFwzHvdD+kyMcbjrntvE+4NXJrTntKc/LgBM2FgMylAZkQRfu51nBWFWg4Jn4+uHj0CbPhmNvx44uGjzVi/dS9gLpRrjl5gGMuhGNiNeMzoA7e86eG027SjDzAMWlTH9x4zcgPrCNyrEMNp5I0Hw/Oz6QtfSCp+fi50c5INZxK0grxAMfsDwC5V6BA5HPhsDCO7WlciGs0Jn6exzfRmJZVzQmSyJzGNOai0Zh3urMmojEt65H0on3kaji7cBqNuQTnZ+IMWF+INxpzhwnQS92YxkR70vM3ODxzocMzrdHSS5DEE2BjGhPtaZKCQpwOz7RGO0k0vMc0JnbD0yQF9k00pjX6SNr81g2fGk7HkubeAY250NGZS6MxMT/gP7hAUkF5spXNaFHrp6AQJxbTGq39BFH0FbOEsT1gUjhpMCbaCbyJplIajLnjxCN61xzDmNj4Veun4DsmwZjWaO0noBdsBCXclTbf9YCGY2Kvb+4nwjEtq4nyfvqp4WyQazjmEhyfuRCOaVmdJBpPJZxK0iZTAhyTyOs3RPaS6P23hFNJmocHZ2cSMABJzcOx0Rc9fEv4lR7ahSalMR4QmQsRmdboc+0Yf6xhzEqnfaU5eXCC5kJQJnT2qvjyDTcIR3taRwUz4nSCpjXaOoo/15fwOrh8mpUHUOZCUObSoMwde1lRKV6P0EyMXIMy8fOBQZGRNyhzB4JMhUEJZ7NhGpS5BFDmQlCmZT3X7kVHKjzh9KVcYzIhgPuJTs+0rCoKL7vUTyWc3XYakwnWOpBEHzUbk7lDElnU+OjMRSMy73T3fkBEpmV1vUQDfExkYgcFyQkCInMhItMa7SRRpTImMtGeJikoxonItEabJOJWazgdS5qFXwCnv3A0l9KITIwl2md6GROZi0Zk3ulekt8axbK6XuI77g6nvaT5d8BjLsRj4nSAXhLfcXc4m5e78Mrff84IaEw64fgNkb0kvuPGS1I0FBM/z75EKKZldReO77gSTp5yGoqJzTsCSbSgsKGYNryp5i3h7MuvhmLiuIZAErl3QzFNEhVNYxRz0VDMO93dcYRiWlZ34ejT2BjFXDQU8073kmguvKGY1kv0UjdGMRcNxbzTvSRaDt5QTEiiM4atEevEzJc0FBNnzgZjidy7oZgmiT74lHA6vLUC/CI3fS+RezcU0ySRe49RzEVDMe90L4mWpDQU0ySRe49RzEVDMe90L4mq74ZimiSyyhLOqm8NxVyC8zJp/dLbspoJ8MzOE47tGw0qBdOd/t1Nqz/n8W1ZVdNKO1B/aji55dCeJontG7uiumlna/SRtHXnJdyrwGo4lSTNouDnyQVoszj0UrPvjXa4QC8Nl6SgPa2XeEkKNvukXmrF94aXA/ftyX7TOrFbpPE1JYcGNU1cfa90WqY1Wq/cdvhpaXTT0L/RniaJ/Rv721M3tQkUSPJPOfvNwSMF7WmSeAJl9RwhBlOrvreDXsJrOB3fUvWNnw/Gt/dvy3ou3ElUSA2nkqQPmWsAY2L/b7pwrfrGnm2++rZGLsVr98HcjXBpJhwKuKOIx7Ss2lH7TzCcht8yV43HvNOdg9MxmZbVJPFwGh+TuWo85p3uJZGDNx5z33da52iNmOJ0hnDVDsq8070o/zXTsp5+2v0Wap8nnH3EwEy15AUBk7kSk2mNPqJOvzcJRN3hQU9pNh5QmTTX/YbMXhR5Zg3jLO3MES7U8tfv45AQ3Htk5Y3MxDIZ2t7dGvkvRpVm5hfK6UeVL8bXxmbuWJXi3zVreB9cQc3PAzxzJTxzbXgmbj8Coms433wPTWqDnSfEVzo00xqtgx2qyNJrGKcdpONK8/QL6nSXkChNCG2ysA7SV1JjShObCEo9FVCaK1Ga1ujTU1jo6CXVcPKioJ2aiZ/nu48oTctqkmhmtYazC6edmbkGlCZ2cvclQjszE6to6ZuPNXIpTiYN0aB25YKynDBNa7R1E73j1XDaTZqdB5jmSpgmXuuapI32K63hbDEfGtS6KfBy4jSt0aebeDlIDafdpDl5cGrmSpzm2jjN/cA3RLrnhpPiaE/rpaAsJ07TGn166QiuXAmf+YNYYzXX4ORMWvj1tqxH1osOxqjh1oPfdbnGauLn2Z2I1bSsJonW0NZwvxHztyiN1sTKs0CUnxq3rCrq5FW0T7jNTTlN2uRKgGuudHImzhbuNfmZuhrObjwN18TPB91ENt5wzf388ZvhfawR68VUkubiAa65Eq65NlxzP2c/aQZJt8mnkjQXD87NXAnXhMh24WZaslrDqSTNxANccyVcEyKbJFpRg14az61ouCZ+PhhLVI43XBNn+tJaY2tkOJY0Ew9wzZVwTWyZ2noJOLJ/rpRwe9txJqAV4sG5mSvRmhD5SHrRrjy4cMMvm2hPetQFtCbOePK1XKM19xf216BeGk+saLQmfp7HEtGallXtG5L8l80azu44jdZcA1pzJVrTsjpJ9LY5pjXRnnThAlpzJVrTGu0k0dvTmNZEe5qkoAb3c4Nva7STRG9PY1pz1WjNO929YxKtaVlNEq1br+F0LGnuHRybibOL/B3XaE3ccXQO3Do+NhPtaRcucG+CNa3RrpfIBMbHZq4aq3mn+wtHM+ON1UQv0eI0a2T0QNFQzTU4NnMlVNOyWi/xzPgY1UR72oULym9CNa3RThJb5di9NVITK0vZvYnUtKxOElnl+MjMVTsy8053Y4mOzLSsThJZ5fjIzFWjNO90L4lq70Zp2vAmqxwfmblqjOad7iXRh83GaEISTzSVcGaV2pGZa0BorkRoWla7cLSEr4ZTSZp7B4TmSgdmQmQviayyhFNJmnsHgOZKgCZE9pKo0C3hVJJWeweAJg7D88+4BmjaWKI5nRJOJWm1dwBornReJkT2veTXpdRwKklz7wDQXP26qjdENkmY+vK1dwlnkjRAEz/P7k2ApmU9d9xBC4pqOJWkzZwEx2WuBGiuDdDcX8HihvFxmWhPeuwGgOZKgKY12vUSPePGgCba0yQFtTcBmtZoJ4keKGNAEwc1apKCVSkEaFqjTZLnyD41nI4lzb2D4zJXAjTXDtB8HbQDSA2nkjT3DgDNlQBNiOx7iXyphFNJmnsHR2WuhGdCZJV0/EQmcIex43TyHUzDMyEgcCZal9LwTBNFj5Qa7j5vfk/oaIDmGpyWuRKgaVlliEMUL7io4bODuL9VaYQmFHBXEaFpWZ0qKghqOPtQoCGaOLk00ERLUxqiaT1Fw3yMaK7aiZl3uit46cRMy+q6iV6e6omZ2SjXjsxcA0aTeLm3ZVVNONGTniwl3O9V7caTZuQBorkSogmZTdTLIySfGm53rJOkGXnAZ67EZ0LkIwkLsfzy8BpOL51m5MGhmSvxmRDZS6JqroRTSZqRB3DmSnAmRPaSyDNrOLFxDc7Ezwc+QDbe4MwDF4594K7Ss2OYV43OvNOdERCdaVn1poMmNoI73L+mf49wjc5cAzpzJTrTsjpRNGnxhLPbTuMzIYCvHp2ZaVmPqINXEo35zFXjM+90f/FoJqXxmceGq+dfosZ85qrxmXe6l0QzKY3PNElkTmM+c9X4zDvdS/KEj2XVC7ft3ig+NZxVBNqJmWvAZ64nzYM3PvPYN67FSzjzS43PxM8Hw5u+YjY+E0vW+WtBCaeSNAsP+MyV+My18ZkmicfSeB5c4zPx80EvkYU3PvPEzhtk4SWc9pI2kxLwmSvxmWvjM00SOXgJZ5I0PhM/z71ER2VaVrnjTBJVcuOjMrG6XnohD/jM9UU1eOMzT/D4VA6M+Uy0p0kK1qAQn2mNPr108oWr4ewrvQZorle680o6K9OyqibcEdxNdzjbnGjVCM073Wsi/26E5rnxNhvWiElOB7hWggeE5kqHZa6N0Dy3jXZ4reFUklaCB4TmSodlQuRz5UD48JUbr0LRCE38fGADNBPeCM0Tksgsx4QmTo/V7rnAv+mwTGu0jm9IIrMcH5a5aoTmnf49vPtl5vdWhZZVJR0MjdZwtlQWDSrddKd7TX4VoWV1mnw31XD3oeHrpQCH/GiauP6mdVRva/TRhF3KXLFbw8k9h/Y0SezgtI4KkpqDY1rOTzzXcLf633WTNBmO36ebbiNG07JqN52zn9/81HDaTdIcCn4+kOQN3LI6SdxNQwPfNETzTvcD3BfgltUkEcBWw2kvSQa+BedlboRoWlYnyVe7NZxKkgpw/Hxw4byBW1YnyU/r1HAqSTLwLUA0N0I0LauT5Od3aziVJBXg+HnuJeIzLauT5J+8NZxJ0vjMLTgvcyM+07I6Sf7JW8OpJM2+g/Myt8kX4BDZS6JHSgmnkjT7Ds7L3Oi8TIjsJfnXlBpOJWnuHbCZG7GZENlLoofc+LxMtCc95AIyk46beVuj3Vgi9x6fl4n2NElM8mx0XqY12iTRLv01nF44zb0DJnOj8zIhspdE7j0+LxPtab0UuDcBmdZo10vk3uPzMjeNxrzT3WOXaEzL6iSRe4/Py9y08zLvdCeJSEzL6iSRe49JzE0jMe90L4mq70Zinufs95v7WCOmOBveGom5BSTmRiSmZXW9RO5dwqkkzb0DEnMjEhMie0nk3uPzMtGedMcF52VuBGJao10vkXuXcNpLmnsHIOZGICZE9pLIvcfnZaI9rZcC9yYO0xptveTnMzG8hwjPpp2Xeaf7O85PfltWJ4nce3xe5qZxmHe6l0S1d+MwYQJ+PhO9NJz8xoZB2oXjyRM6yOFtjXa9RO49Pi8T7WmSgtqbGExrtJNE7l3C2R2nEZhbQGBudF6mZXWSqPYu4VSSVnsHAOZGACZE9pLIvcfnZaI96cIFAObmD8R8W6NdL5F7jwFMtKdJCmZOCMC0RjtJ5N5jAHPTzsu8050JEIBpWZ0kcu/xeZnbRVT+ekeUO91LopmTBmCe50I7olgjo+JEAzC3AMCk6XaMpc69F1oQU8PpHafV3gGAib3Q3CJwiGwXbiEmtIZTSZp7BwDmRgAmRPaS2JeGACba0+64wL0JwLRGn+G90OKTGs56SQMwcbgrT+YQgGlZnSTypfFxmVjxIPVSAGDSZuRva7STRL40BjDRniYpmPgmANMa7SSRL40BTGxurkkK3JsATGu0SaK1MDWcjiWt9r54TWeVBGBiH8leElWVJZxK0mrvAMDcCMDcGoAJ96bP4DWcStJmToLTMvEB11tlAzBNEvnSGMBEe9pYCmZO6LBMa7QbS1QvjQHMTQMw73Q/lvzCE8vqJLEvjd1bAzC3K91JIgDTsjpJ7EtDABOnpEsXLgAwaWP7tzXaSSJfGgOYaE+TFHy2JADTGm2S6OiSGs7uOA3AxLlb/IyjYzItq5NEvjQGMLHeQeulwL09FYcL17s3bcVQw930xveXVI3AxEHvQTfRZ8tGYMKY6Pgwa2RU6WpnZG4BgUk726ObuqmThfaLquF0MGn2HRCYtLM9JPXFt59/+tRwKkmz74DA3IjAhMh+fJN9jwlMtKeN72DqhAhMa7S75cgrSzjtJa34DghM2tkeF663bzppsYYzSRqBiZ/nO44ITMtqvURrUGs4laTZd0Bg0s72b2y/3yTh67JfdTImMNGeNJYCApN2toekzr6xKylJusOd7X97pYZg4veDK+eXfVtWvXKviXbhruH0ymnV90VsuvKEEMytIZgn1jPT568S7shk101a+R0wmDhZ2de6jcE0TeRMJZx2k+bfAYOJ9e8kqfk3JFFhOWYw0Z42wIPymxhMa/QZTEtwz42nvjUCcwsIzM3fVLjnmn+jl/ieG5ffGn+Jn+dbjvhLy2q9xC+8JZyNJQ2+xIncgST6cNngSwxvgj+skVHFpLGXW8BebnQ8pmV1vUQuMGYv0Z40vIPjMYnueFujnST6jDI+HhPtaZIC+/argyGps+9gWqCE07Gk2XcAXm4EXm4NvDxf4OX9U66El25nlG//vljK309+B+glzm7wZtnQSxNFcxUl3K0EdZo0Aw/YSyxaJk2PgWODclqLjj/iGm1zt4jdidIsPKAvN6IvIbOO8dc0+WXYnxpOB5RWggf05eY328cYfyz8NQf1QAmnkrQSPDgacyP4EiKfXoIkdoLxDIqGXuLn2cIJvbSsYk7WS3TbjQ/G3DTw8k53hRyBl5bVSaKbbgxebhp4ead7SR68tKxOEtVxY/By08DLO91Logq8gZd24aiOG4OXmwZe3uleEk2gNPDSJNG7Uwlnd5wGXm4BeLkReGlZ3YWjOm4MXqI96dkbgJe0F/rbGm2SuI4bg5doT5MUFOAEXlqjnSSaICzh9MJp7h2Al9tJ898NvMRY8quLP9sYvER7Wi8FBTiBl9Zo10vk3mPwctPAyzvd3XEEXlrWI+lFhxk+4W5N1nctoKGXW4BeboReWlYVhW+Z5Exj9BLtSZfuSvf9RP7d0MsXvmW2gXwf92a/OXpR0cjLLSAvcbqUL+MaeWmS6J4bH42J9rReCibA/UlAb2u0XTielB+Dl5t2NOad7i8cFeANvHzBpeieK+HuI6Mb35qBB+TlRuTl1sjL104bX3+ecBv4TpPm4AF6ub1o/UlDL1/YOY5H03gKRUMv8fNcWRJ6aVl1NEESvYmP0ctNQy/v9O/RtPvFShjgzcEhiUfTsP5Ge8o9d6d7SX4KxbJqLx0TmWUNJ4/eXQMv73QvyZM7lvVIopeYTw1j+Vy38PBriO8afHmne1newy2rk+XHUw1j5+LOa50saSplD/jLnfhLy+pk+TFVw7iQ6TWUrBwK6Obb6ZRMy6qqzp1mU2o42WoA7WkjnZeB4+BC98CzRquk1+zPocGwGi4kRHuaJN4DZScE0xrtJPm3gxpOL5xk5Pj54MJ5I7esJok+idVwKkkqxfcAwdwJwbSsR9LiVz3hwg3nwtGeduG4FN8JwbRGO0m+xKzhrJc0BBM/zxeOEEzLapLoEO8aTiVJ3zL3AMHcCcG0rFvSBPehBQ01nEqSCnH8fNBLZOIPgnlJ8tNN1sigEN+14zHvdPdcIQTTsrpe8tNNNZz2kubeAYK5+zVw7/1BMNFLM99xNbxn62PQpHTTBWdj7kRhWqNPR51+JvFTw/25Qd+P3wus/PUMPQQEA8rPhltWFTXhxE732eAJoyPjnf92DcW80/2YIhd/UEzs13j6WSl01bAcx2YX2tXjcnwnFNMafTrqpHPeajjtJc3Fg0Mxd0IxIbKX5OcLaziTpKGY+HkeTnQopmV1vUQVwRjF3DUU8053Y4lQTMtqkniEj1HMXTsU8073ksjFHxTThjedhGeNjFxcQzFxcmNw4fx0imV1vURl+BjFxFGM0h0XoJi9F98b/VijVdKMOR5vTTXcfQr99ksNxoSAoJ+oCn9gzOln4cOgrZHhpdOq8OBQzJ0OxdwfGHP6wWHUfOluh8/OYEeD2rULynA6FdMardcO56lSgTmmMXeNxrzT/U3nZ8Qt65G00NniNZy+k2s45h4cibkTjmlZVVOwVVsNZw6u4Zj4eR7ghGNa1iPpRetTaziVpNXhAY65E465PzgmNgF+0SFvNZxK0urwAMfcCceEyL6XaHyPcUy0J91ywXmYO+GY1mh34agaGOOYaE+TFMyiEI5pjVZJO5aEeQcf45i7hmPe6c4F6DxMy+okUYEyxjF3Dce8070kKsEfHBP7SWPNF/XScCfC/eIrf/9WEOCYO+GY1mjrJZoOr+H0jtPq7wDH3AnHhMheEj3lxudhoj1teAezKIRjWqNPL9GE3aeGs17ScMw9wDF3wjEt65H0ouUoNZxK0tw7wDF3Og8TIntJZJVjHBPtSRcuOA8T35j8VOqDY04/x+k/UH3sN60TO17ku7DUeEz8Pj93ice0rHrloIm8soSTXbd37UDMO90ZE/GYllUlnTOttKjhdDBpcygBj7kTj7k/POb0A0n+O10Np5K08jvgMXfiMSGy9dLO0zol3ObF3FjSqu8L3/QXjqZPHh4TvYTDsf0TpYSTD6y7xmPe6V4SVd8Pj3lJIvsu4eyDisZjYmtRvuOIx7SsZ3jvtHdzDbe/5PvCaTzmHvCYOx2IaVmdJJpLHfOYaE/yyivdXTjiMa3RTpJfuveEu6ej6yfNwAMicycic3+IzGs00TOlhDNWBQ1qHRUYOCGZ1mjXUWTgNdxVU66jtAo8YDJ3OhVzf5jM6QdrCMgvS7h7QXeaNA8PoEzU/f7p+0CZlyayghLuHoFOk2biAZWJKps0NRNHP/GAquHmpU6UZuMBl7kTlwmZdURhZocnwEq43yLbidLq8OBszJ3ITMh8RC1Yy+CfLWMyE+1pd15g5HQ2pjVa7rwJkuhxNz4bc9fIzDvduSaRmZbVSaIxXsJZnXKhlr9/pwvIzJ3OxtwfMnOyXqLp1DGZifakCxeQmTudjWmN1l5aeZFqDae9pLl4AGbSyo43RPaS+MLd4VSS5uEBmLkTmAmRvSS+cEOuHu1pFy6YBScu0xrtLhzVKWMuc79AS2F4Bx8yicu0Rh9JLzaBMZe5a1zmne5NgMrwh8ucJhzxwmNp/BVT4zL3gMsk2BnDu7k3TgAg9y7hdHhr7h1wmTtxmRD5XDicAECP3hpOPj9rXCZ+nt8M6FBMy6pjCZKolBtzmbvGZd7pbiwRl2lZnSSatxxzmbvGZd7pXhLNojxc5jThmAR67I65zF3jMu90L4m+Yj5cpknyVd7HGrFOzIb3BVr+3pcCLnMnLnN/uMxLEo+lsXtrVCZ+PhjeVIA/VCYkTVxXlnD2Ln5RlkIvBe5NUOb+HIg5YRWKnxzDhRvPgV+MpSAp+IRJSOb+IJlYVrzScVM13H0a+i6+tRMxcc5ecOVoFuVhMi9N5JUl3H3Uc5o0/w6gzJ2gzP2BMi9NPMBve0/7SaMy8fvcT0RlWlZ1y3PxH4E+NZz5gEZlYs4vkESrwh8qc5pOfBjy701jKhOTeFIVd6U7tzzJwB8qc5qnlU4Ist8cuaVGZe5XupdEBv5QmZckesyNqUxM4mm9FHzE9NvHv63RMpbmGd5EF25s4BqVuQdU5k5UpmV1kqj8ruGkZNKoTPx8MLxpAuWhMifrJR7eYwPXqMw9OA5zJyrTsp5eOmjn3RpOTUCbPAmozJ2oTIjsJVH5XcLZJJNGZeLn+cIRlWlZtZeW02/tCKssYVDVyXDSwEysMQ1UEdbzgJnTjH0j6KYbn4i5a1jmne6sibBMy6odtfI2UjWMTbeyEaWRmXtAZuJUVz9x+ZCZ1lG0cYQ1MvJwjczEzwfXjjz8ITMh6eAZwjGZCYeVPPxK99fOk/XW6HPtDp4cGJOZu0Zm3uleEhXhD5l59RJNDpRwOpa0SfAAzATAR2PpmUKxC8c33djDtSMx8fPBWKIplIfLnObjx8+Qf6yR4fDWPDzgMumWeu8Pl3lJohJlzGWiPW14s4fTowySmocfP7xcp4STsYT2FEl3+vfwprv8bVn1joMkPzlQw6kk6Usmfp7GEt3lkNQMHJL8HVfDqSSpAsfPB5K8e1tW10v+jqvhVJI0AX4EPCbd5eilZwIcdxyd+FrDqSTJvfHzQS9597asrpf8G2YNp5KkCXC4TCDJu7dlNUm0dqCGU0mSex/BeZi4NM69LauT5CvwGk4lSR8w8fNBL3n3tqxOkrfKGk4lSe59BDDmQTCmZVVJL0wNuLe5Gk4lSe6Nn+deIhjTsjpJbAJDqv7QYMw73bk3wZiW1UnyL5g1nPXSRVf+ejoO2H7QS37+xLI6STS8x+dhHhddKUgK3JvOw7RGiyTsj0YvKTU844Sj7J3g0IjMO91fPV+AW9aja6WtrWo4vXqahQdE5kFE5tGITGySRltb1XAqSbPwAMc8CMeEyNZLfLR5C6eiNBMPcMyDjsWEzEfUvNAm0zWcStJM/EI3/WgiE28sJgTRERj4G0Yl+KGxmHe6l+SnwS2rDnAc9UYmPj4W89COxbzTnSRiMS2rk0QmPj4W89BYzDvdS/JzKJbVJPllWJ8azsaSxmJibRmbOLGYllUlYb9b//2ihlNJWgkeHIt50LGYR2MxF0ii4nLMYqI96d0pYDEPOhbTGn16aaGPYTXcrbT/+sqDBjVNQQ1O52Jao00TvYjXcHrlNAMPUMyDzsU8GoqJrXT8QjWM7yGKifa0XuJZcFon+LZGWy/RfnI1nPaSZt8XuOldgOy7kZjoJdpXA3/D0L41EvO40r0ksu9GYuK60cS8NWKdmPaSVoMHIOZBIObRQMxl7bf+vTe4q+FMkgZi4ufZKwnEtKw6llZ0k39TGZ+LeVxk5e8L3gDEPAjEtEY7Sf7zRQ2nvaTZdwBiHgRiQmQvieaZxiAm2pNMIAAxDwIxrdGul6g6GYOYaE+TFLg3gZjWaCeJqpMxiHloIOad7kyAQEzLqpKwyywP77F7ayDmEZyLeXgq/W1ZnSQe3sP5b7SnXbhgBoVATGu0Sjp5QVMNp3ecNoMSgJgHgZhHAzEXSKKCaQxioj2tl4IZFAIxrdGul2ieqYSzXtJAzCMAMbE+yM/GNRBzwQZyNLzH52KiPamXAhDzIBDTGn16CavB/QNlDGKiPU1SMINCIKY1WiW9fuhonhpOL5zm3gGHeRCHeTQOc3n9EI1dw6kkzb2DczEP4jAhsusl+rxTw6kkrfYOOMyDOEyI7CXRY7eEU0la7R1wmAdxmBDZS6LH7vhcTLSnDe/AvelcTGu0DW9/isinhtNe0tz7wjbdY7c7WePeVOdoHOaC3T3oDbyGe/Dn++1SQzGPAMU8CMW0rNJRK1als6rxFLiGYuLnufwmFNOyOkn0mBujmIeGYt7p7toRimlZjyR8YvIGXsJ4o8pGlHY65hGwmAexmJbVVPG1q+HBJLiGY0JCcP1oErzhmNgUiWcHSjjtKc3HAxjzIBjzaDAmJHFNMD4gE+1JDhWwmAexmNZovXjzTDsh1HDaS5qPByjmQSgmRPaS+MYbV+EXWfn7994AxDwIxITIRxKmUMiexgdkoj3twvFK8IMwTGu0XrgF+7GQF4znUDQMEz/PdxxhmJb1SHp52O9Tw9lY0jDMIzgg8yAM07I6SfTeO8Yw0Z504QIM8yAM0xqtks6TP86NMUy0p0kKqnDCMK3RThLdcSWcXjitCg8wzMNvsP0+GoZpjzOqL0s4laS5d4BhHoRhQmTtpW0G7+TvuBLuXuG/6yaNw8TvB7ccLUNpHKZp4vF9u3tC8hwah3mnuyKFOEzLKoPJJFGRMuYwD43DvNO9JJoCbxymSaKlAzXcus9dOc2/AxDzoAMyjwZi2vIAehkv4W4mz2nSplECEvMgEhMqn0u34qFCI3xchWskJn6eBziRmJZVRxMk0QAfk5iHRmLe6W40EYlpWZ0kGuBjEvPQSMw73UuiZYSNxNzQS1QMjEnMQyMx73QvicrvRmJuK50r9rFGrBMzA9dIzCMgMQ8iMS3ruXB0rhgkDUEetCc9eQMSkxaZvK3RThI9eUs47SWt/A6OxzyIxITIRxIevXzH3WHw7KkqbSYlOB/zIBgTOpsqHHXqramEU0magwcs5kHnY0JkL4l9YFyBX2zl799TAhTzIBQTIntJ9KAr4ayXNBITP88GTiSmZdURjpMuqJfG52MeGol5pztrovMxLauTRL00JjEPjcS8070kMvBGYoIfos3lrZGRW2ok5hGQmIdfwvy2rNpL+ORDd9yYxER7/5+yM9hxI4eB6Cdt4pmg6cse7P2RHALsffP/2GK3qNawSCF1JkEX2DJNq/VEqVqe7jlLdA78JjFBXxeS9gVcIzGPgsQ8iMR0r5ElENxcLffzMRFPy1JxBiUvFjy4WcAhKR8ueoe5LQJa9S5IzINIzOMmMSGJDzTt52MinpalYv+ESEwPej84biz38zFxQacmqdg/IRLTg96SiuW9b781DPMoMMyD5mO615CE89f5LdA7zN1a0jBMfDz/oBCG6V6LJOp1w7y8Rfv6z0mjMI+CwjyIwnSvRRT1ccO8HD5MmrQtlALDPGhAJlSumuil+B7DRDxphRcY5kEDMj3onSY+87HHMBFPk1TsoGQw/eVBF0n0PzwGZNbs83FylX/exRUY5kEYpgddJNHe1zAv547SYtIqeMFhHjQfEypXTdQN7DlMxNOeXFHBaT6mB4004T8v7VbsOcxD4zAv968NitF8TPdaJHGWthUc8ZQsXe5ZUj6H4l6LpNx/h7mp4KbNx7zcs6RM8rjXIin332FuJUk74FZwmJY3b1/uNSQZTn1wlrb9N+JpD47fX1LrCEmzfLskztJ2AwXxNEl8ihBnu9KZJg96Z4nauDB3Q9UQUNPE9dtoKqYHvTVR0xTm5vZtxNMkcQNOr3Dw5Gb9xpOjv7xhbte3VL7x8dQ0WearIGmWb5fEi2l7CBzxtCxx+TYCMT3o8uByHxfmNktSA46P5ywRiOlei6TcxYW5k6SBmFZMxTQCMd3rkoQhSt+4MA1zK0l6gYmPL7JE5XuCmKckWkt7ENM0EPNyT78oBGK615IlWkv7qZimMZiXe5aU97/da0r6pJlFYW4fnFa+CwbTiMG0yWDiwX3SrZZhbiVp1btgMI0YTIhcspQRiHeYW0la9S4ITCMCEyJXSbmHC3MrSaveBYFpmUF7QeQqibqTPYGJeFL1Pt3z8s4Ijwe9lzfdZhfmNkta9S6mYRoRmDYJzMfH84MGl4W5k6QRmPh4LpU0DdO9IktPBvnC3ErSqndBYBoRmBiaEpI+v/NFm2FuJWnNd0FgGhGYELlIoq24MLeStOa7IDBpk/QFkSEJ5wXokE6Yl8uKv/wFR0DpK1eMwzQiMD3oWEw/PsAUpFdgYW7TpJXvgsA0IjAhcpVEv7t7AhPxtCwVzTcNw/SgS5aohxvmNkta+S4ITKNZmDYJTNwE8cn/5PYEJuJpWSqa73yPANb3LN8/cCEfr6Xtu0vTRmFe7ukXhQhM94oHB0m8lvZ7JxqBaQWBaURgutciidbSnsBEPOnBFQSmEYHpQRdJeVM3zN3yPpHKP96uxMfzjxwRmO41JOFoLB0+CXN3kgl38GhpKjZPCMH0oKHp8Y3eW4S5TZNWvk9iM69v2jyZCOYDgwHz+6i37RFM0xDMyz1LyqcH3Suy9Hzkt3aQdJnxv7NNlFbBCwrTiMK0SWHi/rEH16YwL6e0v/74ahwmBBSLPB8hdK+RKr8UjQrmMHdzlOwkK4UvXlHECcT0oKHpO8Zf5IZgmJfzDylPWhN+gptpSRGJid2lWxNftBnmbj1pJKYVJKYRielekaYHZmXnNO1JTMSTylNBYhqRmB70lpQZrXeY2yxpTXgxEtOIxITIRRK9mgvzY9l7+bqatJmYEMDfOmIx3WvmiSBE5Gm/B67NxMS5hEISlfHJYj5wdQZ34cPcPjqtCy9YTCMW0yaLCUnGZXzPYiKetsCLLpxYTA86H5zlkw54cFuGxzQW83LPlYkq+GQxPUv5WAEk7bfAtZmYuEe7WEu0iTJZTEgquvBhbteSVr8LEJOuXXjZBDFPSdSFD3MnSQMx8fGcJQIx3WuupSdNoQ1zK0mr38VMTCMQ0yaI+cCdJ1wEhrmVpNXvgsI0ojAhcmbpA9eT51+5YW4laU14QWAaDcSEyEUS16U9gYl4Ul0qCEwjAtODxlrClTqcpe0JQsTTJBUvMInA9KC3JG5Phrl9cFr1LghMIwLTJoGJ5f2DXxQMcytJ20MpCEwjAhMi1yzR/949gYl42oMrqjcRmB70fnB5P+Md5jZLWvUuCEwjAtMmgfnAC55iLe33UDQCEx/P1ZsITPeKLEES/aDsCUzTCMzLPXUCRGC61yKJtnWGuZn7bBqBeblnSfn8t3stkmh57wlMjBOSlndBYBoRmB70lsTLe09gIp4mqei9icD0oIukfFYvzN03TgMwrQAwcZFPPhIzAUz/xtEMPA/iiltJWvU+ec28lvI94BC5ZimfiwtzK0mr3ievmSVR7z0BTGSpaE6GuZWkVe+CvzTiL23yl5BU9N7D3EziQTxteRfHTwi/9KCxvIH/UnMyzF2WNPzSCvzSCL90r0USVe89fol4UpZO97SWCL/0oIskqt57/NI0/PJyz5Koek/88gF6jq4a8SC7IqDhl3a6Z0l0/GTily6JrhrxIFtJWvUu8Esj/NImfnlKouq9xy8RT1tLRe+dh1m8PGispafx/7hprk9/mzYJ83LPT47K9+QvHzjhTCiYB7kkd5q0+l3Ql0b0pU368tTE37lozjtNWgEv8Esj/BIq12dHLdM0d5q0Cl7wl7i9I3cDk79EnooflWluNGkAJj6fG3ACMN1rrvHiveo0d5q0Gl7MwjQiMG0SmGeeaD1Nc6dJ20AphmEaDcOEyjVPtJ6mudOk9eAFg2nEYELloom3vqa506SV8QLCNBqHCZWrJirj09xp0up4QWFSoX5B5aopEzO3udOkteHFQEwq1NB0t+HPZz6y+r7NnSatjhccJr0KgKa5i4KzvvzbsucwEU/6CS4mYhpxmB50lCeXxKVgfxJF4zDx8VwxicN0rykJ7wXyVuowd324xmHi5UghiSieyWE+cLSShnR6kF07p3GYVnCY9MLk5V6RJUyepAc3zG2WtBJeUJhGFCZETkkfn9zO7WdhIp60vAsI0wjC9KCRpc9vvJb2ECbiaZKKXRSCMD3oLYnf9O4hTNMgzMs99bwEYbrXIol+U/azME2DMC/3LIna8AlhPvA6nk8QDXO7vLXqXTCYRgymTQbzlER1ac9gIp62loo9cGIwPeh8cN+LurSv3hqDaaf71we33kJzXXDrXrekYnlv98ART8nS5Z4l5ertXoukvLzD3Kylp8ZgXu5ZUoZ43Csk4QLXvNcU5laSVL2fBYP5JAbTvUISzqeypMu8vNO7DqD89d+/v379/ufn759//w8AAP//AAAA//9Ej0kKAkEMRa9S5ABOIChYbnShC0FQcF3asSuolZCOip7eOO/yf4aXP5LMBY12Sw17LjavIvQg2E0wQuEJlwtqQ1ygPR5JqnGRtKbShCPuLUK3NYCgVOdvbSxPdwhhy2Z8+oiMqUKN0Gn1wTlsX/G5ukI7S5AkqCu6O7rjY2Rr3lBl+S9n+GZ5m5WwWDL/LYKwmiYyCNn9uwdJx6nQa9EDeL6fdmL7ynpoMqKNHwAAAP//AwBQSwMEFAAGAAgAAAAhAMKH2/J9BgAA1xsAABMAAAB4bC90aGVtZS90aGVtZTEueG1s7FlLbxs3EL4X6H8g9p7oYUm2jMiBJUtxmzgxbCVFjtSK2mXEXS5Iyo5uRXIsUKBoWvRSoLceirYBEqCX9Ne4TdGmQP5Ch+RKWlp0bCcG+rIOtsT9OO8ZznCvXX+YMHRAhKQ8bQWVq+UAkTTkQ5pGreBuv3dlLUBS4XSIGU9JK5gSGVzfeP+9a3hdxSQhCPanch23glipbL1UkiEsY3mVZySFZyMuEqzgp4hKQ4EPgW7CStVyuVFKME0DlOIEyN4ZjWhIUN+QhKer6AqqlivlYGPGqMuAW6qkXgiZ2NdsiLv7+L7huKLRcio7TKADzFoB8B/ywz55qALEsFTwoBWUzScobVwr4fV8E1Mn7C3s65lPvi/fMBxXDU8RDeZMK71ac3VrTt8AmFrGdbvdTrcyp2cAOAxBaytLkWatt1Zpz2gWQPbrMu1OuV6uufgC/ZUlmZvtdrvezGWxRA3Ifq0t4dfKjdpm1cEbkMXXl/C19man03DwBmTxjSV8b7XZqLl4A4oZTcdLaO3QXi+nPoeMONv2wtcAvlbO4QsURMM80jSLEU/VWeIuwQ+46AFYb2JY0RSpaUZGOIRI7+BkICjWzPA6wYUndimUS0uaL5KhoJlqBR9mGLJmQe/1i+9fv3iGXr94evTo+dGjn44ePz569KOl5WzcxmlU3Pjq28/+/Ppj9Mezb149+cKPl0X8rz988svPn/uBkE0LiV5++fS3509ffvXp79898cA3BR4U4X2aEIluk0O0xxPQzRjGlZwMxPl29GNMnR04Btoe0l0VO8DbU8x8uDZxjXdPQCHxAW9MHjiy7sdioqiH8804cYA7nLM2F14D3NS8ChbuT9LIz1xMirg9jA98vDs4dVzbnWRQTWdB6di+ExNHzF2GU4UjkhKF9DM+JsSj3X1KHbvu0FBwyUcK3aeojanXJH06cAJpsWmbJuCXqU9ncLVjm517qM2ZT+stcuAiISEw8wjfJ8wx4w08UTjxkezjhBUNfgur2Cfk/lSERVxXKvB0RBhH3SGR0rfnjgB9C06/iaF2ed2+w6aJixSKjn00b2HOi8gtPu7EOMm8MtM0LmI/kGMIUYx2ufLBd7ibIfo3+AGnJ7r7HiWOu08vBHdp5Ii0CBD9ZCI8vrxBuJuPUzbCxFQZKO9OpU5o+qayzSjU7cuyPTvHNuEQ8yXP9rFifRLuX1iit/Ak3SWQFctH1GWFvqzQwX++Qp+UyxdflxelGKr0ou82XXhypiZ8RBnbV1NGbknTh0s4jIY9WDTDgpke5wNaFsPXvP13cJHAZg8SXH1EVbwf4wx6+IoZSyOZk44kyriEOdIsmwGYHKNtxlgKbbyZQut6PrFVRGK1w4d2eaU4h87JmKk0MnPvjNGKJnBWZiur78asYqU60WyuahUjmimQjmpzlcGfy6rB4tya0OUg6I3Ayg0Y6LXsMPtgRoba7nZGn7lFs75QF8kYD0nuI633so8qxkmzWJmFkcdHeqY8xUcFbk1N9h24ncVJRXa1E9jNvPcuXpoN0gsv6Rw+lo4sLSYnS9FhK2jWq/UAhThrBSMYm+FrkoHXpW4sMYvgfipUwob9qclswnXhzaY/LCtwK2LtvqSwUwcyIdUWlrENDfMoDwGWmiHfyF+tg1kvSgEb6W8hxcoaBMPfJgXY0XUtGY1IqIrOLqyYOxADyEspnygi9uPhIRqwidjD4H4dqqDPkEq4/TAVQf+AazttbfPILc550hUvywzOrmOWxTgvtzpFZ5ls4SaP5zKYX1ZaIx7o5pXdKHd+VUzKX5AqxTD+n6mizxO4jlgZag+EcJssMNL52gq4UDGHKpTFNOwJuEQztQOiBa5+4TEEFdxpm/+CHOj/NucsDZPWMFWqPRohQeE8UrEgZBfKkom+U4hV8rPLkmQ5IRNRBXFlZsUekAPC+roGNvTZHqAYQt1Uk7wMGNzx+HN/5xk0iHST80/tfGwyn7c90N2BbbHs/jP2IrVC0S8cBU3v2Wd6qnk5eMPBfs6j1lasJY2r9TMftRlcKiH9B84/KkJGTBjrA7XP96C2InivYdsrBFF9xTYeSBdIWx4H0DjZRRtMmpRtWPLu9sLbKLjxzjvdOV/I0rfpdM9p7Hlz5rJzcvHN3ef5jJ1b2LF1sdP1mBqS9niK6vZoNtQYx5g3a8UXXnzwABy9Ba8QJkxJ++rgIVwhwpRhX0hA8lvnmq0bfwEAAP//AwBQSwMEFAAGAAgAAAAhAMj6FPy4AgAA4QYAAA0AAAB4bC9zdHlsZXMueG1spFVtb9owEP4+af/B8vfUSSAMUJKqlEaq1E2T2kn7ahIHrPolcgwLm/bfe04IpGrZuu4LuTv7nnvuxUd82UiBdszUXKsEBxc+RkzluuBqneBvD5k3xai2VBVUaMUSvGc1vkw/fohruxfsfsOYRQCh6gRvrK3mhNT5hklaX+iKKTgptZHUgmrWpK4Mo0XtnKQgoe9PiKRc4Q5hLvO3gEhqHreVl2tZUctXXHC7b7Ewkvn8dq20oSsBVJtgTHPUBBMTosb0QVrriziS50bXurQXgEt0WfKcvaQ7IzNC8xMSIL8PKYiIHz7LvTHvRBoTw3bctQ+ncamVrVGut8omeAREXQnmj0r/UJk7gg4fbqVx/RPtqACLj0kaKypZp18ZToUzEYfWYb7hdkklF/sOIjzrPj0T65x3y6EGElyIY2KhywEMaQwTYJlRGSjoID/sK+i9gmHtSLT3/nJ7beg+CKOBA2kDpvFKmwIeR19SV73OlMaClRaqZPh6475WV/C70tbCAKVxwelaKypcHXuPgwDp5EyIe/eAvpfPsJsSqa3MpL0tEgxP0XWgFyGRg9jhdYrDH6J12ANYV6x/h0VNecQ/5x0Av9dJHb0RrSqxd6PnJq/nCuwGJXhWgGMqyA1kgr+47SFgkA900GrLheXqleQBs2hO5Wyn2rpN0Bb6GAWqWrCSboV9OB4m+CR/ZgXfytnx1le+07aFSPBJvnNdDyYuJdbYuxreCXzR1vAE/7pZfJotb7LQm/qLqTcescibRYulF42vF8tlNvND//r3YB/9xzZq1yc0OBjPawE7yxySPaR4f7IleKB09NuGAO0h91k48a+iwPeykR944wmdetPJKPKyKAiXk/HiJsqiAffonVvLJ0HQ7T9HPppbLpngqu9V36GhFZoE6h+SIH0nyOm/KX0CAAD//wMAUEsDBBQABgAIAAAAIQBz/G5vXwkAAHxRAAAUAAAAeGwvc2hhcmVkU3RyaW5ncy54bWx03MFu3TkVwOE9Eu8QZc/k2j4+51zUdoRGQmIJggeI2jBT0SZDc4uYt6eIBQh9XsZXifJTkusv/tt+8/0/P3+6+8fTl9ePL89v78d3l/u7p+f3Lx8+Pv/49v4vf/79b/r+7vX2+Pzh8dPL89Pb+1+eXu+/f/frX715fb3dffvc59e39z/dbj//9uHh9f1PT58fX797+fnp+dsrf3358vnx9u3DLz8+vP785enxw+tPT0+3z58e5uWSD58fPz7f371/+fp8e3t/vcT93dfnj3//+vTDf0fevXn9+O7N7d2fHt//7e6Hlw9Pbx5u7948/HvwPy/84fb0mS/87v3t6+Onuz9+fXy+fbz98v+f9+8vODQ4Nbg0GBrcGkwNlgZbg1d+8xeOsmkwarBqMGuwazBssGwwbbBtsm3658W2ybbJtsm2ybbJtsm2ybbFtsW25V9Gti22LbYtti22LbYttgXbgm3BtvBfGtuCbcG2YFuwLdi22bbZttm22bb9NsK2zbbNts22zbZkW7It2ZZsS7al3yPZlmxLtiXbim3FtmJbsa3YVmwrTwBsK7YV25ptzbZmW7Ot2dZsa7a1Zze2NduubLuy7cq2K9uubLuy7cq2K9uunroPc7cn74tn74un74vn74sn8Itn8Iun8Ivn8Isn8Ysrx4Eorjwg5aCUA1MOTjlA5SCVA1VslWGsDGtlTP8s7ZVhsAyLZZgsw2YZRsuwWobZMuyWYbiM5d9Y02XYLsN4GdbLMF+G/TIMmGHBDBNm2DAj/HdpxQwzZtgxw5AZlswwZYYtM4yZYc0Mc2Zsv/sYNMOiGSbNsGmGUTOsmmHWDLtmGDbDshnp91jbZhg3w7oZ5s2wb4aBMyycYeIMG2cYOaM8k5g5w84Zhs6wdIapM2ydYewMa2eYO8PeGe350uIZJs+weYbRM6yeYfYMu2cYPsPyGabPuB7+t/c/97bPtH2m7TNtn2n7TNtn2j7T9pm2z7R95vAahu0zbZ9p+0zbZ9o+0/aZts88rNMcFmpOKzVeqjms1RwWaw6rNYflmsN6zWHBxvaZts+0fabtM22faftM22faPtP2mbbPtH2m7TNtn2n7TNtn2j7T9pm2z7R9pu0zbZ9p+0zbZ9o+0/aZts+0fabtM22faftM22faPtP2mbbPtH2m7TNtn2n7TNtn2j7T9pm2z7R9pu0zbZ9p+0zbZ9o+0/aZts+0fabtM22faftM22faPtP2mbbPtH2m7TNtn2n7TNtn2j7T9pm2z7R9pu0zbZ9p+0zbZ128+G/7LNtn2T7L9lm2z7J9lu2zbJ9l+yzbZ9k+y/ZZts+yfZbts2yfZfss22fZPsv2WbbP8rrPsn2W7bNsn2X7LNtn2T7r8LTq8Ljq8Lzq9MDKT6wOj6wOz6wOD60OT60Oj61sn2X7LNtn2T7L9lm2z7J9lu2zbJ9l+yzbZ9k+y/ZZts+yfZbts2yfZfss22fZPsv2WbbPsn2W7bNsn2X7LNtn2T7L9lm2z7J9lu2zbJ9l+yzbZ9k+y/ZZts+yfZbts2yfZfss22fZPsv2WbbPsn2W7bNsn2X7LNtn2T7L9lm2z7J9lu2zbJ9l+yzbZ9k+y/YJ2ydsn7B9wvYJ2ydsn7B9wvYJ2ydsn7B9wvYJ2ydsn7B9wvYJ2ydsn7B9wvYJ2ydsn7B9wvYJ2ydsn7B9wvYJ2ydsn7B9wvYJ2ye87hO2T9g+YfuE7RO2Txz27Bw27Rx27Ry27Zz27XjjzmHnzmHrzmHvzmHzju0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPmH7hO0Ttk/YPtv22bbPtn227bNtn237bNtn2z7b9tm2z7Z9tu2zbZ9t+2zbZ9s+2/bZts+2fbbts22fbfts22fbPtv22bbPtn227bNtn237bNtn2z7b9tm2z7Z9tu2zbZ9t+2zbZ9s+2/bZts+2fbbts73us22fbfts22fbPvuwc/mwdfmwd/mwefmwe/m0fdn7lw8bmA87mA9bmG2fbfts22fbPtv22bbPtn227bNtn237bNtn2z7b9tm2z7Z9tu2zbZ9t+2zbZ9s+2/bZts+2fbbts22fbfts22fbPtv22bbPtn227bNtn237bNtn2z7b9tm2z7Z9tu2zbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2SdsnbZ+0fdL2Sdsnve6Ttk/aPmn75OH81uEA1+EE1+EI1+EM1+EQ1+kUl49xHc5xHQ5y2T5p+6Ttk7ZP2j5p+6Ttk7ZP2j5p+6Ttk7ZP2j5p+6Ttk7ZP2j5p+6Ttk7ZP2j5p+6Ttk7ZP2j5p+6Ttk7ZP2j5p+6TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T5l+5TtU7ZP2T7ldZ+yfcr2qcMp9sMx9sM59sNB9sNJ9sNR9sNZ9tNhdp9mPxxnt33K9inbp2yfsn3K9inbp2yfsn3K9inbp2yfsn3K9inbp2yfsn3K9inbp2yfsn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mnbp22ftn3a9mmv+7Tt04e7fA6X+Rxu8zlc53O4z+dwoc/hRp/DlT6nO318qY/t07ZP2z5t+7Tt07ZP2z5t+7Tt07ZP2z5X2+f6v/Z5+HZ74rt/AQAA//8DAFBLAwQUAAYACAAAACEAs7smCT0BAABRAgAAEQAIAWRvY1Byb3BzL2NvcmUueG1sIKIEASigAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjJJRS8MwFIXfBf9DyXubZJW5hbYDlT05EJwovoXkris2aUii3f69abvVDvbg473n5LvnXpKtDqqOfsC6qtE5oglBEWjRyEqXOXrbruMFipznWvK60ZCjIzi0Km5vMmGYaCy82MaA9RW4KJC0Y8LkaO+9YRg7sQfFXRIcOoi7xiruQ2lLbLj44iXgGSFzrMBzyT3HHTA2IxGdkFKMSPNt6x4gBYYaFGjvME0o/vN6sMpdfdArE6eq/NGEnU5xp2wpBnF0H1w1Gtu2Tdq0jxHyU/yxeX7tV40r3d1KACoyKZiwwH1jiwxPi3C4mju/CTfeVSAfjkG/0pOijztAQEYhABvinpX39PFpu0bFjMzSmJKYLrbknqVLdkc/u5EX77tAQ0OdBv+HuOyIdM7IYkI8A4bcl5+g+AUAAP//AwBQSwMEFAAGAAgAAAAhACkP9cZ9AQAA/gIAABAACAFkb2NQcm9wcy9hcHAueG1sIKIEASigAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnJLLTsMwEEX3SPxD5D11CgihyjFCPMQCRKUWWBtn0li4duQZopavZ5KIkgIrdvO4uj6+trrYrH3WQkIXQyGmk1xkEGwsXVgV4ml5e3QuMiQTSuNjgEJsAcWFPjxQ8xQbSOQAM7YIWIiaqJlJibaGtcEJrwNvqpjWhrhNKxmrylm4jvZ9DYHkcZ6fSdgQhBLKo2ZnKAbHWUv/NS2j7fjwebltGFiry6bxzhriW+oHZ1PEWFF2s7HglRwvFdMtwL4nR1udKzlu1cIaD1dsrCvjEZT8Hqg7MF1oc+MSatXSrAVLMWXoPji2Y5G9GoQOpxCtSc4EYqxONjR97RukpF9iesMagFBJFgzDvhxrx7U71dNewMW+sDMYQHixj7h05AEfq7lJ9AfxdEzcMwy8A86i4xvOHPP1V+aTfnjfu/CGT80yXhuCr+z2h2pRmwQlx73LdjdQdxxb8p3JVW3CCsovze9F99LPw3fW07NJfpLzI45mSn5/XP0JAAD//wMAUEsBAi0AFAAGAAgAAAAhAGLunWheAQAAkAQAABMAAAAAAAAAAAAAAAAAAAAAAFtDb250ZW50X1R5cGVzXS54bWxQSwECLQAUAAYACAAAACEAtVUwI/QAAABMAgAACwAAAAAAAAAAAAAAAACXAwAAX3JlbHMvLnJlbHNQSwECLQAUAAYACAAAACEACZcqU4oCAACXBQAADwAAAAAAAAAAAAAAAAC8BgAAeGwvd29ya2Jvb2sueG1sUEsBAi0AFAAGAAgAAAAhAIE+lJfzAAAAugIAABoAAAAAAAAAAAAAAAAAcwkAAHhsL19yZWxzL3dvcmtib29rLnhtbC5yZWxzUEsBAi0AFAAGAAgAAAAhAM9xSMMCSwAA4QoCABgAAAAAAAAAAAAAAAAApgsAAHhsL3dvcmtzaGVldHMvc2hlZXQxLnhtbFBLAQItABQABgAIAAAAIQDCh9vyfQYAANcbAAATAAAAAAAAAAAAAAAAAN5WAAB4bC90aGVtZS90aGVtZTEueG1sUEsBAi0AFAAGAAgAAAAhAMj6FPy4AgAA4QYAAA0AAAAAAAAAAAAAAAAAjF0AAHhsL3N0eWxlcy54bWxQSwECLQAUAAYACAAAACEAc/xub18JAAB8UQAAFAAAAAAAAAAAAAAAAABvYAAAeGwvc2hhcmVkU3RyaW5ncy54bWxQSwECLQAUAAYACAAAACEAs7smCT0BAABRAgAAEQAAAAAAAAAAAAAAAAAAagAAZG9jUHJvcHMvY29yZS54bWxQSwECLQAUAAYACAAAACEAKQ/1xn0BAAD+AgAAEAAAAAAAAAAAAAAAAAB0bAAAZG9jUHJvcHMvYXBwLnhtbFBLBQYAAAAACgAKAIACAAAnbwAAAAA=&quot;,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: true,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 2,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;PDT Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 2&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;Bulk Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 3&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;PDT Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;Bulk Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 2&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: true&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;0.00&quot;,&#xd;
        &quot;CountQty&quot;: &quot;0&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;0.00&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;0&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;0.00&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: true,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot; - &quot;,&#xd;
          &quot;BranchName&quot;: &quot;${HEAD1_BranchName}&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;${HEAD1_CompanyName}&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;${HEAD1_OperatingUnitName}&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;${HEAD1_StatusCode}&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;${HEAD1_StatusMeaning}&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;${HEAD1_SubIOName}&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;${HEAD1_SourceOrgId}&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;${HEAD1_SubIOId}&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${HEAD1_PhysicalInventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${HEAD1_StartDate}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${HEAD1_EndDate}&quot;,&#xd;
          &quot;Status&quot;: &quot;151&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
          &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
          &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: true,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionGenerateExceptionReport" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;WvxwVwq4jvLfLr8CCdW8Nw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
    &quot;InSystemButNoItemCounted&quot;: true,&#xd;
    &quot;ItemsTaggedToSubIO&quot;: true,&#xd;
    &quot;ItemsNotTaggedToSubIO&quot;: true,&#xd;
    &quot;InventoryBalanceReport&quot;: true,&#xd;
    &quot;VarianceReport&quot;: true,&#xd;
    &quot;isSaveReport&quot;: true&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionGenerateExceptionReport</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountDetails_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JKBdzG1ItUPMslHwHI05_A&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_1}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 1,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_1}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_1}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_1&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_1&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_2}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 2,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_2}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_2}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_2&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_2&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_3}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 3,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_3}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_3&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_3&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_4}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 4,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_4}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_4}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_4&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_4&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_5}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 5,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_5}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_5}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_5&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_5&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;PCountActionId&quot;: 9,&#xd;
    &quot;AdjustmentAccount&quot;: &quot;0&quot;,&#xd;
    &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
    &quot;isSelectAll&quot;: false,&#xd;
    &quot;LineItemsCount&quot;: 901&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionPhysicalCountDetails_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-FULFILLER" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Ace_Fulfiller&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Ace_Fulfillertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: false&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;&quot;,&#xd;
        &quot;CountQty&quot;: &quot;&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot;&quot;,&#xd;
          &quot;BranchName&quot;: &quot;&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;0&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;Status&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: false,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: false,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get BranchName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_BranchName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;BranchName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CompanyName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CompanyName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CompanyName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OperatingUnitName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_OperatingUnitName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;OperatingUnitName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusMeaning" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusMeaning</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusMeaning&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PhysicalInventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_PhysicalInventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PhysicalInventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StartDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StartDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get EndDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_EndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountAmt&quot;:&quot;(\S+)&quot;,&quot;TotalVarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemAmt&quot;:&quot;(\S+)&quot;,&quot;TotalCountQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceAmt&quot;:&quot;(\S+)&quot;,&quot;Remarks&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategory" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCategory</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategory&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCode&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemDesc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemDesc</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemDesc&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UOM" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UOM</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UOM&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitCost" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UnitCost</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitCost&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(\S+)&quot;,&quot;SystemQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(\S+)&quot;,&quot;VarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNumber&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Count</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Count&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNo&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: true&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
        &quot;CountQty&quot;: &quot;${HEAD1_TotalCountQty}&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;${HEAD1_TotalSystemQty}&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;${HEAD1_TotalVarianceQty}&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;LineItemStructure&quot;: {&#xd;
                &quot;ItemCategory&quot;: &quot;${HEAD1_ItemCategory}&quot;,&#xd;
                &quot;ItemCode&quot;: &quot;${HEAD1_ItemCode}&quot;,&#xd;
                &quot;ItemDesc&quot;: &quot;${HEAD1_ItemDesc}&quot;,&#xd;
                &quot;UOM&quot;: &quot;${HEAD1_UOM}&quot;,&#xd;
                &quot;UnitCost&quot;: &quot;${HEAD1_UnitCost}&quot;,&#xd;
                &quot;ComputeAverageCost&quot;: false,&#xd;
                &quot;CountQty&quot;: &quot;${HEAD1_CountQty_1}&quot;,&#xd;
                &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
                &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
                &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
                &quot;VarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarianceQty&apos;),)},&#xd;
                &quot;VarianceAmt&quot;: &quot;${HEAD1_VarianceAmt}&quot;,&#xd;
                &quot;Edited&quot;: false,&#xd;
                &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
              },&#xd;
              &quot;isCountValid&quot;: true,&#xd;
              &quot;IsItemTaggedToSubIO&quot;: true,&#xd;
              &quot;isRackValid&quot;: true,&#xd;
              &quot;PCountDetails&quot;: {&#xd;
                &quot;Id&quot;: &quot;${HEAD1_Id_1}&quot;,&#xd;
                &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
                &quot;Selected&quot;: false,&#xd;
                &quot;SequenceNumber&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNumber&apos;),)},&#xd;
                &quot;RackNumber&quot;: &quot;${HEAD1_RackNumber_1}&quot;,&#xd;
                &quot;ItemId&quot;: &quot;${HEAD1_ItemId_1}&quot;,&#xd;
                &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQuantity_1&apos;),)},&#xd;
                &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQuantity_1&apos;),)},&#xd;
                &quot;Remarks&quot;: &quot;&quot;,&#xd;
                &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
                &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
                &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
                &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;${HEAD1_Count}&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot; - &quot;,&#xd;
          &quot;BranchName&quot;: &quot;${HEAD1_BranchName}&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;${HEAD1_CompanyName}&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;${HEAD1_OperatingUnitName}&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;${HEAD1_StatusCode}&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;${HEAD1_StatusMeaning}&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;${HEAD1_SubIOName}&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;${HEAD1_SourceOrgId}&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;${HEAD1_SubIOId}&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${HEAD1_PhysicalInventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${HEAD1_StartDate}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${HEAD1_EndDate}&quot;,&#xd;
          &quot;Status&quot;: &quot;${HEAD1_Status}&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalSystemQty&apos;),)},&#xd;
          &quot;TotalSystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
          &quot;TotalCountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalCountQty&apos;),)},&#xd;
          &quot;TotalCountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalVarianceQty&apos;),)},&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_2&apos;),)},&#xd;
          &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_2}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_2&apos;),)},&#xd;
          &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_2}&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: true,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
              &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
              &quot;VarAmt&quot;: &quot;${HEAD1_VarAmt_1}&quot;,&#xd;
              &quot;CountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQty_1&apos;),)},&#xd;
              &quot;SequenceNo&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNo_1&apos;),)},&#xd;
              &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
              &quot;VarQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarQty_1&apos;),)}&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountDetails_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JKBdzG1ItUPMslHwHI05_A&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_1}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 1,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_1}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_1}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_1&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_1&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_2}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 2,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_2}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_2}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_2&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_2&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_3}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 3,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_3}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_3&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_3&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_4}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 4,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_4}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_4}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_4&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_4&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_5}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 5,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_5}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_5}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_5&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_5&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;PCountActionId&quot;: 1,&#xd;
    &quot;AdjustmentAccount&quot;: &quot;0&quot;,&#xd;
    &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
    &quot;isSelectAll&quot;: false,&#xd;
    &quot;LineItemsCount&quot;: 901&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionPhysicalCountDetails_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-ACCOUNTING_FINALIZE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Ace_Accounting&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Ace_Accountingtest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: false&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;&quot;,&#xd;
        &quot;CountQty&quot;: &quot;&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot;&quot;,&#xd;
          &quot;BranchName&quot;: &quot;&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;0&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;Status&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: false,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: false,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get BranchName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_BranchName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;BranchName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CompanyName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CompanyName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CompanyName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OperatingUnitName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_OperatingUnitName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;OperatingUnitName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusMeaning" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusMeaning</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusMeaning&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PhysicalInventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_PhysicalInventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PhysicalInventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StartDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StartDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get EndDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_EndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountAmt&quot;:&quot;(\S+)&quot;,&quot;TotalVarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemAmt&quot;:&quot;(\S+)&quot;,&quot;TotalCountQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceAmt&quot;:&quot;(\S+)&quot;,&quot;Remarks&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategory" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCategory</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategory&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCode&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemDesc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemDesc</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemDesc&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UOM" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UOM</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UOM&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitCost" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UnitCost</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitCost&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(\S+)&quot;,&quot;SystemQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(\S+)&quot;,&quot;VarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNumber&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Count</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Count&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNo&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: true&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
        &quot;CountQty&quot;: &quot;${HEAD1_TotalCountQty}&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;${HEAD1_TotalSystemQty}&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;${HEAD1_TotalVarianceQty}&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;LineItemStructure&quot;: {&#xd;
                &quot;ItemCategory&quot;: &quot;${HEAD1_ItemCategory}&quot;,&#xd;
                &quot;ItemCode&quot;: &quot;${HEAD1_ItemCode}&quot;,&#xd;
                &quot;ItemDesc&quot;: &quot;${HEAD1_ItemDesc}&quot;,&#xd;
                &quot;UOM&quot;: &quot;${HEAD1_UOM}&quot;,&#xd;
                &quot;UnitCost&quot;: &quot;${HEAD1_UnitCost}&quot;,&#xd;
                &quot;ComputeAverageCost&quot;: false,&#xd;
                &quot;CountQty&quot;: &quot;${HEAD1_CountQty_1}&quot;,&#xd;
                &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
                &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
                &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
                &quot;VarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarianceQty&apos;),)},&#xd;
                &quot;VarianceAmt&quot;: &quot;${HEAD1_VarianceAmt}&quot;,&#xd;
                &quot;Edited&quot;: false,&#xd;
                &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
              },&#xd;
              &quot;isCountValid&quot;: true,&#xd;
              &quot;IsItemTaggedToSubIO&quot;: true,&#xd;
              &quot;isRackValid&quot;: true,&#xd;
              &quot;PCountDetails&quot;: {&#xd;
                &quot;Id&quot;: &quot;${HEAD1_Id_1}&quot;,&#xd;
                &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
                &quot;Selected&quot;: false,&#xd;
                &quot;SequenceNumber&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNumber&apos;),)},&#xd;
                &quot;RackNumber&quot;: &quot;${HEAD1_RackNumber_1}&quot;,&#xd;
                &quot;ItemId&quot;: &quot;${HEAD1_ItemId_1}&quot;,&#xd;
                &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQuantity_1&apos;),)},&#xd;
                &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQuantity_1&apos;),)},&#xd;
                &quot;Remarks&quot;: &quot;&quot;,&#xd;
                &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
                &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
                &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
                &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;${HEAD1_Count}&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot; - &quot;,&#xd;
          &quot;BranchName&quot;: &quot;${HEAD1_BranchName}&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;${HEAD1_CompanyName}&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;${HEAD1_OperatingUnitName}&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;${HEAD1_StatusCode}&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;${HEAD1_StatusMeaning}&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;${HEAD1_SubIOName}&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;${HEAD1_SourceOrgId}&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;${HEAD1_SubIOId}&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${HEAD1_PhysicalInventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${HEAD1_StartDate}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${HEAD1_EndDate}&quot;,&#xd;
          &quot;Status&quot;: &quot;${HEAD1_Status}&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalSystemQty&apos;),)},&#xd;
          &quot;TotalSystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
          &quot;TotalCountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalCountQty&apos;),)},&#xd;
          &quot;TotalCountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalVarianceQty&apos;),)},&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_2&apos;),)},&#xd;
          &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_2}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_2&apos;),)},&#xd;
          &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_2}&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: true,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
              &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
              &quot;VarAmt&quot;: &quot;${HEAD1_VarAmt_1}&quot;,&#xd;
              &quot;CountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQty_1&apos;),)},&#xd;
              &quot;SequenceNo&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNo_1&apos;),)},&#xd;
              &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
              &quot;VarQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarQty_1&apos;),)}&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountDetails_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JKBdzG1ItUPMslHwHI05_A&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_1}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 1,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_1}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_1}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_1&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_1&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_2}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 2,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_2}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_2}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_2&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_2&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_3}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 3,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_3}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_3&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_3&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_4}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 4,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_4}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_4}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_4&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_4&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_5}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 5,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_5}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_5}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_5&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_5&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;PCountActionId&quot;: 3,&#xd;
    &quot;AdjustmentAccount&quot;: &quot;0&quot;,&#xd;
    &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
    &quot;isSelectAll&quot;: true,&#xd;
    &quot;LineItemsCount&quot;: 901&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionPhysicalCountDetails_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-APPROVER" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Ace_Approver&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Ace_Approvertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPCount_MultiApprove" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;9NtrWz+XdR_FJttzfjfMBQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountSetupList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        &quot;${PSETUP_PCountSetupId_1}&quot;&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountWorkList_Approver/ActionPCount_MultiApprove</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-ACCOUNTING_POST" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Ace_Accounting&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Ace_Accountingtest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;PDT Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 2&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;Bulk Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 3&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;PDT Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;Bulk Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 2&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: false&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;&quot;,&#xd;
        &quot;CountQty&quot;: &quot;&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: true,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot;&quot;,&#xd;
          &quot;BranchName&quot;: &quot;&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;0&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;Status&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: false,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: false,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get BranchName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_BranchName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;BranchName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CompanyName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CompanyName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CompanyName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OperatingUnitName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_OperatingUnitName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;OperatingUnitName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusMeaning" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusMeaning</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusMeaning&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PhysicalInventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_PhysicalInventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PhysicalInventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StartDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StartDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get EndDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_EndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountAmt&quot;:&quot;(\S+)&quot;,&quot;TotalVarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemAmt&quot;:&quot;(\S+)&quot;,&quot;TotalCountQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceAmt&quot;:&quot;(\S+)&quot;,&quot;Remarks&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategory" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCategory</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategory&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCode&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemDesc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemDesc</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemDesc&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UOM" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UOM</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UOM&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitCost" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UnitCost</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitCost&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(\S+)&quot;,&quot;SystemQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(\S+)&quot;,&quot;VarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNumber&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Count</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Count&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNo&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: true&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
        &quot;CountQty&quot;: &quot;${HEAD1_TotalCountQty}&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;${HEAD1_TotalSystemQty}&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;${HEAD1_TotalVarianceQty}&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;LineItemStructure&quot;: {&#xd;
                &quot;ItemCategory&quot;: &quot;${HEAD1_ItemCategory}&quot;,&#xd;
                &quot;ItemCode&quot;: &quot;${HEAD1_ItemCode}&quot;,&#xd;
                &quot;ItemDesc&quot;: &quot;${HEAD1_ItemDesc}&quot;,&#xd;
                &quot;UOM&quot;: &quot;${HEAD1_UOM}&quot;,&#xd;
                &quot;UnitCost&quot;: &quot;${HEAD1_UnitCost}&quot;,&#xd;
                &quot;ComputeAverageCost&quot;: false,&#xd;
                &quot;CountQty&quot;: &quot;${HEAD1_CountQty_1}&quot;,&#xd;
                &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
                &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
                &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
                &quot;VarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarianceQty&apos;),)},&#xd;
                &quot;VarianceAmt&quot;: &quot;${HEAD1_VarianceAmt}&quot;,&#xd;
                &quot;Edited&quot;: false,&#xd;
                &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
              },&#xd;
              &quot;isCountValid&quot;: true,&#xd;
              &quot;IsItemTaggedToSubIO&quot;: true,&#xd;
              &quot;isRackValid&quot;: true,&#xd;
              &quot;PCountDetails&quot;: {&#xd;
                &quot;Id&quot;: &quot;${HEAD1_Id_1}&quot;,&#xd;
                &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
                &quot;Selected&quot;: false,&#xd;
                &quot;SequenceNumber&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNumber&apos;),)},&#xd;
                &quot;RackNumber&quot;: &quot;${HEAD1_RackNumber_1}&quot;,&#xd;
                &quot;ItemId&quot;: &quot;${HEAD1_ItemId_1}&quot;,&#xd;
                &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQuantity_1&apos;),)},&#xd;
                &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQuantity_1&apos;),)},&#xd;
                &quot;Remarks&quot;: &quot;&quot;,&#xd;
                &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
                &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
                &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
                &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;${HEAD1_Count}&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot; - &quot;,&#xd;
          &quot;BranchName&quot;: &quot;${HEAD1_BranchName}&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;${HEAD1_CompanyName}&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;${HEAD1_OperatingUnitName}&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;${HEAD1_StatusCode}&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;${HEAD1_StatusMeaning}&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;${HEAD1_SubIOName}&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;${HEAD1_SourceOrgId}&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;${HEAD1_SubIOId}&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${HEAD1_PhysicalInventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${HEAD1_StartDate}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${HEAD1_EndDate}&quot;,&#xd;
          &quot;Status&quot;: &quot;${HEAD1_Status}&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalSystemQty&apos;),)},&#xd;
          &quot;TotalSystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
          &quot;TotalCountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalCountQty&apos;),)},&#xd;
          &quot;TotalCountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalVarianceQty&apos;),)},&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_2&apos;),)},&#xd;
          &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_2}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_2&apos;),)},&#xd;
          &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_2}&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: true,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
              &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
              &quot;VarAmt&quot;: &quot;${HEAD1_VarAmt_1}&quot;,&#xd;
              &quot;CountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQty_1&apos;),)},&#xd;
              &quot;SequenceNo&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNo_1&apos;),)},&#xd;
              &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
              &quot;VarQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarQty_1&apos;),)}&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountDetails_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JKBdzG1ItUPMslHwHI05_A&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_1}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 1,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_1}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_1}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_1&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_1&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_2}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 2,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_2}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_2}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_2&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_2&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_3}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 3,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_3}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_3&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_3&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_4}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 4,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_4}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_4}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_4&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_4&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_5}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 5,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_5}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_5}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_5&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_5&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;PCountActionId&quot;: 10,&#xd;
    &quot;AdjustmentAccount&quot;: &quot;131&quot;,&#xd;
    &quot;AdjustmentDate&quot;: &quot;${datetoday}&quot;,&#xd;
    &quot;isSelectAll&quot;: false,&#xd;
    &quot;LineItemsCount&quot;: 901&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionPhysicalCountDetails_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PCOUNT_PDT-UPLOAD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">120</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_SETUP" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Mnl_Accounting&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Mnl_Accountingtest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountSetupList" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountSetupList</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetInventoryName" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;KST3krH0lv0S6u992Gnx4g&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;Countdown&quot;: {&#xd;
        &quot;Days&quot;: &quot;00&quot;,&#xd;
        &quot;Ended&quot;: &quot;&quot;,&#xd;
        &quot;Hour&quot;: &quot;00&quot;,&#xd;
        &quot;Minutes&quot;: &quot;00&quot;,&#xd;
        &quot;TimeOutId&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;Date_Variables&quot;: {&#xd;
        &quot;EndDateTime&quot;: &quot;&quot;,&#xd;
        &quot;StartDateTime&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;InventoryOrgId&quot;: &quot;3&quot;,&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;PCountSetup&quot;: {&#xd;
        &quot;Id&quot;: &quot;0&quot;,&#xd;
        &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
        &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
        &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;Status&quot;: &quot;0&quot;,&#xd;
        &quot;SubIOValidated&quot;: false,&#xd;
        &quot;CountedBy&quot;: 0,&#xd;
        &quot;VerifiedBy&quot;: 0,&#xd;
        &quot;Frozen&quot;: false,&#xd;
        &quot;TotalSystemQty&quot;: 0,&#xd;
        &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
        &quot;TotalCountQty&quot;: 0,&#xd;
        &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
        &quot;TotalVarianceQty&quot;: 0,&#xd;
        &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
        &quot;Remarks&quot;: &quot;&quot;,&#xd;
        &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
        &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
        &quot;CreatedBy&quot;: 0,&#xd;
        &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
        &quot;UpdatedBy&quot;: 0,&#xd;
        &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
      },&#xd;
      &quot;Popup_Var&quot;: {&#xd;
        &quot;showLogs&quot;: false,&#xd;
        &quot;showWorkflow&quot;: false&#xd;
      },&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountSetupDetails_Wb/DataActionGetInventoryName</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get InventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PSETUP_InventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;InventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountSetup_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;KiDE1iDpbuoKCwTMGVBKuQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountSetupList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${PSETUP_InventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;3&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${start_datetime}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${end_datetime}&quot;,&#xd;
          &quot;Status&quot;: &quot;151&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountSetupDetails_Wb/ActionPhysicalCountSetup_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetPCountSetup" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JAVET+UpbP_s6tyNh7KaZQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;SelectedPCountSetupId&quot;: &quot;0&quot;,&#xd;
      &quot;ShowDetailsPopup&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;PCOUNTLIST.[CreatedOn] DESC&quot;,&#xd;
      &quot;GetRole&quot;: {&#xd;
        &quot;HasAccountingRole&quot;: false,&#xd;
        &quot;HasAdministratorRole&quot;: false,&#xd;
        &quot;HasPCountApproverRole&quot;: false,&#xd;
        &quot;HasFullfillerRole&quot;: false,&#xd;
        &quot;HasSystemRole&quot;: false,&#xd;
        &quot;HasDOMRole&quot;: false,&#xd;
        &quot;isDevelopmentMode&quot;: false,&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PhysicalCountSetupList/DataActionGetPCountSetup</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PCountSetupId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PSETUP_PCountSetupId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PCountSetupId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-ACCOUNTING_UPLOAD" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Mnl_Accounting&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Mnl_Accountingtest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;PDT Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 2&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;Bulk Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 3&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;PDT Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;Bulk Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 2&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: false&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;&quot;,&#xd;
        &quot;CountQty&quot;: &quot;&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: true,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot;&quot;,&#xd;
          &quot;BranchName&quot;: &quot;&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;0&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;Status&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: false,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: false,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get BranchName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_BranchName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;BranchName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CompanyName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CompanyName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CompanyName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OperatingUnitName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_OperatingUnitName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;OperatingUnitName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusMeaning" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusMeaning</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusMeaning&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PhysicalInventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_PhysicalInventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PhysicalInventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StartDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StartDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get EndDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_EndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionBatchLoad_PCountPDT_Initiate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;URbWyCfD4wmKswaem201BQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;FileName&quot;: &quot;MMSM Manila BFAS - PDT upload.txt&quot;,&#xd;
    &quot;SourceBinary&quot;: &quot;&quot;,&#xd;
    &quot;ManualExecute&quot;: true,&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionBatchLoad_PCountPDT_Initiate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;MMSM Manila BFAS - PDT upload.txt&quot;,&#xd;
        &quot;UploadFile&quot;: &quot;OTksUmFjazEsMjA5OTEwMDAwOTk5LDEwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syLDIwOTkxMDAwMTA2OSwxMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMywyMDk5MTAwMDEwNzAsMzAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNCwyMDk5MTAwMDEwODUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1LDIwOTkxMDAwMTEwOSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYsMjA5OTEwMDAxNTkwLDUsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNywyMDk5MTAwMDE1OTEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4LDIwOTkxMDAwMTU5NywxNjYsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOSwyMDk5MTAwMDE2MTUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMCwyMDk5MTAwMDE2MjAsNywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMSwyMDk5MTAwMDE3MzcsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMiwyMDk5MTAwMDE3NDMsMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMywyMDk5MTAwMDE3NDYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNCwyMDk5MTAwMDE4NzQsNiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNSwyMDk5MTAwMDE4ODAsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNiwyMDk5MTAwMDE4ODEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNywyMDk5MTAwMDE5MTYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxOCwyMDk5MTAwMDE5MTksNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxOSwyMDk5MTAwMDE5MzMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMCwyMDk5MTAwMDE5OTYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMSwyMDk5MTAwMDIwNjQsMjAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjIsMjA5OTEwMDAyMTE0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjMsMjA5OTEwMDAyMTE1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjQsMjA5OTEwMDAyMTIzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjUsMjA5OTEwMDAyMTk0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjYsMjA5OTEwMDAyMTk1LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjcsMjA5OTEwMDAyMjAyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjgsMjA5OTEwMDAyMjAzLDEzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI5LDIwOTkxMDAwMjMwOCwzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMwLDIwOTkxMDAwMjMwOSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMxLDIwOTkxMDAwMjQ5OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMyLDIwOTkxMDAwMjQ5OSw0MSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMywyMDk5MTAwMDI1MDAsMTI1LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM0LDIwOTkxMDAwMjYyNSw2LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM1LDIwOTkxMDAwMjY0OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM2LDIwOTkxMDAwMjY1MCwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM3LDIwOTkxMDAwMjY1MSwzMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szOCwyMDk5MTAwMDI2NzksMTAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzksMjA5OTEwMDAyNjgyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDAsMjA5OTEwMDAyOTQzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDEsMjA5OTEwMDAzMDAzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDIsMjA5OTEwMDAzMDA2LDQwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQzLDIwOTkxMDAwMzAxNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ0LDIwOTkxMDAwMzM4OSwzMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDUsMjA5OTEwMDAzNTMwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDYsMjA5OTEwMDAzODA2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDcsMjA5OTEwMDAzODY1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDgsMjA5OTEwMDAzODg1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDksMjA5OTEwMDAzODg4LDI2OCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MCwyMDk5MTAwMDM4OTAsNSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MSwyMDk5MTAwMDM4OTksMTksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTIsMjA5OTEwMDA0MjUyLDksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTMsMjA5OTEwMDA0MjU4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTQsMjA5OTEwMDA0NDI5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTUsMjA5OTEwMDA0NDMyLDUsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTYsMjA5OTEwMDA0NDQyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTcsMjA5OTEwMDA0NDQzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTgsMjA5OTEwMDA0NDQ1LDYyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU5LDIwOTkxMDAwNDU3OSwzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYwLDIwOTkxMDAwNDgzMSwxMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MSwyMDk5MTAwMDQ4MzIsNSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MiwyMDk5MTAwMDQ4NjIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MywyMDk5MTAwMDQ5OTUsMTksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjQsMjA5OTEwMDA1MDg5LDEyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY1LDIwOTkxMDAwNTIxMywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY2LDIwOTkxMDAwNTIyMiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY3LDIwOTkxMDAwNTIyNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY4LDIwOTkxMDAwNTIzNSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY5LDIwOTkxMDAwNTI2MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcwLDIwOTkxMDAwNTI5NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcxLDIwOTkxMDAwNTYwMSwzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcyLDIwOTkxMDAwNTc0NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazczLDIwOTkxMDAwNjA2NSw3LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc0LDIwOTkxMDAwNjA3NiwyNiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NSwyMDk5MTAwMDYwNzcsNTAwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc2LDIwOTkxMDAwNjA5Miw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc3LDIwOTkxMDAwNjA5NSw2LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc4LDIwOTkxMDAwNjExOCwyNSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3OSwyMDk5MTAwMDYxMjgsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MCwyMDk5MTAwMDYxMzEsMzIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODEsMjA5OTEwMDA2MTU0LDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODIsMjA5OTEwMDA2MTY5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODMsMjA5OTEwMDA2MTcxLDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODQsMjA5OTEwMDA2MTc4LDUwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NSwyMDk5MTAwMDYxODQsNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NiwyMDk5MTAwMDYyMDksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NywyMDk5MTAwMDYyMTIsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4OCwyMDk5MTAwMDYyMjEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4OSwyMDk5MTAwMDYyMjIsMzcsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTAsMjA5OTEwMDA2MjIzLDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTEsMjA5OTEwMDA2MjMwLDYwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkyLDIwOTkxMDAwNjIzMiwzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkzLDIwOTkxMDAwNjI0MywxMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NCwyMDk5MTAwMDYyNDQsMTUsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTUsMjA5OTEwMDA2Mzg3LDksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTYsMjA5OTEwMDA2NTkwLDksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTcsMjA5OTEwMDA2NjU4LDM0NiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5OCwyMDk5MTAwMDY2NjcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5OSwyMDk5MTAwMDY2NjgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMDAsMjA5OTEwMDA2NjkyLDEwMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTAxLDIwOTkxMDAwNjgyOCwxMDAwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEwMiwyMDk5MTAwMDcxMDMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMDMsMjA5OTEwMDA3MTA0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTA0LDIwOTkxMDAwNzEwNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEwNSwyMDk5MTAwMDcxMDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMDYsMjA5OTEwMDA3MTA4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTA3LDIwOTkxMDAwNzEzNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEwOCwyMDk5MTAwMDcxNDQsMTQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTA5LDIwOTkxMDAwNzE1NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazExMCwyMDk5MTAwMDcxNjYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMTEsMjA5OTEwMDA3MTcwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTEyLDIwOTkxMDAwNzE3MSwxOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMTMsMjA5OTEwMDA3MjEzLDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTE0LDIwOTkxMDAwNzMwMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazExNSwyMDk5MTAwMDc2OTEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMTYsMjA5OTEwMDA3ODkzLDMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTE3LDIwOTkxMDAwNzk0NCwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazExOCwyMDk5MTAwMDc5NjEsOSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMTksMjA5OTEwMDA4MTQ4LDksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTIwLDIwOTkxMDAwODI0NCwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEyMSwyMDk5MTAwMDgyNDUsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMjIsMjA5OTEwMDA4NDkzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTIzLDIwOTkxMDAwODQ5NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEyNCwyMDk5MTAwMDg5MDgsNywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMjUsMjA5OTEwMDA5MDY5LDQ1MCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMjYsMjA5OTEwMDA5MDc5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTI3LDIwOTkxMDAwOTA4MCwzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEyOCwyMDk5MTAwMDk5MTMsMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMjksMjA5OTEwMDA5OTk3LDEwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMzAsMjA5OTEwMDEwMzI3LDEyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEzMSwyMDk5MTAwMTA3NTIsMTgsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTMyLDIwOTkxMDAxMDc1NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEzMywyMDk5MTAwMTA4MDksMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMzQsMjA5OTEwMDEwODE3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTM1LDIwOTkxMDAxMTQ0NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazEzNiwyMDk5MTAwMTE2NTgsNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxMzcsMjA5OTEwMDExNjcwLDUsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTM4LDIwOTkxMDAxMjIyMCwxMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTM5LDIwOTkxMDAxMjI5MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE0MCwyMDk5MTAwMTMyODksNjAwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNDEsMjA5OTEwMDEzMzk4LDE4LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE0MiwyMDk5MTAwMTM1NzYsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNDMsMjA5OTEwMDE1NzAwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTQ0LDIwOTkxMDAxNjIyOSwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE0NSwyMDk5MTAwMTYzNjgsMTAwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNDYsMjA5OTEwMDE2NDQ5LDEwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNDcsMjA5OTEwMDE3ODc5LDMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTQ4LDIwOTkxMDAxODk5MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE0OSwyMDk5MTAwMTkyMTUsMjQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTUwLDIwOTkxMDAxOTg3Myw3MCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNTEsMjA5OTEwMDE5ODc2LDYsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTUyLDIwOTkxMDAxOTg5MiwxMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNTMsMjA5OTEwMDE5OTA0LDEyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE1NCwyMDk5MTAwMjAwOTAsMTAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTU1LDIwOTkxMDAyMDY1MCw1MywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNTYsMjA5OTEwMDIwNjY1LDgsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTU3LDIwOTkxMDAyMDY3OSwxMjIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTU4LDIwOTkxMDAyMTAxOCwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE1OSwyMDk5MTAwMjE3NTgsMjA2LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE2MCwyMDk5MTAwMjE3NTksMjIyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE2MSwyMDk5MTAwMjE3NjAsMTgzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE2MiwyMDk5MTAwMjIwNjcsMjQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTYzLDIwOTkxMDAyMjIwMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE2NCwyMDk5MTAwMjI5NDYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNjUsMjA5OTEwMDIyOTQ3LDcsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTY2LDIwOTkxMDAyMjk0OCw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE2NywyMDk5MTAwMjI5NDksNSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNjgsMjA5OTEwMDIyOTUyLDUsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTY5LDIwOTkxMDAyMjk1Myw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE3MCwyMDk5MTAwMjM0NDEsMjY1LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE3MSwyMDk5MTAwMjM5NTQsMTEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTcyLDIwOTkxMDAyNDg1MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE3MywyMDk5MTAwMjUwMzUsMTMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTc0LDIwOTkxMDAyNTU0NSwzMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNzUsMjA5OTEwMDI1OTExLDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTc2LDIwOTkxMDAyNTkxMiw1LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE3NywyMDk5MTAwMjYxMzAsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxNzgsMjA5OTEwMDI2MzU3LDksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTc5LDIwOTkxMDAyNjUxMyw0MCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxODAsMjA5OTEwMDI2NjU4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTgxLDIwOTkxMDAyNjc5NSw2MSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxODIsMjA5OTEwMDI2ODYxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTgzLDIwOTkxMDAyNzA3NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE4NCwyMDk5MTAwMjcyNDcsNDgwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE4NSwyMDk5MTAwMjcyNTAsNjMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTg2LDIwOTkxMDAyNzc1MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE4NywyMDk5MTAwMjgzMDEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxODgsMjA5OTEwMDI4NzYzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTg5LDIwOTkxMDAyOTA1NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE5MCwyMDk5MTAwMjkyMzQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxOTEsMjA5OTEwMDI5NzI5LDMwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE5MiwyMDk5MTAwMjk5MjksOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxOTMsMjA5OTEwMDMwOTgyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTk0LDIwOTkxMDAzMDk5MSwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE5NSwyMDk5MTAwMzE2NjUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxOTYsMjA5OTEwMDMxODUxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMTk3LDIwOTkxMDAzMjI2NCwzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazE5OCwyMDk5MTAwMzI4NDUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2sxOTksMjA5OTEwMDMyODQ2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjAwLDIwOTkxMDAzMjg4NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIwMSwyMDk5MTAwMzMyNDgsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMDIsMjA5OTEwMDMzMjc3LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjAzLDIwOTkxMDAzMzg3MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIwNCwyMDk5MTAwMzM5MTUsMTUyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIwNSwyMDk5MTAwMzQyMjcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMDYsMjA5OTEwMDM0NzEyLDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjA3LDIwOTkxMDAzNDkwOCw3LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIwOCwyMDk5MTAwMzU0ODQsNywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMDksMjA5OTEwMDM1NTYxLDIwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMTAsMjA5OTEwMDM1NTYyLDE1MCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMTEsMjA5OTEwMDM1NjcxLDUwMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjEyLDIwOTkxMDAzNjU5OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIxMywyMDk5MTAwMzY2NjQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMTQsMjA5OTEwMDM3MjA1LDEwMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjE1LDIwOTkxMDAzNzgwOCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIxNiwyMDk5MTAwMzc5NjIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMTcsMjA5OTEwMDM3OTY3LDYsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjE4LDIwOTkxMDAzNzk5MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIxOSwyMDk5MTAwMzgxMjksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMjAsMjA5OTEwMDM4MzU4LDI0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIyMSwyMDk5MTAwMzgzNTksMjIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjIyLDIwOTkxMDAzOTE1OCw1LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIyMywyMDk5MTAwMzkxNjQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMjQsMjA5OTEwMDM5MTY1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjI1LDIwOTkxMDAzOTE2NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIyNiwyMDk5MTAwMzkxNjcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMjcsMjA5OTEwMDM5MTY4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjI4LDIwOTkxMDAzOTE2OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIyOSwyMDk5MTAwMzkzMjgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMzAsMjA5OTEwMDM5MzI5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjMxLDIwOTkxMDAzOTk3NSwzNiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMzIsMjA5OTEwMDM5OTc2LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjMzLDIwOTkxMDA0MDE3NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIzNCwyMDk5MTAwNDA2MDAsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syMzUsMjA5OTEwMDQyMTk0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjM2LDIwOTkxMDA0Mjk3OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIzNywyMDk5MTAwNDM5MDAsMzMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjM4LDIwOTkxMDA0NDAzMSw2LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazIzOSwyMDk5MTAwNDQwMzgsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNDAsMjA5OTEwMDQ0MDQzLDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjQxLDIwOTkxMDA0NDIzNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI0MiwyMDk5MTAwNDQyMzgsOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNDMsMjA5OTEwMDQ1Mjg1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjQ0LDIwOTkxMDA0NjI0NSw3LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI0NSwyMDk5MTAwNDYzNzMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNDYsMjA5OTEwMDQ2NTE2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjQ3LDIwOTkxMDA0NjcyMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI0OCwyMDk5MTAwNDk2NjQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNDksMjA5OTEwMDQ5NjY1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjUwLDIwOTkxMDA1MDE4MywxNTAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjUxLDIwOTkxMDA1MDQxNSwzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI1MiwyMDk5MTAwNTE3NDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNTMsMjA5OTEwMDUxNzUwLDE1LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI1NCwyMDk5MTAwNTE4OTksMTksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjU1LDIwOTkxMDA1MjI1MywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI1NiwyMDk5MTAwNTM3NjYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNTcsMjA5OTEwMDU0MDgwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjU4LDIwOTkxMDA1NDEwNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI1OSwyMDk5MTAwNTQxMDgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNjAsMjA5OTEwMDU0MTEzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjYxLDIwOTkxMDA1NDg1MywyNSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNjIsMjA5OTEwMDU0OTM4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjYzLDIwOTkxMDA1NTcyMiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI2NCwyMDk5MTAwNTY0NTYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNjUsMjA5OTEwMDU2NDU5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjY2LDIwOTkxMDA1Nzc0NSw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI2NywyMDk5MTAwNTgxMTIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNjgsMjA5OTEwMDU4MTEzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjY5LDIwOTkxMDA1ODI1MiwyMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNzAsMjA5OTEwMDU4OTg0LDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjcxLDIwOTkxMDA1ODk5MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI3MiwyMDk5MTAwNjEwODYsODAwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNzMsMjA5OTEwMDYxMzA5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjc0LDIwOTkxMDA2MTMzNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI3NSwyMDk5MTAwNjE2OTYsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNzYsMjA5OTEwMDYxNjk3LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjc3LDIwOTkxMDA2MzA0OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI3OCwyMDk5MTAwNjMxMjcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syNzksMjA5OTEwMDYzNTM3LDcsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjgwLDIwOTkxMDA2MzUzOCw2LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI4MSwyMDk5MTAwNjM2MDQsNTAwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syODIsMjA5OTEwMDYzNjI0LDksMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjgzLDIwOTkxMDA2NTExMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI4NCwyMDk5MTAwNjUzNzUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syODUsMjA5OTEwMDY1Njk4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjg2LDIwOTkxMDA2NTc4NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI4NywyMDk5MTAwNjU3ODYsMTQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjg4LDIwOTkxMDA2NTc4Nyw5LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI4OSwyMDk5MTAwNjU3ODgsOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syOTAsMjA5OTEwMDY1NzkwLDEzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI5MSwyMDk5MTAwNjY0NDksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syOTIsMjA5OTEwMDY2NTAxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjkzLDIwOTkxMDA2NjY3MSwyMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjk0LDIwOTkxMDA2Njk4MiwxMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMjk1LDIwOTkxMDA2NzE5OSwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI5NiwyMDk5MTAwNjc3MzEsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2syOTcsMjA5OTEwMDY3NzMyLDEwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI5OCwyMDk5MTAwNjc5MjYsMTAwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazI5OSwyMDk5MTAwNjc5OTEsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMDAsMjA5OTEwMDY4ODc2LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzAxLDIwOTkxMDA2ODg3NywzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMwMiwyMDk5MTAwNjg4NzgsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMDMsMjA5OTEwMDY4ODc5LDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzA0LDIwOTkxMDA2ODg4MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMwNSwyMDk5MTAwNjg4ODEsOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMDYsMjA5OTEwMDY4ODgzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzA3LDIwOTkxMDA2ODg4NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMwOCwyMDk5MTAwNjkyNjMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMDksMjA5OTEwMDY5OTU0LDE3LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMxMCwyMDk5MTAwNjk5NTYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMTEsMjA5OTEwMDcwNzYzLDExLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMxMiwyMDk5MTAwNzA3NjQsNywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMTMsMjA5OTEwMDcwNzY4LDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzE0LDIwOTkxMDA3MDc2OSw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMxNSwyMDk5MTAwNzA3NzAsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMTYsMjA5OTEwMDcwNzcyLDIwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMxNywyMDk5MTAwNzA3NzMsNywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMTgsMjA5OTEwMDcwNzc1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzE5LDIwOTkxMDA3MDc3Niw0MCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMjAsMjA5OTEwMDcwNzc3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzIxLDIwOTkxMDA3MDc3OSw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMyMiwyMDk5MTAwNzA3ODMsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMjMsMjA5OTEwMDcwNzg1LDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzI0LDIwOTkxMDA3MDc5MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMyNSwyMDk5MTAwNzA4NjgsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMjYsMjA5OTEwMDcwOTg0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzI3LDIwOTkxMDA3MDk4NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMyOCwyMDk5MTAwNzA5ODYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMjksMjA5OTEwMDcxOTg3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzMwLDIwOTkxMDA3MTk4OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMzMSwyMDk5MTAwNzE5OTAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMzIsMjA5OTEwMDcyMTc5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzMzLDIwOTkxMDA3MjcyNyw3OSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMzQsMjA5OTEwMDczNjc4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzM1LDIwOTkxMDA3NzExNiw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMzNiwyMDk5MTAwODEyOTQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szMzcsMjA5OTEwMDgxNDkxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzM4LDIwOTkxMDA4MTQ5MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazMzOSwyMDk5MTAwODI1NDksNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNDAsMjA5OTEwMDgyNTUwLDMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzQxLDIwOTkxMDA4MjU1MSw3LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM0MiwyMDk5MTAwODI1ODYsNiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNDMsMjA5OTEwMDgzNzEwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzQ0LDIwOTkxMDA4NTQ3NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM0NSwyMDk5MTAwODYxNTQsNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNDYsMjA5OTEwMDg3NTY1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzQ3LDIwOTkxMDA4NzU2NiwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM0OCwyMDk5MTAwODg1MDgsNjAwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM0OSwyMDk5MTAwODg3ODgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNTAsMjA5OTEwMDg5MTYxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzUxLDIwOTkxMDA4OTE2MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM1MiwyMDk5MTAwOTAzMzMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNTMsMjA5OTEwMDkxMTE2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzU0LDIwOTkxMDA5MTExNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM1NSwyMDk5MTAwOTExMTksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNTYsMjA5OTEwMDkxNzYzLDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzU3LDIwOTkxMDA5MTc2NCwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM1OCwyMDk5MTAwOTI5NjIsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNTksMjA5OTEwMDk1MzcwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzYwLDIwOTkxMDA5NTg3MywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM2MSwyMDk5MTAwOTYwMjIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNjIsMjA5OTEwMDk2NDM5LDgsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzYzLDIwOTkxMDA5NzE2NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM2NCwyMDk5MTAwOTc3NzksMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNjUsMjA5OTEwMDk4NjY0LDMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzY2LDIwOTkxMDA5ODkwOSw1MDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzY3LDIwOTkxMDA5OTAxOCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM2OCwyMDk5MTAwOTkzNTcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNjksMjA5OTEwMDk5MzU4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzcwLDIwOTkxMDA5OTM1OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM3MSwyMDk5MTAwOTkzNjAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNzIsMjA5OTEwMDk5MzYxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzczLDIwOTkxMDA5OTc1MSw1LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM3NCwyMDk5MTAwOTk3NTIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNzUsMjA5OTEwMDk5OTk2LDUwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNzYsMjA5OTEwMTAwMzQ4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzc3LDIwOTkxMDEwMDQ5Niw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM3OCwyMDk5MTAxMDA4NDgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szNzksMjA5OTEwMTAxNDk5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzgwLDIwOTkxMDEwMTYxMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM4MSwyMDk5MTAxMDE2OTAsNDQwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM4MiwyMDk5MTAxMDI2MjgsMTAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzgzLDIwOTkxMDEwMzAwOCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM4NCwyMDk5MTAxMDMwMDksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szODUsMjA5OTEwMTAzMDEwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzg2LDIwOTkxMDEwMzAxMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM4NywyMDk5MTAxMDM5NjksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szODgsMjA5OTEwMTA1NzM4LDIwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM4OSwyMDk5MTAxMDU3NTAsMjMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzkwLDIwOTkxMDEwNjcxMyw4LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM5MSwyMDk5MTAxMDc4OTgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szOTIsMjA5OTEwMTA4MzM0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzkzLDIwOTkxMDEwODMzNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM5NCwyMDk5MTAxMDg2ODEsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szOTUsMjA5OTEwMTA4NjgyLDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzk2LDIwOTkxMDEwODY4MywxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazM5NywyMDk5MTAxMDg2ODQsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2szOTgsMjA5OTEwMTA4Njg1LDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrMzk5LDIwOTkxMDEwODY4NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQwMCwyMDk5MTAxMDg2ODcsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MDEsMjA5OTEwMTA4Njg4LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDAyLDIwOTkxMDEwOTQ1OCwyMDAwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQwMywyMDk5MTAxMDk0NjIsMTAwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MDQsMjA5OTEwMTA5NDYzLDUwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MDUsMjA5OTEwMTA5NDY0LDEwMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDA2LDIwOTkxMDEwOTQ2NSwxMDAwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQwNywyMDk5MTAxMDk0NjYsMTAwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MDgsMjA5OTEwMTA5NDg3LDEwMDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDA5LDIwOTkxMDEwOTcyMiwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQxMCwyMDk5MTAxMDk3MjMsMjUsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDExLDIwOTkxMDEwOTcyNywyMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MTIsMjA5OTEwMTEwMTg3LDUwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MTMsMjA5OTEwMTEwMTg4LDUwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MTQsMjA5OTEwMTEwMTg5LDUwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MTUsMjA5OTEwMTEwNDU0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDE2LDIwOTkxMDExMDY0MywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQxNywyMDk5MTAxMTA5NTIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MTgsMjA5OTEwMTExMTk2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDE5LDIwOTkxMDExNTE1MywxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQyMCwyMDk5MTAxMTUxNTQsNSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MjEsMjA5OTEwMTE1MjU1LDEwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQyMiwyMDk5MTAxMTUyNzMsMTEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDIzLDIwOTkxMDExNjk0NCwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQyNCwyMDk5MTAxMTkxMTQsMTgwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQyNSwyMDk5MTAxMjAwMTQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MjYsMjA5OTEwMTIzOTM0LDUwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MjcsMjA5OTEwMTIzOTQ1LDcsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDI4LDIwOTkxMDEyNDUyNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQyOSwyMDk5MTAxMjQ2NjksMTAwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQzMCwyMDk5MTAxMjYzMzksMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MzEsMjA5OTEwMTI2MzQwLDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDMyLDIwOTkxMDEyNjM0MSwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQzMywyMDk5MTAxMjYzNDIsNiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MzQsMjA5OTEwMTI2MzQzLDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDM1LDIwOTkxMDEyNjM0NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQzNiwyMDk5MTAxMjYzNDUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0MzcsMjA5OTEwMTI2MzU2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDM4LDIwOTkxMDEyNjM1NywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQzOSwyMDk5MTAxMjYzNTgsNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NDAsMjA5OTEwMTI2MzU5LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDQxLDIwOTkxMDEyNjM2MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ0MiwyMDk5MTAxMjYzNjEsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NDMsMjA5OTEwMTI2MzYyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDQ0LDIwOTkxMDEyNjM3MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ0NSwyMDk5MTAxMjYzNzMsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NDYsMjA5OTEwMTI2Mzc0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDQ3LDIwOTkxMDEyNjM3NSwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ0OCwyMDk5MTAxMjYzNzYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NDksMjA5OTEwMTI2Mzc3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDUwLDIwOTkxMDEyNjM3OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ1MSwyMDk5MTAxMjYzNzksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NTIsMjA5OTEwMTI2MzgwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDUzLDIwOTkxMDEyNjM4MSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ1NCwyMDk5MTAxMjYzODIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NTUsMjA5OTEwMTI2MzgzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDU2LDIwOTkxMDEyNjM4NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ1NywyMDk5MTAxMjYzODUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NTgsMjA5OTEwMTI2Mzg2LDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDU5LDIwOTkxMDEyNjM4NywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ2MCwyMDk5MTAxMjYzODgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NjEsMjA5OTEwMTI2Mzg5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDYyLDIwOTkxMDEyNjM5MCwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ2MywyMDk5MTAxMjYzOTEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NjQsMjA5OTEwMTI2MzkyLDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDY1LDIwOTkxMDEyNjM5MywxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ2NiwyMDk5MTAxMjYzOTQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NjcsMjA5OTEwMTI2Mzk1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDY4LDIwOTkxMDEyNjM5NiwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ2OSwyMDk5MTAxMjYzOTcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NzAsMjA5OTEwMTI2Mzk4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDcxLDIwOTkxMDEyNjM5OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ3MiwyMDk5MTAxMjY0MDAsMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NzMsMjA5OTEwMTI2NDAxLDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDc0LDIwOTkxMDEyNjQwMiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ3NSwyMDk5MTAxMjY0MDMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NzYsMjA5OTEwMTI2NDA0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDc3LDIwOTkxMDEyNjQwNSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ3OCwyMDk5MTAxMjY0MDYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0NzksMjA5OTEwMTI2NDA3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDgwLDIwOTkxMDEyNjQwOCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ4MSwyMDk5MTAxMjY0MDksMSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0ODIsMjA5OTEwMTI2NDEwLDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDgzLDIwOTkxMDEyNjQxMSw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ4NCwyMDk5MTAxMjY0MTIsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0ODUsMjA5OTEwMTI2NDEzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDg2LDIwOTkxMDEyNjQxNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ4NywyMDk5MTAxMjY0MTUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0ODgsMjA5OTEwMTI2NDE2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDg5LDIwOTkxMDEyNjQxNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ5MCwyMDk5MTAxMjY0MTgsNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0OTEsMjA5OTEwMTI2NDE5LDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDkyLDIwOTkxMDEyNjQyMCwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ5MywyMDk5MTAxMjY0MjEsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0OTQsMjA5OTEwMTI2NDIyLDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDk1LDIwOTkxMDEyNjQyMywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ5NiwyMDk5MTAxMjY0MjQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s0OTcsMjA5OTEwMTI2NDI1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNDk4LDIwOTkxMDEyNjQyNiwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazQ5OSwyMDk5MTAxMjY0MjcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MDAsMjA5OTEwMTI2NDI4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTAxLDIwOTkxMDEyNjQyOSwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUwMiwyMDk5MTAxMjY0MzAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MDMsMjA5OTEwMTI2NDMxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTA0LDIwOTkxMDEyNjQzMiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUwNSwyMDk5MTAxMjY0MzMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MDYsMjA5OTEwMTI2NDM0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTA3LDIwOTkxMDEyNjQzNSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUwOCwyMDk5MTAxMjY0MzYsMjQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTA5LDIwOTkxMDEyNjQzNywxNiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MTAsMjA5OTEwMTI2NDM4LDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTExLDIwOTkxMDEyNjQzOSw2LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUxMiwyMDk5MTAxMjY0NDAsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MTMsMjA5OTEwMTI2NDQxLDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTE0LDIwOTkxMDEyNjQ0MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUxNSwyMDk5MTAxMjY0NDMsOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MTYsMjA5OTEwMTI2NDQ0LDEyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUxNywyMDk5MTAxMjY0NDUsNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MTgsMjA5OTEwMTI2NDQ2LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTE5LDIwOTkxMDEyNjQ0NywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUyMCwyMDk5MTAxMjY0NDgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MjEsMjA5OTEwMTI2NDQ5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTIyLDIwOTkxMDEyNjQ1MCwxOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MjMsMjA5OTEwMTI2NDUxLDIwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUyNCwyMDk5MTAxMjY0NTIsMTIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTI1LDIwOTkxMDEyNjQ1Myw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUyNiwyMDk5MTAxMjY0NTQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MjcsMjA5OTEwMTI2NDU1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTI4LDIwOTkxMDEyNjQ1NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUyOSwyMDk5MTAxMjY0NTcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MzAsMjA5OTEwMTI2NDU4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTMxLDIwOTkxMDEyNjQ1OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUzMiwyMDk5MTAxMjY0NjAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MzMsMjA5OTEwMTI2NDYxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTM0LDIwOTkxMDEyNjQ2MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUzNSwyMDk5MTAxMjY0NjMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1MzYsMjA5OTEwMTI2NDY0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTM3LDIwOTkxMDEyNjQ2NSw2LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazUzOCwyMDk5MTAxMjY0NjYsMTIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTM5LDIwOTkxMDEyNjQ2Nyw4LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU0MCwyMDk5MTAxMjY0NjgsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NDEsMjA5OTEwMTI2NDY5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTQyLDIwOTkxMDEyNjQ3MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU0MywyMDk5MTAxMjY0NzEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NDQsMjA5OTEwMTI2NDcyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTQ1LDIwOTkxMDEyNjQ3MywxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU0NiwyMDk5MTAxMjY0NzQsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NDcsMjA5OTEwMTI2NDc1LDQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTQ4LDIwOTkxMDEyNjQ3NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU0OSwyMDk5MTAxMjY0NzcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NTAsMjA5OTEwMTI2NDc4LDE0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU1MSwyMDk5MTAxMjY0NzksOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NTIsMjA5OTEwMTI2NDgwLDE2LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU1MywyMDk5MTAxMjY0ODEsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NTQsMjA5OTEwMTI2NDgyLDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTU1LDIwOTkxMDEyNjQ4MywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU1NiwyMDk5MTAxMjY0ODQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NTcsMjA5OTEwMTI2NDg1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTU4LDIwOTkxMDEyNjQ4NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU1OSwyMDk5MTAxMjY0ODcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NjAsMjA5OTEwMTI2NDg4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTYxLDIwOTkxMDEyNjQ4OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU2MiwyMDk5MTAxMjY0OTAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NjMsMjA5OTEwMTI2NDkxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTY0LDIwOTkxMDEyNjQ5MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU2NSwyMDk5MTAxMjY0OTMsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NjYsMjA5OTEwMTI2NDk0LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTY3LDIwOTkxMDEyNjQ5NSw4LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU2OCwyMDk5MTAxMjY0OTYsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NjksMjA5OTEwMTI2NDk3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTcwLDIwOTkxMDEyNjQ5OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU3MSwyMDk5MTAxMjY0OTksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NzIsMjA5OTEwMTI2NTAwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTczLDIwOTkxMDEyNjUwMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU3NCwyMDk5MTAxMjY1MDIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NzUsMjA5OTEwMTI2NTAzLDgsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTc2LDIwOTkxMDEyNjUwNCw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU3NywyMDk5MTAxMjY1MDUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1NzgsMjA5OTEwMTI2NTA2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTc5LDIwOTkxMDEyNjUwNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU4MCwyMDk5MTAxMjY1MDgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1ODEsMjA5OTEwMTI2NTA5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTgyLDIwOTkxMDEyNjUxMCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU4MywyMDk5MTAxMjY1MTEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1ODQsMjA5OTEwMTI2NTEyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTg1LDIwOTkxMDEyNjUxMywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU4NiwyMDk5MTAxMjY1MTQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1ODcsMjA5OTEwMTI2NTE1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTg4LDIwOTkxMDEyNjUxNiwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU4OSwyMDk5MTAxMjY1MTcsOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1OTAsMjA5OTEwMTI2NTE4LDEwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU5MSwyMDk5MTAxMjY1MTksNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1OTIsMjA5OTEwMTI2NTIwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTkzLDIwOTkxMDEyNjU3MywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU5NCwyMDk5MTAxMjY1NzQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1OTUsMjA5OTEwMTI2NTc1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTk2LDIwOTkxMDEyNjU3NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazU5NywyMDk5MTAxMjY1NzcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s1OTgsMjA5OTEwMTI2NTc4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNTk5LDIwOTkxMDEyNjU3OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYwMCwyMDk5MTAxMjY1ODAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MDEsMjA5OTEwMTI2NTgxLDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjAyLDIwOTkxMDEyNjU4MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYwMywyMDk5MTAxMjY1ODMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MDQsMjA5OTEwMTI2NzkzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjA1LDIwOTkxMDEyNjc5NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYwNiwyMDk5MTAxMjY3OTUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MDcsMjA5OTEwMTI2Nzk2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjA4LDIwOTkxMDEyNjc5OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYwOSwyMDk5MTAxMjY3OTksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MTAsMjA5OTEwMTI2ODAwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjExLDIwOTkxMDEyNjgwMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYxMiwyMDk5MTAxMjY4MDIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MTMsMjA5OTEwMTI2ODAzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjE0LDIwOTkxMDEyNjgwNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYxNSwyMDk5MTAxMjY4MDUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MTYsMjA5OTEwMTI2ODA2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjE3LDIwOTkxMDEyNjgwNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYxOCwyMDk5MTAxMjY4MDgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MTksMjA5OTEwMTI2ODA5LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjIwLDIwOTkxMDEyNjgxMCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYyMSwyMDk5MTAxMjY4MTEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MjIsMjA5OTEwMTI2ODEzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjIzLDIwOTkxMDEyNjgxNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYyNCwyMDk5MTAxMjY4MTUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MjUsMjA5OTEwMTI2ODE2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjI2LDIwOTkxMDEyNjgxNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYyNywyMDk5MTAxMjY4MTgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MjgsMjA5OTEwMTI2ODE5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjI5LDIwOTkxMDEyNjgyMCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYzMCwyMDk5MTAxMjY4MjEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MzEsMjA5OTEwMTI3NDkzLDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjMyLDIwOTkxMDEyNzQ5NCwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYzMywyMDk5MTAxMjc0OTUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MzQsMjA5OTEwMTI3NDk2LDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjM1LDIwOTkxMDEyNzQ5NywxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYzNiwyMDk5MTAxMjc0OTgsMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2MzcsMjA5OTEwMTI3NDk5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjM4LDIwOTkxMDEyNzUwMCwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazYzOSwyMDk5MTAxMjc1MDEsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NDAsMjA5OTEwMTI3NjEzLDMsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjQxLDIwOTkxMDEyNzcyMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY0MiwyMDk5MTAxMjc3MjIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NDMsMjA5OTEwMTI3NzIzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjQ0LDIwOTkxMDEyNzcyNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY0NSwyMDk5MTAxMjc3MjUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NDYsMjA5OTEwMTI3NzI2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjQ3LDIwOTkxMDEyNzcyOCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY0OCwyMDk5MTAxMjc3MjksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NDksMjA5OTEwMTI3NzMwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjUwLDIwOTkxMDEyNzczMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY1MSwyMDk5MTAxMjc3MzIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NTIsMjA5OTEwMTI3NzMzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjUzLDIwOTkxMDEyNzczNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY1NCwyMDk5MTAxMjc4MTgsNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NTUsMjA5OTEwMTMwMDI3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjU2LDIwOTkxMDEzMDAyOCwyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY1NywyMDk5MTAxMzAwMjksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NTgsMjA5OTEwMTMwMDMwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjU5LDIwOTkxMDEzMDAzMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY2MCwyMDk5MTAxMzAwMzIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NjEsMjA5OTEwMTMwMTUzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjYyLDIwOTkxMDEzMDE1NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY2MywyMDk5MTAxMzAxNTUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NjQsMjA5OTEwMTMwMTU2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjY1LDIwOTkxMDEzMDE1NywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY2NiwyMDk5MTAxMzAxNTgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NjcsMjA5OTEwMTMwMjU0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjY4LDIwOTkxMDEzMDUwOCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY2OSwyMDk5MTAxMzA1MDksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NzAsMjA5OTEwMTMwNTEwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjcxLDIwOTkxMDEzMDUxMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY3MiwyMDk5MTAxMzA1MTIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NzMsMjA5OTEwMTMwNTMzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjc0LDIwOTkxMDEzMDUzNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY3NSwyMDk5MTAxMzA1MzUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NzYsMjA5OTEwMTMwNTM2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjc3LDIwOTkxMDEzMDUzNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY3OCwyMDk5MTAxMzA1MzgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2NzksMjA5OTEwMTMwNTM5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjgwLDIwOTkxMDEzMDU0MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY4MSwyMDk5MTAxMzA1NDEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2ODIsMjA5OTEwMTMwNTQyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjgzLDIwOTkxMDEzMDU0MywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY4NCwyMDk5MTAxMzA1NDQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2ODUsMjA5OTEwMTMwNTQ1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjg2LDIwOTkxMDEzMDU0NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY4NywyMDk5MTAxMzA1NDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2ODgsMjA5OTEwMTMwNTQ4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjg5LDIwOTkxMDEzMDU0OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY5MCwyMDk5MTAxMzA1NTAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2OTEsMjA5OTEwMTMwNTUxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjkyLDIwOTkxMDEzMDU1MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY5MywyMDk5MTAxMzA1NTMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2OTQsMjA5OTEwMTMwNTU0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjk1LDIwOTkxMDEzMDU1NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY5NiwyMDk5MTAxMzA1NTYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s2OTcsMjA5OTEwMTMwNTU3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNjk4LDIwOTkxMDEzMDU1OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazY5OSwyMDk5MTAxMzA1NTksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MDAsMjA5OTEwMTMwNTYwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzAxLDIwOTkxMDEzMDU2MSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcwMiwyMDk5MTAxMzA1NjIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MDMsMjA5OTEwMTMwNTYzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzA0LDIwOTkxMDEzMDU2NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcwNSwyMDk5MTAxMzA1NjUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MDYsMjA5OTEwMTMwNTY2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzA3LDIwOTkxMDEzMDU2NywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcwOCwyMDk5MTAxMzA1NjgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MDksMjA5OTEwMTMwNTY5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzEwLDIwOTkxMDEzMDU3MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcxMSwyMDk5MTAxMzA1NzEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MTIsMjA5OTEwMTMwNTcyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzEzLDIwOTkxMDEzMDU3MywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcxNCwyMDk5MTAxMzA1NzQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MTUsMjA5OTEwMTMwNTc1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzE2LDIwOTkxMDEzMDU3NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcxNywyMDk5MTAxMzA1NzcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MTgsMjA5OTEwMTMwNTc4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzE5LDIwOTkxMDEzMDU3OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcyMCwyMDk5MTAxMzA1ODAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MjEsMjA5OTEwMTMwNTgxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzIyLDIwOTkxMDEzMDU5MCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcyMywyMDk5MTAxMzA1OTEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MjQsMjA5OTEwMTMwNTkyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzI1LDIwOTkxMDEzMDU5MywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcyNiwyMDk5MTAxMzA1OTQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MjcsMjA5OTEwMTMwNTk1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzI4LDIwOTkxMDEzMDU5NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazcyOSwyMDk5MTAxMzA1OTcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MzAsMjA5OTEwMTMwNTk4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzMxLDIwOTkxMDEzMDU5OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazczMiwyMDk5MTAxMzA2MDAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MzMsMjA5OTEwMTMwNjAxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzM0LDIwOTkxMDEzMDYwMywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazczNSwyMDk5MTAxMzA2MDQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MzYsMjA5OTEwMTMwNjA1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzM3LDIwOTkxMDEzMDYwNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazczOCwyMDk5MTAxMzA2MDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3MzksMjA5OTEwMTMwNjA4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzQwLDIwOTkxMDEzMDYwOSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc0MSwyMDk5MTAxMzA2MTAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NDIsMjA5OTEwMTMwNjExLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzQzLDIwOTkxMDEzMDYxMiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc0NCwyMDk5MTAxMzA2MTMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NDUsMjA5OTEwMTMwNjE0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzQ2LDIwOTkxMDEzMDYxNSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc0NywyMDk5MTAxMzA2MTcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NDgsMjA5OTEwMTMwNjE4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzQ5LDIwOTkxMDEzMDYyMCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc1MCwyMDk5MTAxMzA2MjEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NTEsMjA5OTEwMTMwNjIyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzUyLDIwOTkxMDEzMDYyMywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc1MywyMDk5MTAxMzA2MjQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NTQsMjA5OTEwMTMwNjI1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzU1LDIwOTkxMDEzMDYyNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc1NiwyMDk5MTAxMzA2MjcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NTcsMjA5OTEwMTMwNjI4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzU4LDIwOTkxMDEzMDYyOSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc1OSwyMDk5MTAxMzA2MzAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NjAsMjA5OTEwMTMwNjMxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzYxLDIwOTkxMDEzMDYzMiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc2MiwyMDk5MTAxMzE5OTQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NjMsMjA5OTEwMTMxOTk1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzY0LDIwOTkxMDEzMTk5NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc2NSwyMDk5MTAxMzE5OTcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NjYsMjA5OTEwMTMxOTk4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzY3LDIwOTkxMDEzMTk5OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc2OCwyMDk5MTAxMzIwMDAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NjksMjA5OTEwMTMyMDAxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzcwLDIwOTkxMDEzMjAwMiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc3MSwyMDk5MTAxMzIwMDMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NzIsMjA5OTEwMTMyMDA0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzczLDIwOTkxMDEzMjAwNSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc3NCwyMDk5MTAxMzIwMDYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NzUsMjA5OTEwMTMyMDA3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzc2LDIwOTkxMDEzMjAwOCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc3NywyMDk5MTAxMzIwMDksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3NzgsMjA5OTEwMTMyMDEwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzc5LDIwOTkxMDEzMjAxMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc4MCwyMDk5MTAxMzIwMTIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3ODEsMjA5OTEwMTMyMDEzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzgyLDIwOTkxMDEzMjAxNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc4MywyMDk5MTAxMzIwMTUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3ODQsMjA5OTEwMTMyMDE2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzg1LDIwOTkxMDEzMjAxNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc4NiwyMDk5MTAxMzIyMjMsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3ODcsMjA5OTEwMTMyMjI0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzg4LDIwOTkxMDEzMjIyNSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc4OSwyMDk5MTAxMzI4ODEsMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3OTAsMjA5OTEwMTMyODgyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzkxLDIwOTkxMDEzMjg4MywyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc5MiwyMDk5MTAxMzI4ODQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3OTMsMjA5OTEwMTMyODg1LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzk0LDIwOTkxMDEzMjg4NiwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc5NSwyMDk5MTAxMzI4ODcsMiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3OTYsMjA5OTEwMTMyODg4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrNzk3LDIwOTkxMDEzMjg4OSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazc5OCwyMDk5MTAxMzI4OTAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s3OTksMjA5OTEwMTMyODkxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODAwLDIwOTkxMDEzMjk2MywzMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MDEsMjA5OTEwMTMyOTY0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODAyLDIwOTkxMDEzMjk2NSwxMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MDMsMjA5OTEwMTMzMDAyLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODA0LDIwOTkxMDEzMzAwMywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgwNSwyMDk5MTAxMzMwMDQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MDYsMjA5OTEwMTMzMDA1LDIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODA3LDIwOTkxMDEzMzAwNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgwOCwyMDk5MTAxMzMwMDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MDksMjA5OTEwMTMzMDA4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODEwLDIwOTkxMDEzMzAwOSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgxMSwyMDk5MTAxMzMwMTAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MTIsMjA5OTEwMTMzMDExLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODEzLDIwOTkxMDEzMzAxMiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgxNCwyMDk5MTAxMzUyMTgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MTUsMjA5OTEwMTM2NTA5LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODE2LDIwOTkxMDEzOTczOCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgxNywyMDk5MTAxNDAxNzgsMTQsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODE4LDIwOTkxMDE0MDE3OSw4LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgxOSwyMDk5MTAxNDA4ODIsMTAwMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MjAsMjA5OTEwMTQ1MDQxLDEwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgyMSwyMDk5MTAxNDU0MjksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MjIsMjA5OTEwMTQ2ODA0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODIzLDIwOTkxMDE0NjgwNSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgyNCwyMDk5MTAxNTA1MDQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MjUsMjA5OTEwMTUyMzY2LDUwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgyNiwyMDk5MTAxNTI0MDEsMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MjcsMjA5OTEwMTUzMDAxLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODI4LDIwOTkxMDE1MzA2MSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgyOSwyMDk5MTAxNTU2MzIsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MzAsMjA5OTEwMTU1NjMzLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODMxLDIwOTkxMDE1NTYzNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgzMiwyMDk5MTAxNTU2MzUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MzMsMjA5OTEwMTU1NjM2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODM0LDIwOTkxMDE1NTYzNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgzNSwyMDk5MTAxNTU2MzgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4MzYsMjA5OTEwMTU3ODI0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODM3LDIwOTkxMDE1ODM2NCw1MDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODM4LDIwOTkxMDE3MjI4NCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazgzOSwyMDk5MTAxNzIyODUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NDAsMjA5OTEwMTcyMjg2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODQxLDIwOTkxMDE3MjI4NywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg0MiwyMDk5MTAxNzIyODksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NDMsMjA5OTEwMTcyMjkwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODQ0LDIwOTkxMDE3MjI5MSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg0NSwyMDk5MTAxNzI5NDYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NDYsMjA5OTEwMTczMzg0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODQ3LDIwOTkxMDE3MzM4NSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg0OCwyMDk5MTAxNzM2NjcsMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NDksMjA5OTEwMTczNjY4LDgsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODUwLDIwOTkxMDE4MjgyNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg1MSwyMDk5MTAxODI4MjUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NTIsMjA5OTEwMTgyODQ0LDI3LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg1MywyMDk5MTAxODI4NDUsOCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NTQsMjA5OTEwMTg1ODQ0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODU1LDIwOTkxMDE5MjMzMSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg1NiwyMDk5MTAyMTI4NDYsMTIsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODU3LDIwOTkxMDIyNjE3Myw4LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg1OCwyMDk5MTAyMjYxNzUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NTksMjA5OTEwMjI2MTkxLDc1LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg2MCwyMDk5MTAyNDM0NjQsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NjEsMjA5OTEwMjQzNDg0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODYyLDIwOTkxMDI0MzUwNCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg2MywyMDk5MTAyNDQ4NjUsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NjQsMjA5OTEwMjQ0ODg0LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODY1LDIwOTkxMDI1NjgyNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg2NiwyMDk5MTAyNjUyODYsNSwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NjcsMjA5OTEwMjY1MzA2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODY4LDIwOTkxMDI2NTMwNyw0LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg2OSwyMDk5MTAyNjUzMjYsMywwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NzAsMjA5OTEwMjY1MzQ2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODcxLDIwOTkxMDI2NTM2NiwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg3MiwyMDk5MTAyNjUzODYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NzMsMjA5OTEwMjY1NDA2LDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODc0LDIwOTkxMDI2NTQwNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg3NSwyMDk5MTAyNjU0MDgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NzYsMjA5OTEwMjY1NDI2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODc3LDIwOTkxMDI2NTQ0NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg3OCwyMDk5MTAyNjU0NjYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4NzksMjA5OTEwMjY1NDg2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODgwLDIwOTkxMDI2NTUwNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg4MSwyMDk5MTAyNjU1MDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4ODIsMjA5OTEwMjY1NTA4LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODgzLDIwOTkxMDI2NTUyNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg4NCwyMDk5MTAyNjU1MjgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4ODUsMjA5OTEwMjY1NTQ2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODg2LDIwOTkxMDI2NTU2Niw1LDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg4NywyMDk5MTAyNjU1ODYsNCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4ODgsMjA5OTEwMjY1NjA2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODg5LDIwOTkxMDI3MDIwNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg5MCwyMDk5MTAyNzAyMDksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4OTEsMjA5OTEwMjcwMjEwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODkyLDIwOTkxMDI3MDIyOSwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg5MywyMDk5MTAyNzAyMzEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4OTQsMjA5OTEwMjcwMjY2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODk1LDIwOTkxMDI3MjY0NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg5NiwyMDk5MTAyNzI2NTAsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s4OTcsMjA5OTEwMjcyNjg2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrODk4LDIwOTkxMDI3MjcwNiwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazg5OSwyMDk5MTAyNzI3NjYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MDAsMjA5OTEwMjcyODA2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTAxLDIwOTkxMDI3MjgyNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkwMiwyMDk5MTAyNzI4NDYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MDMsMjA5OTEwMjcyODY2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTA0LDIwOTkxMDI3Mjg5MiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkwNSwyMDk5MTAyNzI5MDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MDYsMjA5OTEwMjcyOTEwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTA3LDIwOTkxMDI3MzAyNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkwOCwyMDk5MTAyNzMwNDYsMjAwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkwOSwyMDk5MTAyNzMwNjYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MTAsMjA5OTEwMjczMDg2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTExLDIwOTkxMDI3MzE4NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkxMiwyMDk5MTAyNzMyMDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MTMsMjA5OTEwMjczMjI2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTE0LDIwOTkxMDI3MzM0NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkxNSwyMDk5MTAyNzM0ODgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MTYsMjA5OTEwMjczNTA2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTE3LDIwOTkxMDI3MzUyNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkxOCwyMDk5MTAyNzM1MjgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MTksMjA5OTEwMjczNTMwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTIwLDIwOTkxMDI3MzYwNiwxMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MjEsMjA5OTEwMjc0MDg3LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTIyLDIwOTkxMDI3NDA4OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkyMywyMDk5MTAyNzQwODksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MjQsMjA5OTEwMjc0MjI2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTI1LDIwOTkxMDI3NDIyNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkyNiwyMDk5MTAyNzQyMjgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MjcsMjA5OTEwMjc0MzI2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTI4LDIwOTkxMDI3NDM0NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkyOSwyMDk5MTAyNzQzNDcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MzAsMjA5OTEwMjc0MzQ4LDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTMxLDIwOTkxMDI3NDM4NywyLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkzMiwyMDk5MTAyNzU0NjYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MzMsMjA5OTEwMjc1NjQ2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTM0LDIwOTkxMDI3NTk0NiwyNiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MzUsMjA5OTEwMjc1OTY2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTM2LDIwOTkxMDI3NjUwNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazkzNywyMDk5MTAyNzY2MDYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5MzgsMjA5OTEwMjc2NjI2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTM5LDIwOTkxMDI3NjcwNiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazk0MCwyMDk5MTAyNzY5MjksMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NDEsMjA5OTEwMjc2OTMwLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTQyLDIwOTkxMDI3Njk0NiwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazk0MywyMDk5MTAyNzcwODcsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NDQsMjA5OTEwMjc3MDg4LDEsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTQ1LDIwOTkxMDI3NzA4OSwxLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazk0NiwyMDk5MTAyNzcyMDYsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NDcsMjA5OTEwMjc3MjI2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTQ4LDIwOTkxMDI3NzMwNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazk0OSwyMDk5MTAyNzczMDgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NTAsMjA5OTEwMjc3ODQ2LDM3MCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NTEsMjA5OTEwMjc4NTA2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTUyLDIwOTkxMDI4MDk2NiwzLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazk1MywyMDk5MTAyODA5NjgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NTQsMjA5OTEwMjgxMTI2LDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTU1LDIwOTkxMDI4MTEyNywwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazk1NiwyMDk5MTAyODExMjgsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NTcsMjA5OTEwMjgxNTExLDAsMCwwLDIwMjMxMDE5LDE1OjEyOjIyLDQ2DQo5OSxSYWNrOTU4LDIwOTkxMDI4MjQ2OCwwLDAsMCwyMDIzMTAxOSwxNToxMjoyMiw0Ng0KOTksUmFjazk1OSwyMDk5MTAyODQyNTEsMCwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCjk5LFJhY2s5NjAsMjA5OTEwMjg5NDI2LDM2NiwwLDAsMjAyMzEwMTksMTU6MTI6MjIsNDYNCg==&quot;,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: true,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 1,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;PDT Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 2&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;Bulk Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 3&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;PDT Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;Bulk Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 2&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: true&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;0.00&quot;,&#xd;
        &quot;CountQty&quot;: &quot;0&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;0.00&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;0&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;0.00&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: true,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot; - &quot;,&#xd;
          &quot;BranchName&quot;: &quot;${HEAD1_BranchName}&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;${HEAD1_CompanyName}&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;${HEAD1_OperatingUnitName}&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;${HEAD1_StatusCode}&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;${HEAD1_StatusMeaning}&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;${HEAD1_SubIOName}&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;${HEAD1_SourceOrgId}&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;${HEAD1_SubIOId}&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${HEAD1_PhysicalInventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;3&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${HEAD1_StartDate}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${HEAD1_EndDate}&quot;,&#xd;
          &quot;Status&quot;: &quot;151&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
          &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
          &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: true,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionGenerateExceptionReport" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;WvxwVwq4jvLfLr8CCdW8Nw&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;InventoryOrgId&quot;: &quot;3&quot;,&#xd;
    &quot;InSystemButNoItemCounted&quot;: true,&#xd;
    &quot;ItemsTaggedToSubIO&quot;: true,&#xd;
    &quot;ItemsNotTaggedToSubIO&quot;: true,&#xd;
    &quot;InventoryBalanceReport&quot;: true,&#xd;
    &quot;VarianceReport&quot;: true,&#xd;
    &quot;isSaveReport&quot;: true&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionGenerateExceptionReport</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountDetails_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JKBdzG1ItUPMslHwHI05_A&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_1}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 1,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_1}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_1}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_1&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_1&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_2}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 2,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_2}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_2}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_2&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_2&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_3}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 3,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_3}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_3&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_3&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_4}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 4,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_4}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_4}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_4&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_4&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_5}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 5,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_5}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_5}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_5&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_5&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;PCountActionId&quot;: 9,&#xd;
    &quot;AdjustmentAccount&quot;: &quot;0&quot;,&#xd;
    &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
    &quot;isSelectAll&quot;: false,&#xd;
    &quot;LineItemsCount&quot;: 960&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionPhysicalCountDetails_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-FULFILLER" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Mnl_Fulfiller_FAS&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Mnl_Fulfiller_FAStest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: false&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;&quot;,&#xd;
        &quot;CountQty&quot;: &quot;&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot;&quot;,&#xd;
          &quot;BranchName&quot;: &quot;&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;0&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;Status&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: false,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: false,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get BranchName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_BranchName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;BranchName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CompanyName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CompanyName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CompanyName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OperatingUnitName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_OperatingUnitName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;OperatingUnitName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusMeaning" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusMeaning</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusMeaning&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PhysicalInventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_PhysicalInventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PhysicalInventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StartDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StartDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get EndDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_EndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountAmt&quot;:&quot;(\S+)&quot;,&quot;TotalVarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemAmt&quot;:&quot;(\S+)&quot;,&quot;TotalCountQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceAmt&quot;:&quot;(\S+)&quot;,&quot;Remarks&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategory" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCategory</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategory&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCode&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemDesc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemDesc</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemDesc&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UOM" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UOM</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UOM&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitCost" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UnitCost</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitCost&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(\S+)&quot;,&quot;SystemQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(\S+)&quot;,&quot;VarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNumber&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Count</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Count&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNo&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: true&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
        &quot;CountQty&quot;: &quot;${HEAD1_TotalCountQty}&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;${HEAD1_TotalSystemQty}&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;${HEAD1_TotalVarianceQty}&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;LineItemStructure&quot;: {&#xd;
                &quot;ItemCategory&quot;: &quot;${HEAD1_ItemCategory}&quot;,&#xd;
                &quot;ItemCode&quot;: &quot;${HEAD1_ItemCode}&quot;,&#xd;
                &quot;ItemDesc&quot;: &quot;${HEAD1_ItemDesc}&quot;,&#xd;
                &quot;UOM&quot;: &quot;${HEAD1_UOM}&quot;,&#xd;
                &quot;UnitCost&quot;: &quot;${HEAD1_UnitCost}&quot;,&#xd;
                &quot;ComputeAverageCost&quot;: false,&#xd;
                &quot;CountQty&quot;: &quot;${HEAD1_CountQty_1}&quot;,&#xd;
                &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
                &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
                &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
                &quot;VarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarianceQty&apos;),)},&#xd;
                &quot;VarianceAmt&quot;: &quot;${HEAD1_VarianceAmt}&quot;,&#xd;
                &quot;Edited&quot;: false,&#xd;
                &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
              },&#xd;
              &quot;isCountValid&quot;: true,&#xd;
              &quot;IsItemTaggedToSubIO&quot;: true,&#xd;
              &quot;isRackValid&quot;: true,&#xd;
              &quot;PCountDetails&quot;: {&#xd;
                &quot;Id&quot;: &quot;${HEAD1_Id_1}&quot;,&#xd;
                &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
                &quot;Selected&quot;: false,&#xd;
                &quot;SequenceNumber&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNumber&apos;),)},&#xd;
                &quot;RackNumber&quot;: &quot;${HEAD1_RackNumber_1}&quot;,&#xd;
                &quot;ItemId&quot;: &quot;${HEAD1_ItemId_1}&quot;,&#xd;
                &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQuantity_1&apos;),)},&#xd;
                &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQuantity_1&apos;),)},&#xd;
                &quot;Remarks&quot;: &quot;&quot;,&#xd;
                &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
                &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
                &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
                &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;${HEAD1_Count}&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot; - &quot;,&#xd;
          &quot;BranchName&quot;: &quot;${HEAD1_BranchName}&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;${HEAD1_CompanyName}&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;${HEAD1_OperatingUnitName}&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;${HEAD1_StatusCode}&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;${HEAD1_StatusMeaning}&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;${HEAD1_SubIOName}&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;${HEAD1_SourceOrgId}&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;${HEAD1_SubIOId}&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${HEAD1_PhysicalInventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${HEAD1_StartDate}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${HEAD1_EndDate}&quot;,&#xd;
          &quot;Status&quot;: &quot;${HEAD1_Status}&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalSystemQty&apos;),)},&#xd;
          &quot;TotalSystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
          &quot;TotalCountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalCountQty&apos;),)},&#xd;
          &quot;TotalCountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalVarianceQty&apos;),)},&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_2&apos;),)},&#xd;
          &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_2}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_2&apos;),)},&#xd;
          &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_2}&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: true,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
              &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
              &quot;VarAmt&quot;: &quot;${HEAD1_VarAmt_1}&quot;,&#xd;
              &quot;CountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQty_1&apos;),)},&#xd;
              &quot;SequenceNo&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNo_1&apos;),)},&#xd;
              &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
              &quot;VarQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarQty_1&apos;),)}&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountDetails_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JKBdzG1ItUPMslHwHI05_A&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_1}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 1,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_1}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_1}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_1&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_1&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_2}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 2,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_2}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_2}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_2&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_2&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_3}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 3,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_3}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_3&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_3&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_4}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 4,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_4}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_4}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_4&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_4&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_5}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 5,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_5}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_5}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_5&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_5&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;PCountActionId&quot;: 1,&#xd;
    &quot;AdjustmentAccount&quot;: &quot;0&quot;,&#xd;
    &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
    &quot;isSelectAll&quot;: false,&#xd;
    &quot;LineItemsCount&quot;: 960&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionPhysicalCountDetails_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-ACCOUNTING_FINALIZE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Ace_Accounting&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Ace_Accountingtest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: false&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;&quot;,&#xd;
        &quot;CountQty&quot;: &quot;&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot;&quot;,&#xd;
          &quot;BranchName&quot;: &quot;&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;0&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;Status&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: false,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: false,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get BranchName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_BranchName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;BranchName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CompanyName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CompanyName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CompanyName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OperatingUnitName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_OperatingUnitName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;OperatingUnitName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusMeaning" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusMeaning</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusMeaning&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PhysicalInventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_PhysicalInventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PhysicalInventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StartDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StartDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get EndDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_EndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountAmt&quot;:&quot;(\S+)&quot;,&quot;TotalVarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemAmt&quot;:&quot;(\S+)&quot;,&quot;TotalCountQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceAmt&quot;:&quot;(\S+)&quot;,&quot;Remarks&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategory" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCategory</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategory&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCode&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemDesc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemDesc</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemDesc&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UOM" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UOM</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UOM&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitCost" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UnitCost</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitCost&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(\S+)&quot;,&quot;SystemQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(\S+)&quot;,&quot;VarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNumber&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Count</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Count&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNo&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: true&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
        &quot;CountQty&quot;: &quot;${HEAD1_TotalCountQty}&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;${HEAD1_TotalSystemQty}&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;${HEAD1_TotalVarianceQty}&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;LineItemStructure&quot;: {&#xd;
                &quot;ItemCategory&quot;: &quot;${HEAD1_ItemCategory}&quot;,&#xd;
                &quot;ItemCode&quot;: &quot;${HEAD1_ItemCode}&quot;,&#xd;
                &quot;ItemDesc&quot;: &quot;${HEAD1_ItemDesc}&quot;,&#xd;
                &quot;UOM&quot;: &quot;${HEAD1_UOM}&quot;,&#xd;
                &quot;UnitCost&quot;: &quot;${HEAD1_UnitCost}&quot;,&#xd;
                &quot;ComputeAverageCost&quot;: false,&#xd;
                &quot;CountQty&quot;: &quot;${HEAD1_CountQty_1}&quot;,&#xd;
                &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
                &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
                &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
                &quot;VarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarianceQty&apos;),)},&#xd;
                &quot;VarianceAmt&quot;: &quot;${HEAD1_VarianceAmt}&quot;,&#xd;
                &quot;Edited&quot;: false,&#xd;
                &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
              },&#xd;
              &quot;isCountValid&quot;: true,&#xd;
              &quot;IsItemTaggedToSubIO&quot;: true,&#xd;
              &quot;isRackValid&quot;: true,&#xd;
              &quot;PCountDetails&quot;: {&#xd;
                &quot;Id&quot;: &quot;${HEAD1_Id_1}&quot;,&#xd;
                &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
                &quot;Selected&quot;: false,&#xd;
                &quot;SequenceNumber&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNumber&apos;),)},&#xd;
                &quot;RackNumber&quot;: &quot;${HEAD1_RackNumber_1}&quot;,&#xd;
                &quot;ItemId&quot;: &quot;${HEAD1_ItemId_1}&quot;,&#xd;
                &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQuantity_1&apos;),)},&#xd;
                &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQuantity_1&apos;),)},&#xd;
                &quot;Remarks&quot;: &quot;&quot;,&#xd;
                &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
                &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
                &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
                &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;${HEAD1_Count}&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot; - &quot;,&#xd;
          &quot;BranchName&quot;: &quot;${HEAD1_BranchName}&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;${HEAD1_CompanyName}&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;${HEAD1_OperatingUnitName}&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;${HEAD1_StatusCode}&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;${HEAD1_StatusMeaning}&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;${HEAD1_SubIOName}&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;${HEAD1_SourceOrgId}&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;${HEAD1_SubIOId}&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${HEAD1_PhysicalInventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${HEAD1_StartDate}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${HEAD1_EndDate}&quot;,&#xd;
          &quot;Status&quot;: &quot;${HEAD1_Status}&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalSystemQty&apos;),)},&#xd;
          &quot;TotalSystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
          &quot;TotalCountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalCountQty&apos;),)},&#xd;
          &quot;TotalCountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalVarianceQty&apos;),)},&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_2&apos;),)},&#xd;
          &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_2}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_2&apos;),)},&#xd;
          &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_2}&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: true,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
              &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
              &quot;VarAmt&quot;: &quot;${HEAD1_VarAmt_1}&quot;,&#xd;
              &quot;CountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQty_1&apos;),)},&#xd;
              &quot;SequenceNo&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNo_1&apos;),)},&#xd;
              &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
              &quot;VarQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarQty_1&apos;),)}&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountDetails_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JKBdzG1ItUPMslHwHI05_A&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_1}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 1,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_1}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_1}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_1&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_1&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_2}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 2,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_2}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_2}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_2&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_2&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_3}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 3,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_3}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_3&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_3&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_4}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 4,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_4}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_4}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_4&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_4&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_5}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: true,&#xd;
            &quot;SequenceNumber&quot;: 5,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_5}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_5}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_5&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_5&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;PCountActionId&quot;: 3,&#xd;
    &quot;AdjustmentAccount&quot;: &quot;0&quot;,&#xd;
    &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
    &quot;isSelectAll&quot;: true,&#xd;
    &quot;LineItemsCount&quot;: 960&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionPhysicalCountDetails_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-APPROVER" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Mnl_Approver&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Mnl_Approvertest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPCount_MultiApprove" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;9NtrWz+XdR_FJttzfjfMBQ&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountSetupList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        &quot;${PSETUP_PCountSetupId_1}&quot;&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountWorkList_Approver/ActionPCount_MultiApprove</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PCOUNT_WORKLIST-ACCOUNTING_POST" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DisplayLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/Login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLoginAD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;8fsRX2bdOhG8eCAsz6BPlw&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;sJd5pEXsGfaDeIPjEk4Aew&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;Common.Login&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;Username&quot;: &quot;SMRETAILINC\\Mnl_Accounting&quot;,&#xd;
    &quot;Password&quot;: &quot;SMRETAILINC\\Mnl_Accountingtest&quot;,&#xd;
    &quot;RememberLogin&quot;: false&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_Th/screenservices/NTIS_Th/Common/Login/ActionDoLoginAD</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PhysicalCountWorklist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/PhysicalCountWorklist</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;PDT Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 2&#xd;
            },&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;Bulk Upload Template&quot;,&#xd;
              &quot;TemplateId&quot;: 3&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;PDT Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 1&#xd;
            },&#xd;
            {&#xd;
              &quot;UploadTypeName&quot;: &quot;Bulk Upload&quot;,&#xd;
              &quot;UploadTypeId&quot;: 2&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 1,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: false&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;&quot;,&#xd;
        &quot;CountQty&quot;: &quot;&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: false,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: true,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;LineItemStructure&quot;: {&#xd;
              &quot;ItemCategory&quot;: &quot;&quot;,&#xd;
              &quot;ItemCode&quot;: &quot;&quot;,&#xd;
              &quot;ItemDesc&quot;: &quot;&quot;,&#xd;
              &quot;UOM&quot;: &quot;&quot;,&#xd;
              &quot;UnitCost&quot;: &quot;0&quot;,&#xd;
              &quot;ComputeAverageCost&quot;: false,&#xd;
              &quot;CountQty&quot;: &quot;&quot;,&#xd;
              &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQty&quot;: 0,&#xd;
              &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
              &quot;VarianceQty&quot;: 0,&#xd;
              &quot;VarianceAmt&quot;: &quot;0&quot;,&#xd;
              &quot;Edited&quot;: false,&#xd;
              &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
            },&#xd;
            &quot;isCountValid&quot;: false,&#xd;
            &quot;IsItemTaggedToSubIO&quot;: false,&#xd;
            &quot;isRackValid&quot;: false,&#xd;
            &quot;PCountDetails&quot;: {&#xd;
              &quot;Id&quot;: &quot;0&quot;,&#xd;
              &quot;PCountSetupId&quot;: &quot;0&quot;,&#xd;
              &quot;Selected&quot;: false,&#xd;
              &quot;SequenceNumber&quot;: 0,&#xd;
              &quot;RackNumber&quot;: &quot;&quot;,&#xd;
              &quot;ItemId&quot;: &quot;0&quot;,&#xd;
              &quot;SystemQuantity&quot;: 0,&#xd;
              &quot;CountQuantity&quot;: 0,&#xd;
              &quot;Remarks&quot;: &quot;&quot;,&#xd;
              &quot;CreatedBy&quot;: 0,&#xd;
              &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
              &quot;UpdatedBy&quot;: 0,&#xd;
              &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
            }&#xd;
          }&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;0&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot;&quot;,&#xd;
          &quot;BranchName&quot;: &quot;&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;0&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;0&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;0&quot;,&#xd;
          &quot;StartDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;EndDate&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;Status&quot;: &quot;0&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: false,&#xd;
          &quot;TotalSystemQty&quot;: 0,&#xd;
          &quot;TotalSystemAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalCountQty&quot;: 0,&#xd;
          &quot;TotalCountAmt&quot;: &quot;0&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: 0,&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;0&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: 0,&#xd;
          &quot;CreatedOn&quot;: &quot;1900-01-01T00:00:00&quot;,&#xd;
          &quot;UpdatedBy&quot;: 0,&#xd;
          &quot;UpdatedOn&quot;: &quot;1900-01-01T00:00:00&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: false,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;CountAmt&quot;: &quot;0&quot;,&#xd;
            &quot;SystemAmt&quot;: &quot;0&quot;,&#xd;
            &quot;VarAmt&quot;: &quot;0&quot;,&#xd;
            &quot;CountQty&quot;: 0,&#xd;
            &quot;SequenceNo&quot;: 0,&#xd;
            &quot;SystemQty&quot;: 0,&#xd;
            &quot;VarQty&quot;: 0&#xd;
          }&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 0&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get BranchName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_BranchName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;BranchName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CompanyName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CompanyName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CompanyName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OperatingUnitName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_OperatingUnitName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;OperatingUnitName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusCode&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StatusMeaning" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StatusMeaning</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StatusMeaning&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SourceOrgId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SourceOrgId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SourceOrgId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SubIOId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SubIOId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SubIOId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PhysicalInventoryName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_PhysicalInventoryName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;PhysicalInventoryName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get StartDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_StartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;StartDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get EndDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_EndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CreatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CreatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CreatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedBy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedBy</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedBy&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UpdatedOn" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UpdatedOn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UpdatedOn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountAmt&quot;:&quot;(\S+)&quot;,&quot;TotalVarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalCountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalCountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalCountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemAmt&quot;:&quot;(\S+)&quot;,&quot;TotalCountQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalSystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalSystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalSystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceAmt&quot;:&quot;(\S+)&quot;,&quot;Remarks&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TotalVarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_TotalVarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;TotalVarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCategory" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCategory</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCategory&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemCode&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemDesc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemDesc</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemDesc&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UOM" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UOM</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UOM&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get UnitCost" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_UnitCost</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;UnitCost&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(\S+)&quot;,&quot;SystemQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(\S+)&quot;,&quot;VarianceQty&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarianceAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarianceAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarianceAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNumber&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Count</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Count&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_Status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Status&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarAmt" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarAmt</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarAmt&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_CountQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SequenceNo" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SequenceNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SequenceNo&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_SystemQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get VarQty" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD1_VarQty</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;VarQty&quot;:([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataActionGetHeaderDetails2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;X3GaGktIWPz9Z9WD9VQdHg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;screenData&quot;: {&#xd;
    &quot;variables&quot;: {&#xd;
      &quot;DialogBox_Var&quot;: {&#xd;
        &quot;DialogMessage&quot;: &quot;&quot;,&#xd;
        &quot;isApproveConfirmation&quot;: false,&#xd;
        &quot;isCloseConfirmation&quot;: false,&#xd;
        &quot;isDeleteConfirmation&quot;: false,&#xd;
        &quot;isDeleteItemConfirmation&quot;: false,&#xd;
        &quot;isFinalizeConfirmation&quot;: false,&#xd;
        &quot;isPostConfirmation&quot;: false,&#xd;
        &quot;isReturnConfirmation&quot;: false,&#xd;
        &quot;isSubmitConfirmation&quot;: false,&#xd;
        &quot;showAdditionalInformation&quot;: false,&#xd;
        &quot;showConfirmation&quot;: false,&#xd;
        &quot;showRemarksConfirmation&quot;: false&#xd;
      },&#xd;
      &quot;File_Var&quot;: {&#xd;
        &quot;UploadFileName&quot;: &quot;&quot;,&#xd;
        &quot;UploadFile&quot;: null,&#xd;
        &quot;showTemplateTypePopup&quot;: false,&#xd;
        &quot;showUploadPopup&quot;: false,&#xd;
        &quot;showUploadTypePopup&quot;: false,&#xd;
        &quot;SelectedTemplateType&quot;: 0,&#xd;
        &quot;SelectedUploadType&quot;: 0,&#xd;
        &quot;TemplateTypeList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;TemplateName&quot;: &quot;P-Count Sheet&quot;,&#xd;
              &quot;TemplateId&quot;: 1&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;UploadTypeList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;UploadTypeName&quot;: &quot;&quot;,&#xd;
            &quot;UploadTypeId&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;IsExecutingCheckboxAction&quot;: false,&#xd;
      &quot;IsUploadProcessing&quot;: false,&#xd;
      &quot;LineItems_Var&quot;: {&#xd;
        &quot;ItemNameForDelete&quot;: &quot;&quot;,&#xd;
        &quot;SequenceNoFoDelete&quot;: &quot;&quot;,&#xd;
        &quot;hasActionButtonClicked&quot;: false,&#xd;
        &quot;hasValidationError&quot;: false,&#xd;
        &quot;IsSelectAll&quot;: false,&#xd;
        &quot;isSelectAllChanged&quot;: false,&#xd;
        &quot;IsSubIOValidationClicked&quot;: false,&#xd;
        &quot;showAddLineItem&quot;: false,&#xd;
        &quot;PCountDetailsId_forDelete&quot;: &quot;0&quot;&#xd;
      },&#xd;
      &quot;MaxRecords&quot;: 5,&#xd;
      &quot;Report_Var&quot;: {&#xd;
        &quot;AttachmentList&quot;: {&#xd;
          &quot;List&quot;: [],&#xd;
          &quot;EmptyListItem&quot;: {&#xd;
            &quot;FileName&quot;: &quot;&quot;,&#xd;
            &quot;FileContent&quot;: null,&#xd;
            &quot;MimeType&quot;: &quot;&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;isSaveReport&quot;: false,&#xd;
        &quot;isSendEmail&quot;: true&#xd;
      },&#xd;
      &quot;Search_Var&quot;: &quot;&quot;,&#xd;
      &quot;SelectedItemId&quot;: &quot;0&quot;,&#xd;
      &quot;SelectedReport&quot;: {&#xd;
        &quot;ExceptionReportNoCount&quot;: false,&#xd;
        &quot;ExceptionReportNoSubIO&quot;: false,&#xd;
        &quot;ExceptionReportWithSubIO&quot;: false,&#xd;
        &quot;InventoryBalanceReport&quot;: false,&#xd;
        &quot;VarianceReport&quot;: false&#xd;
      },&#xd;
      &quot;ShowWorkflow&quot;: false,&#xd;
      &quot;StartIndex&quot;: 0,&#xd;
      &quot;TableSort&quot;: &quot;&quot;,&#xd;
      &quot;Total_Var&quot;: {&#xd;
        &quot;CountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
        &quot;CountQty&quot;: &quot;${HEAD1_TotalCountQty}&quot;,&#xd;
        &quot;SystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
        &quot;SystemQty&quot;: &quot;${HEAD1_TotalSystemQty}&quot;,&#xd;
        &quot;VarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
        &quot;VarianceQty&quot;: &quot;${HEAD1_TotalVarianceQty}&quot;&#xd;
      },&#xd;
      &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
      &quot;_pCountSetupIdInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasFulfillerRole&quot;: true,&#xd;
      &quot;_hasFulfillerRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAccountingRole&quot;: false,&#xd;
      &quot;_hasAccountingRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasPCountApproverRole&quot;: false,&#xd;
      &quot;_hasPCountApproverRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;HasAdminRole&quot;: false,&#xd;
      &quot;_hasAdminRoleInDataFetchStatus&quot;: 1,&#xd;
      &quot;GetHeaderDetails&quot;: {&#xd;
        &quot;PCountLineItems&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;LineItemStructure&quot;: {&#xd;
                &quot;ItemCategory&quot;: &quot;${HEAD1_ItemCategory}&quot;,&#xd;
                &quot;ItemCode&quot;: &quot;${HEAD1_ItemCode}&quot;,&#xd;
                &quot;ItemDesc&quot;: &quot;${HEAD1_ItemDesc}&quot;,&#xd;
                &quot;UOM&quot;: &quot;${HEAD1_UOM}&quot;,&#xd;
                &quot;UnitCost&quot;: &quot;${HEAD1_UnitCost}&quot;,&#xd;
                &quot;ComputeAverageCost&quot;: false,&#xd;
                &quot;CountQty&quot;: &quot;${HEAD1_CountQty_1}&quot;,&#xd;
                &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
                &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
                &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
                &quot;VarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarianceQty&apos;),)},&#xd;
                &quot;VarianceAmt&quot;: &quot;${HEAD1_VarianceAmt}&quot;,&#xd;
                &quot;Edited&quot;: false,&#xd;
                &quot;Inv_Item_OrganizationId&quot;: &quot;0&quot;&#xd;
              },&#xd;
              &quot;isCountValid&quot;: true,&#xd;
              &quot;IsItemTaggedToSubIO&quot;: true,&#xd;
              &quot;isRackValid&quot;: true,&#xd;
              &quot;PCountDetails&quot;: {&#xd;
                &quot;Id&quot;: &quot;${HEAD1_Id_1}&quot;,&#xd;
                &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
                &quot;Selected&quot;: false,&#xd;
                &quot;SequenceNumber&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNumber&apos;),)},&#xd;
                &quot;RackNumber&quot;: &quot;${HEAD1_RackNumber_1}&quot;,&#xd;
                &quot;ItemId&quot;: &quot;${HEAD1_ItemId_1}&quot;,&#xd;
                &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQuantity_1&apos;),)},&#xd;
                &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQuantity_1&apos;),)},&#xd;
                &quot;Remarks&quot;: &quot;&quot;,&#xd;
                &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
                &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
                &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
                &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
              }&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;Count&quot;: &quot;${HEAD1_Count}&quot;,&#xd;
        &quot;PCountHeader&quot;: {&#xd;
          &quot;AdjustmentAccount&quot;: &quot; - &quot;,&#xd;
          &quot;BranchName&quot;: &quot;${HEAD1_BranchName}&quot;,&#xd;
          &quot;CompanyName&quot;: &quot;${HEAD1_CompanyName}&quot;,&#xd;
          &quot;Countedby&quot;: &quot;&quot;,&#xd;
          &quot;OperatingUnitName&quot;: &quot;${HEAD1_OperatingUnitName}&quot;,&#xd;
          &quot;StatusCode&quot;: &quot;${HEAD1_StatusCode}&quot;,&#xd;
          &quot;StatusMeaning&quot;: &quot;${HEAD1_StatusMeaning}&quot;,&#xd;
          &quot;SubIOName&quot;: &quot;${HEAD1_SubIOName}&quot;,&#xd;
          &quot;VerifiedBy&quot;: &quot;&quot;,&#xd;
          &quot;SourceOrgId&quot;: &quot;${HEAD1_SourceOrgId}&quot;,&#xd;
          &quot;SubIOId&quot;: &quot;${HEAD1_SubIOId}&quot;&#xd;
        },&#xd;
        &quot;PCountSetup&quot;: {&#xd;
          &quot;Id&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
          &quot;PhysicalInventoryName&quot;: &quot;${HEAD1_PhysicalInventoryName}&quot;,&#xd;
          &quot;InventoryOrgId&quot;: &quot;5&quot;,&#xd;
          &quot;StartDate&quot;: &quot;${HEAD1_StartDate}&quot;,&#xd;
          &quot;EndDate&quot;: &quot;${HEAD1_EndDate}&quot;,&#xd;
          &quot;Status&quot;: &quot;${HEAD1_Status}&quot;,&#xd;
          &quot;SubIOValidated&quot;: false,&#xd;
          &quot;CountedBy&quot;: 0,&#xd;
          &quot;VerifiedBy&quot;: 0,&#xd;
          &quot;Frozen&quot;: true,&#xd;
          &quot;TotalSystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalSystemQty&apos;),)},&#xd;
          &quot;TotalSystemAmt&quot;: &quot;${HEAD1_TotalSystemAmt}&quot;,&#xd;
          &quot;TotalCountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalCountQty&apos;),)},&#xd;
          &quot;TotalCountAmt&quot;: &quot;${HEAD1_TotalCountAmt}&quot;,&#xd;
          &quot;TotalVarianceQty&quot;: ${__groovy(vars.get(&apos;HEAD1_TotalVarianceQty&apos;),)},&#xd;
          &quot;TotalVarianceAmt&quot;: &quot;${HEAD1_TotalVarianceAmt}&quot;,&#xd;
          &quot;Remarks&quot;: &quot;&quot;,&#xd;
          &quot;AdjustmentAccountId&quot;: &quot;0&quot;,&#xd;
          &quot;AdjustmentDate&quot;: &quot;1900-01-01&quot;,&#xd;
          &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_2&apos;),)},&#xd;
          &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_2}&quot;,&#xd;
          &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_2&apos;),)},&#xd;
          &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_2}&quot;&#xd;
        },&#xd;
        &quot;isLineItemEditable&quot;: true,&#xd;
        &quot;hasSelectedLineItem&quot;: false,&#xd;
        &quot;QuantityAmountList&quot;: {&#xd;
          &quot;List&quot;: [&#xd;
            {&#xd;
              &quot;CountAmt&quot;: &quot;${HEAD1_CountAmt_1}&quot;,&#xd;
              &quot;SystemAmt&quot;: &quot;${HEAD1_SystemAmt_1}&quot;,&#xd;
              &quot;VarAmt&quot;: &quot;${HEAD1_VarAmt_1}&quot;,&#xd;
              &quot;CountQty&quot;: ${__groovy(vars.get(&apos;HEAD1_CountQty_1&apos;),)},&#xd;
              &quot;SequenceNo&quot;: ${__groovy(vars.get(&apos;HEAD1_SequenceNo_1&apos;),)},&#xd;
              &quot;SystemQty&quot;: ${__groovy(vars.get(&apos;HEAD1_SystemQty_1&apos;),)},&#xd;
              &quot;VarQty&quot;: ${__groovy(vars.get(&apos;HEAD1_VarQty_1&apos;),)}&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;DataFetchStatus&quot;: 1&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/DataActionGetHeaderDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_Id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get RackNumber" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_RackNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RackNumber&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_ItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get SystemQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_SystemQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;SystemQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CountQuantity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HEAD2_CountQuantity</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CountQuantity&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionPhysicalCountDetails_Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;JKBdzG1ItUPMslHwHI05_A&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountWorklist&quot;,&#xd;
  &quot;inputParameters&quot;: {&#xd;
    &quot;PCountList&quot;: {&#xd;
      &quot;List&quot;: [&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_1}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 1,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_1}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_1}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_1&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_1&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_2}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 2,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_2}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_2}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_2&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_2&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_3}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 3,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_3}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_3}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_3&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_3&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_4}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 4,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_4}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_4}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_4&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_4&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        },&#xd;
        {&#xd;
          &quot;Edited&quot;: false,&#xd;
          &quot;PCountDetails&quot;: {&#xd;
            &quot;Id&quot;: &quot;${HEAD2_Id_5}&quot;,&#xd;
            &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
            &quot;Selected&quot;: false,&#xd;
            &quot;SequenceNumber&quot;: 5,&#xd;
            &quot;RackNumber&quot;: &quot;${HEAD2_RackNumber_5}&quot;,&#xd;
            &quot;ItemId&quot;: &quot;${HEAD2_ItemId_5}&quot;,&#xd;
            &quot;SystemQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_SystemQuantity_5&apos;),)},&#xd;
            &quot;CountQuantity&quot;: ${__groovy(vars.get(&apos;HEAD2_CountQuantity_5&apos;),)},&#xd;
            &quot;Remarks&quot;: &quot;&quot;,&#xd;
            &quot;CreatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_CreatedBy_1&apos;),)},&#xd;
            &quot;CreatedOn&quot;: &quot;${HEAD1_CreatedOn_1}&quot;,&#xd;
            &quot;UpdatedBy&quot;: ${__groovy(vars.get(&apos;HEAD1_UpdatedBy_1&apos;),)},&#xd;
            &quot;UpdatedOn&quot;: &quot;${HEAD1_UpdatedOn_1}&quot;&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;PCountSetupId&quot;: &quot;${PSETUP_PCountSetupId_1}&quot;,&#xd;
    &quot;PCountActionId&quot;: 10,&#xd;
    &quot;AdjustmentAccount&quot;: &quot;131&quot;,&#xd;
    &quot;AdjustmentDate&quot;: &quot;${datetoday}&quot;,&#xd;
    &quot;isSelectAll&quot;: false,&#xd;
    &quot;LineItemsCount&quot;: 960&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_PhysicalCount/MainFlow/PCountLineItems_Wb/ActionPhysicalCountDetails_Save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActionDoLogout" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;versionInfo&quot;: {&#xd;
    &quot;moduleVersion&quot;: &quot;1S64ade1cYsk+ihONTvIJQ&quot;,&#xd;
    &quot;apiVersion&quot;: &quot;8aHDGzSbCv1JiS3LscJ2zg&quot;&#xd;
  },&#xd;
  &quot;viewName&quot;: &quot;MainFlow.PhysicalCountSetupList&quot;,&#xd;
  &quot;inputParameters&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/NTIS_PhysicalCount/screenservices/NTIS_Th/Common/UserInfo/ActionDoLogout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get X-CSRFToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">X_CSRF_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">nr2Users=crf%3d(.+?)%3b</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="false">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">log.info(&quot;***************************&quot;+vars.get(&quot;X_CSRF_TOKEN&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;USER_ID&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_BranchName&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_CompanyName&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_OperatingUnitName&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_StatusCode&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_StatusMeaning&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_SubIOName&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_SourceOrgId&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_SubIOId&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_StartDate&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_EndDate&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_CreatedBy&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_CreatedOn&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_UpdatedBy&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;HEAD1_UpdatedOn&quot;))
log.info(&quot;***************************&quot;+vars.get(&quot;PSETUP_PCountSetupId&quot;))</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="805311387">windowsupdate\.microsoft\.com.*</stringProp>
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="110431874">.*msg\.yahoo\.com.*</stringProp>
          <stringProp name="-88591710">www\.download\.windowsupdate\.com.*</stringProp>
          <stringProp name="1323576868">toolbarqueries\.google\..*</stringProp>
          <stringProp name="1739087931">http?://self-repair\.mozilla\.org.*</stringProp>
          <stringProp name="1206954446">tiles.*\.mozilla\.com.*</stringProp>
          <stringProp name="-1424663473">.*detectportal\.firefox\.com.*</stringProp>
          <stringProp name="1779943373">us\.update\.toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="-190610036">.*\.google\.com.*/safebrowsing/.*</stringProp>
          <stringProp name="-1899150273">api\.bing\.com.*</stringProp>
          <stringProp name="-958112859">toolbar\.google\.com.*</stringProp>
          <stringProp name="-192420923">.*yimg\.com.*</stringProp>
          <stringProp name="-576820688">toolbar\.msn\.com.*</stringProp>
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="-1435252351">toolbar\.avg\.com/.*</stringProp>
          <stringProp name="2118375536">www\.google-analytics\.com.*</stringProp>
          <stringProp name="-1279148329">pgq\.yahoo\.com.*</stringProp>
          <stringProp name="1815174768">safebrowsing.*\.google\.com.*</stringProp>
          <stringProp name="-1314416226">sqm\.microsoft\.com.*</stringProp>
          <stringProp name="587935979">g\.msn.*</stringProp>
          <stringProp name="1629558731">clients.*\.google.*</stringProp>
          <stringProp name="11072252">.*toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="1726898318">geo\.yahoo\.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">4</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">true</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name">NTIS</stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">1</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <stringProp name="ProxyControlGui.default_encoding">UTF-8</stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">recording.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
